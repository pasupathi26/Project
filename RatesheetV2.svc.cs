using RestSharp;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data.Entity.Infrastructure;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Net;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.ServiceModel;
using System.ServiceModel.Activation;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Hosting;
using MySql.Data.MySqlClient;
using System.Data;
using System.Web.Script.Serialization;
using System.Security.Cryptography.X509Certificates;
using System.Net.Security;
using NHibernate;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System.Drawing;
using RMSServices.Ratesheet_Class_Files;
using MongoDB.Bson;
using MongoDB.Driver;
using Newtonsoft.Json;
using MongoDB.Bson.Serialization.Attributes;
using MongoDB.Driver.Builders;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;

namespace RMSServices
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the class name "RatesheetV2" in code, svc and config file together.
    // NOTE: In order to launch WCF Test Client for testing this service, please select RatesheetV2.svc or RatesheetV2.svc.cs at the Solution Explorer and start debugging.
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]


    public class RatesheetV2 : IRatesheetV2
    {

        public string SaveFile(Byte[] file)
        {
            string files = "~/Temp/" + GetTimestamp(DateTime.Now) + ".csv";
            string filename = HostingEnvironment.MapPath(files);
            File.WriteAllBytes(filename, file);
            return filename;
        }
        public string SaveFileNew(List<String> file)
        {
            string files = "~/Temp/" + GetTimestamp(DateTime.Now) + ".csv";
            string filename = HostingEnvironment.MapPath(files);
            File.WriteAllLines(filename, file);
            return filename;
        }

        public static String GetTimestamp(DateTime value)
        {
            return value.ToString("yyyyMMddHHmmssffff");
        }

        public Stream CreateRatesheet(RatesheetClass ratesheet)//, Int32 RateSheetRequestId)
        {

            //RatesheetResponse response = UploadRatesheet("D:\\Projects\\Code\\Code\\WebService\\RmsService2\\RMSServices\\Temp\\201505181625047589.csv", 10, 104);
            //Guid g1 = Guid.NewGuid();
            //string pop = g1.ToString().Replace("{", "");
            //string pop1 = pop.ToString().Replace("}", "");


            //RandNo = RandomNumber(10000000, 99999999);
            //Response.Write(RandNo);

            try
            {
                using (rmsEntities rms = new rmsEntities())
                {
                    rms.Configuration.ValidateOnSaveEnabled = false;
                    int rateSheetId = 0;
                    if (rms.ngt_ratesheet.Where(e => e.RatesheetName == ratesheet.RatesheetName.Trim() && e.PartitionID == ratesheet.PartitionID).ToList().Count == 0)
                    {

                        ngt_ratesheet rate = new ngt_ratesheet();
                        rate.CreatedBy = ratesheet.CreatedBy;
                        rate.CreationDate = DateTime.Now;
                        rate.CurrencyID = ratesheet.CurrencyID;
                        rate.LastUpdatedOn = DateTime.Now;
                        rate.Owner = ratesheet.Owner;
                        rate.RatesheetName = ratesheet.RatesheetName;
                        rate.Status = ratesheet.Status;
                        rate.Tag = ratesheet.Tag;
                        rate.CreatedBy = ratesheet.CreatedBy;
                        rate.UpdatedBy = ratesheet.CreatedBy;
                        rate.PartitionID = ratesheet.PartitionID;
                        rate.RateSheetRequestId = ratesheet.RateSheetRequestId;
                        rate.Active = 1;
                        rate.CodecId = ratesheet.CodecId;
                        rms.ngt_ratesheet.Add(rate);


                        rms.SaveChanges();

                        rateSheetId = rate.RatesheetID;
                        //int check = rate.RateSheetRequestId;

                        return RMSCDR.SerializeAndCreateMS(new SuccessResponse() { status = "true", Message = "Ratesheet Added Successfully", Value = rate.RatesheetID.ToString() });

                        //string path = SaveFileNew(ratesheet.NewFile);


                        //RatesheetResponse response = UploadRatesheet(path, ratesheet.PartitionID, rateSheetId);
                        //if (response.status == "true")
                        //{
                        //    return RMSCDR.SerializeAndCreateMS(new SuccessResponse() { status = "true", Message = "Ratesheet Added Successfully", Value = rate.RatesheetID.ToString() });

                        //}
                        //else
                        //{
                        //    var delete = rms.ngt_ratesheet.SingleOrDefault(g => g.RatesheetID == rate.RatesheetID);

                        //    rms.ngt_ratesheet.Remove(delete);
                        //    rms.SaveChanges();

                        //    return RMSCDR.SerializeAndCreateMS(new RatesheetResponse() { status = response.status, Message = response.Message, FileName = response.FileName });

                        //}
                    }
                    //else if (!string.IsNullOrEmpty(ratesheet.RateContinue))
                    //{
                    //    string path = SaveFileNew(ratesheet.NewFile);

                    //    int RatesheetId = Convert.ToInt32(ratesheet.RateContinue);

                    //    RatesheetResponse response = UploadRatesheet(path, ratesheet.PartitionID, RatesheetId);
                    //    if (response.status == "true")
                    //    {
                    //        return RMSCDR.SerializeAndCreateMS(new SuccessResponse() { status = "true", Message = "Ratesheet Added Successfully", Value = RatesheetId.ToString() });

                    //    }
                    //    else
                    //    {
                    //        var delete = rms.ngt_ratesheet.SingleOrDefault(g => g.RatesheetID == RatesheetId);

                    //        rms.ngt_ratesheet.Remove(delete);
                    //        rms.SaveChanges();

                    //        return RMSCDR.SerializeAndCreateMS(new RatesheetResponse() { status = response.status, Message = response.Message, FileName = response.FileName });

                    //    }
                    //}
                    else
                    {
                        return RMSCDR.SerializeAndCreateMS(new SuccessResponse() { status = "false", Message = "Ratesheet Name Already Exists." });

                    }
                }

            }
            catch (Exception ex)
            {
                return RMSCDR.SerializeAndCreateMS(new Response() { status = "false", Message = ex.Message });
            }
            finally
            {

            }
            //return null;
        }


        //int RandNo = 0;

        //private int RandomNumber(int min, int max)
        //{
        //    Random random = new Random();
        //    return random.Next(min, max);
        //}


        //public Stream UpdateRates(UpdateRatesClass ratesheet)
        //{
        //    try
        //    {
        //        using (rmsEntities rms = new rmsEntities())
        //        {
        //            ngt_ratesheet rate = rms.ngt_ratesheet.Where(e => e.RatesheetID == ratesheet.RatesheetID).SingleOrDefault();
        //            if (rate != null)
        //            {

        //                rate.UpdatedBy = ratesheet.UpdatedBy;
        //                rate.LastUpdatedOn = DateTime.Now;
        //                rms.SaveChanges();

        //                string path = SaveFile(ratesheet.File);


        //                RatesheetResponse response = UploadRatesheet(path, rate.PartitionID, rate.RatesheetID);
        //                if (response.status == "true")
        //                {
        //                    return RMSCDR.SerializeAndCreateMS(new SuccessResponse() { status = "true", Message = "Ratesheet Updated Successfully", Value = rate.RatesheetID.ToString() });

        //                }
        //                else
        //                {
        //                    return RMSCDR.SerializeAndCreateMS(new RatesheetResponse() { status = response.status, Message = response.Message, FileName = response.FileName });

        //                }
        //            }
        //            else
        //            {
        //                return RMSCDR.SerializeAndCreateMS(new SuccessResponse() { status = "false", Message = "Ratesheet Not Found." });

        //            }
        //        }

        //    }
        //    catch (Exception ex)
        //    {
        //        return RMSCDR.SerializeAndCreateMS(new Response() { status = "false", Message = ex.Message });
        //    }
        //    finally
        //    {

        //    }
        //}
        public Stream UpdateRates(UpdateRatesClass ratesheet)
        {
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {
                    rms.Configuration.ValidateOnSaveEnabled = false;
                    ngt_ratesheet rate = rms.ngt_ratesheet.Where(e => e.RatesheetID == ratesheet.RatesheetID).SingleOrDefault();

                    //  ngt_rates rateonly = rms.ngt_rates.Where(e => e.RatesheetID == ratesheet.RatesheetID).OrderBy() .SingleOrDefault();

                    // var rateBatchID = (from NR in rms.ngt_rates where NR.RatesheetID == ratesheet.RatesheetID orderby NR.BatchID descending select NR.BatchID).SingleOrDefault(); 

                    // var hosters = from e in context.Hosters_HostingProviderDetail where e.ActiveStatusID == pendingStateId 
                    //orderby e.HostingProviderName **descending** select e; 

                    //return hosters.ToList();




                    // ratesheeetaddupdatestatu ratestatus =new  ratesheeetaddupdatestatu();
                    if (rate != null)
                    {

                        rate.UpdatedBy = ratesheet.UpdatedBy;
                        rate.LastUpdatedOn = DateTime.Now;
                        rms.SaveChanges();
                        //                        ratestatus.RequestType = "Update";
                        //                        ratestatus.RatesheetID = rate.RatesheetID;
                        //                        ratestatus.RatesheetName = rate.RatesheetName;
                        //                        ratestatus.UpdatedDate = DateTime.Now.ToString();
                        //                        if (ratesheet.value == "true")
                        //                        {
                        //                            ratestatus.DBstatus = "Complete";
                        //                            ratestatus.CompleteStatus = "Pending";
                        //                        }
                        //                        else
                        //                        {
                        //                            ratestatus.DBstatus = "Failure";
                        //                            ratestatus.CompleteStatus = "Failure";
                        //                        }
                        //                        ratestatus.BatchID = rateBatchID;
                        ////RequestType,RatesheetID,RatesheetName,BatchID,ServerID,ServerName,ServerRatesheetID,ServerRatesheetName,
                        ////DBstatus,ServerStstus,CompleteStatus,UpdatedDate
                        //                        rms.ratesheeetaddupdatestatus.Add(ratestatus);
                        //                        rms.SaveChanges();
                        //                        string newIdentityValue = ratestatus.ID.ToString();

                        // string path = SaveFile(ratesheet.File);


                        // RatesheetResponse response = UploadRatesheet(path, rate.PartitionID, rate.RatesheetID);
                        //if (response.status == "true")
                        //{
                        //    return RMSCDR.SerializeAndCreateMS(new SuccessResponse() { status = "true", Message = "Ratesheet Updated Successfully", Value = rate.RatesheetID.ToString() });

                        //}
                        //else
                        //{
                        //    return RMSCDR.SerializeAndCreateMS(new RatesheetResponse() { status = response.status, Message = response.Message, FileName = response.FileName });

                        //}
                        return RMSCDR.SerializeAndCreateMS(new SuccessResponse() { status = "true", Message = "Ratesheet Updated" });
                    }
                    else
                    {
                        return RMSCDR.SerializeAndCreateMS(new SuccessResponse() { status = "false", Message = "Ratesheet Not Found." });

                    }
                }

            }
            catch (Exception ex)
            {
                return RMSCDR.SerializeAndCreateMS(new Response() { status = "false", Message = ex.Message });
            }
            finally
            {

            }
        }

        //waiting shripal
        public SuccessResponse UpdateRatesheetStatus(int RatesheetID, string UpdatedBy, string value, string RequestType)
        {
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {
                    rms.Configuration.ValidateOnSaveEnabled = false;
                    ngt_ratesheet rate = rms.ngt_ratesheet.Where(e => e.RatesheetID == RatesheetID).SingleOrDefault();
                    var rateBatchID = (from NR in rms.ngt_rates where NR.RatesheetID == RatesheetID orderby NR.BatchID descending select NR.BatchID).FirstOrDefault();
                    ratesheetaddupdatestatu ratestatus = new ratesheetaddupdatestatu();
                    if (rate != null)
                    {
                        ratestatus.RequestType = RequestType;
                        ratestatus.RatesheetID = rate.RatesheetID;
                        ratestatus.RatesheetName = rate.RatesheetName;
                        ratestatus.UpdatedDate = DateTime.Now;

                        if (RequestType == "New")
                        {
                            if (value == "true")
                            {
                                //  ratestatus.ServerName = "--";
                                //   ratestatus.ServerRatesheetName = "--";
                                ratestatus.CompleteStatus = "Complete";
                                //   ratestatus.ServerStstus = "--";
                                ratestatus.DBstatus = "Complete";
                            }
                            else
                            {
                                //  ratestatus.ServerName = "--";
                                //  ratestatus.ServerRatesheetName = "--";
                                ratestatus.CompleteStatus = "Failure";
                                //   ratestatus.ServerStstus = "--";
                                ratestatus.DBstatus = "Failure";
                            }
                        }
                        else
                        {
                            if (value == "true")
                            {
                                ratestatus.DBstatus = "Complete";
                                ratestatus.CompleteStatus = "Pending";
                            }
                            else
                            {
                                ratestatus.DBstatus = "Failure";
                                ratestatus.CompleteStatus = "Failure";
                            }

                        }


                        ratestatus.BatchID = rateBatchID;

                        rms.ratesheetaddupdatestatus.Add(ratestatus);
                        rms.SaveChanges();
                        string newIdentityValue = Convert.ToString(ratestatus.ID);

                        //   var checkid = (from rs in rms.ratesheetaddupdatestatus orderby rs.ID descending select rs.ID).FirstOrDefault();

                        // return RMSCDR.SerializeAndCreateMS(new SuccessResponse() { status = "true", Message = "Ratesheet Updated", Value = newIdentityValue });

                        return new SuccessResponse() { status = "true", Message = "Ratesheet Updated", Value = newIdentityValue };
                    }
                    else
                    {
                        //  return RMSCDR.SerializeAndCreateMS(new SuccessResponse() { status = "false", Message = "Ratesheet Not Found.", Value = "0" });
                        return new SuccessResponse() { status = "false", Message = "Ratesheet Not Found.", Value = "0" };

                    }
                }

            }
            catch (Exception ex)
            {
                // return RMSCDR.SerializeAndCreateMS(new Response() { status = "false", Message = ex.Message });
                return new SuccessResponse() { status = "false", Message = ex.Message };
            }
            finally
            {

            }
        }




        public SuccessResponse UpdateRatesNew(int RatesheetID, string UpdatedBy, string value, string RequestType, int jobqueueid)
        {
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {
                    rms.Configuration.ValidateOnSaveEnabled = false;
                    ngt_ratesheet rate = rms.ngt_ratesheet.Where(e => e.RatesheetID == RatesheetID).SingleOrDefault();
                    var rateBatchID = (from NR in rms.ngt_rates where NR.RatesheetID == RatesheetID orderby NR.BatchID descending select NR.BatchID).FirstOrDefault();
                    ratesheetaddupdatestatu ratestatus = new ratesheetaddupdatestatu();
                    if (rate != null)
                    {
                        ratestatus.RequestType = RequestType;
                        ratestatus.RatesheetID = rate.RatesheetID;
                        ratestatus.RatesheetName = rate.RatesheetName;
                        ratestatus.UpdatedDate = DateTime.Now;
                        ratestatus.JobsQueueID = jobqueueid;

                        if (RequestType == "New")
                        {
                            if (value == "true")
                            {
                                //     ratestatus.ServerName = "--";
                                //     ratestatus.ServerRatesheetName = "--";
                                ratestatus.CompleteStatus = "Complete";
                                //    ratestatus.ServerStstus = "--";
                                ratestatus.DBstatus = "Complete";
                            }
                            else
                            {
                                //   ratestatus.ServerName = "--";
                                //    ratestatus.ServerRatesheetName = "--";
                                ratestatus.CompleteStatus = "Failure";
                                //     ratestatus.ServerStstus = "--";
                                ratestatus.DBstatus = "Failure";
                            }
                        }
                        else
                        {
                            if (value == "true")
                            {
                                ratestatus.DBstatus = "Complete";
                                ratestatus.CompleteStatus = "Pending";
                            }
                            else
                            {
                                ratestatus.DBstatus = "Failure";
                                ratestatus.CompleteStatus = "Failure";
                            }
                        }
                        ratestatus.BatchID = rateBatchID;
                        rms.ratesheetaddupdatestatus.Add(ratestatus);
                        rms.SaveChanges();
                        string newIdentityValue = Convert.ToString(ratestatus.ID);
                        return new SuccessResponse() { status = "true", Message = "Ratesheet Updated", Value = newIdentityValue };
                    }
                    else
                        return new SuccessResponse() { status = "false", Message = "Ratesheet Not Found.", Value = "0" };
                }
            }
            catch (Exception ex)
            {
                return new SuccessResponse() { status = "false", Message = ex.Message };
            }
            finally
            {

            }
        }

        public SuccessResponse UpdateRatesserverNew(int RatesheetID, string UpdatedBy, int MappingID, int UpdatedID, string value, int jobqueueID)
        {
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {
                    rms.Configuration.ValidateOnSaveEnabled = false;
                    ngt_ratesheet rate = rms.ngt_ratesheet.Where(e => e.RatesheetID == RatesheetID).SingleOrDefault();
                    var rateBatchID = (from NR in rms.ngt_rates where NR.RatesheetID == RatesheetID orderby NR.BatchID descending select NR.BatchID).FirstOrDefault();
                    server_ratesheet_map srm = rms.server_ratesheet_map.Where(e => e.ID == MappingID).SingleOrDefault();
                    server_details sd = rms.server_details.Where(e => e.ServerID == srm.Server_ID).SingleOrDefault();
                    if (rate != null)
                    {
                        if (UpdatedID != 0)
                        {
                            int val = Convert.ToInt32(UpdatedID);
                            ratesheetaddupdatestatu ratestatusold = rms.ratesheetaddupdatestatus.Where(e => e.ID == val).SingleOrDefault();

                            ratestatusold.UpdatedDate = DateTime.Now;
                            ratestatusold.ServerID = Convert.ToInt32(srm.Server_ID);
                            ratestatusold.ServerRatesheetID = srm.ServerRatesheetID; //Convert.ToInt32(srm.ServerRatesheetID);
                            ratestatusold.ServerRatesheetName = srm.ServerRatesheetName;
                            ratestatusold.ServerName = sd.ServerName;

                            if (value == "true")
                            {
                                ratestatusold.DBstatus = "Complete";
                                ratestatusold.CompleteStatus = "Complete";
                                ratestatusold.ServerStstus = "Complete";

                            }
                            else
                            {
                                ratestatusold.DBstatus = "Complete";
                                ratestatusold.CompleteStatus = "Pending";
                                ratestatusold.ServerStstus = "Failure";
                            }
                            rms.SaveChanges();

                        }
                        else
                        {
                            ratesheetaddupdatestatu ratestatus = new ratesheetaddupdatestatu();
                            ratestatus.RequestType = "Update";
                            ratestatus.RatesheetID = rate.RatesheetID;
                            ratestatus.RatesheetName = rate.RatesheetName;
                            ratestatus.UpdatedDate = DateTime.Now;
                            ratestatus.ServerID = Convert.ToInt32(srm.Server_ID);
                            ratestatus.ServerRatesheetID = srm.ServerRatesheetID;// Convert.ToInt32(srm.ServerRatesheetID);
                            ratestatus.ServerRatesheetName = srm.ServerRatesheetName;
                            ratestatus.ServerName = sd.ServerName;
                            ratestatus.JobsQueueID = jobqueueID;
                            if (value == "true")
                            {
                                ratestatus.DBstatus = "Complete";
                                ratestatus.CompleteStatus = "Complete";
                                ratestatus.ServerStstus = "Complete";

                            }
                            else
                            {
                                ratestatus.DBstatus = "Complete";
                                ratestatus.CompleteStatus = "Pending";
                                ratestatus.ServerStstus = "Failure";
                            }
                            ratestatus.BatchID = rateBatchID;
                            rms.ratesheetaddupdatestatus.Add(ratestatus);
                            rms.SaveChanges();
                        }




                        //  string newIdentityValue = ratestatus.ID.ToString();

                        // return RMSCDR.SerializeAndCreateMS(new SuccessResponse() { status = "true", Message = "Ratesheet Updated", Value = newIdentityValue });

                        return new SuccessResponse() { status = "true", Message = "Ratesheet Updated" };
                    }
                    else
                    {
                        //  return RMSCDR.SerializeAndCreateMS(new SuccessResponse() { status = "false", Message = "Ratesheet Not Found.", Value = "0" });
                        return new SuccessResponse() { status = "false", Message = "Ratesheet Not Found." };

                    }
                }

            }
            catch (Exception ex)
            {
                // return RMSCDR.SerializeAndCreateMS(new Response() { status = "false", Message = ex.Message });
                return new SuccessResponse() { status = "false", Message = ex.Message };
            }
            finally
            {

            }
        }







        public SuccessResponse UpdateRatesNew(int RatesheetID, string UpdatedBy, string value, string RequestType)
        {
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {
                    ngt_ratesheet rate = rms.ngt_ratesheet.Where(e => e.RatesheetID == RatesheetID).SingleOrDefault();
                    var rateBatchID = (from NR in rms.ngt_rates where NR.RatesheetID == RatesheetID orderby NR.BatchID descending select NR.BatchID).FirstOrDefault();
                    ratesheetaddupdatestatu ratestatus = new ratesheetaddupdatestatu();
                    if (rate != null)
                    {
                        ratestatus.RequestType = RequestType;
                        ratestatus.RatesheetID = rate.RatesheetID;
                        ratestatus.RatesheetName = rate.RatesheetName;
                        ratestatus.UpdatedDate = DateTime.Now;
                        // ratestatus.JobsQueueID = jobqueueid;

                        if (RequestType == "New")
                        {
                            if (value == "true")
                            {
                                //  ratestatus.ServerName = "--";
                                //    ratestatus.ServerRatesheetName = "--";
                                ratestatus.CompleteStatus = "Complete";
                                //   ratestatus.ServerStstus = "--";
                                ratestatus.DBstatus = "Complete";

                            }
                            else
                            {
                                //   ratestatus.ServerName = "--";
                                //    ratestatus.ServerRatesheetName = "--";
                                ratestatus.CompleteStatus = "Failure";
                                //   ratestatus.ServerStstus = "--";
                                ratestatus.DBstatus = "Failure";
                            }
                        }
                        else
                        {
                            if (value == "true")
                            {
                                ratestatus.DBstatus = "Complete";
                                ratestatus.CompleteStatus = "Pending";
                            }
                            else
                            {
                                ratestatus.DBstatus = "Failure";
                                ratestatus.CompleteStatus = "Failure";
                            }

                        }


                        ratestatus.BatchID = rateBatchID;

                        rms.ratesheetaddupdatestatus.Add(ratestatus);
                        rms.SaveChanges();
                        string newIdentityValue = Convert.ToString(ratestatus.ID);

                        //   var checkid = (from rs in rms.ratesheetaddupdatestatus orderby rs.ID descending select rs.ID).FirstOrDefault();

                        // return RMSCDR.SerializeAndCreateMS(new SuccessResponse() { status = "true", Message = "Ratesheet Updated", Value = newIdentityValue });

                        return new SuccessResponse() { status = "true", Message = "Ratesheet Updated", Value = newIdentityValue };
                    }
                    else
                    {
                        //  return RMSCDR.SerializeAndCreateMS(new SuccessResponse() { status = "false", Message = "Ratesheet Not Found.", Value = "0" });
                        return new SuccessResponse() { status = "false", Message = "Ratesheet Not Found.", Value = "0" };

                    }
                }

            }
            catch (Exception ex)
            {
                // return RMSCDR.SerializeAndCreateMS(new Response() { status = "false", Message = ex.Message });
                return new SuccessResponse() { status = "false", Message = ex.Message };
            }
            finally
            {

            }
        }

        public SuccessResponse UpdateRatesserverNew(int RatesheetID, string UpdatedBy, int MappingID, int UpdatedID, string value)
        {
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {
                    rms.Configuration.ValidateOnSaveEnabled = false;
                    ngt_ratesheet rate = rms.ngt_ratesheet.Where(e => e.RatesheetID == RatesheetID).SingleOrDefault();
                    var rateBatchID = (from NR in rms.ngt_rates where NR.RatesheetID == RatesheetID orderby NR.BatchID descending select NR.BatchID).FirstOrDefault();
                    server_ratesheet_map srm = rms.server_ratesheet_map.Where(e => e.ID == MappingID).SingleOrDefault();
                    server_details sd = rms.server_details.Where(e => e.ServerID == srm.Server_ID).SingleOrDefault();
                    if (rate != null)
                    {
                        if (UpdatedID != 0)
                        {
                            int val = Convert.ToInt32(UpdatedID);
                            ratesheetaddupdatestatu ratestatusold = rms.ratesheetaddupdatestatus.Where(e => e.ID == val).SingleOrDefault();

                            ratestatusold.UpdatedDate = DateTime.Now;
                            ratestatusold.ServerID = Convert.ToInt32(srm.Server_ID);
                            ratestatusold.ServerRatesheetID = srm.ServerRatesheetID;// Convert.ToInt32(srm.ServerRatesheetID);
                            ratestatusold.ServerRatesheetName = srm.ServerRatesheetName;
                            ratestatusold.ServerName = sd.ServerName;

                            if (value == "true")
                            {
                                ratestatusold.DBstatus = "Complete";
                                ratestatusold.CompleteStatus = "Complete";
                                ratestatusold.ServerStstus = "Complete";

                            }
                            else
                            {
                                ratestatusold.DBstatus = "Complete";
                                ratestatusold.CompleteStatus = "Pending";
                                ratestatusold.ServerStstus = "Failure";
                            }
                            rms.SaveChanges();

                        }
                        else
                        {
                            ratesheetaddupdatestatu ratestatus = new ratesheetaddupdatestatu();
                            ratestatus.RequestType = "Update";
                            ratestatus.RatesheetID = rate.RatesheetID;
                            ratestatus.RatesheetName = rate.RatesheetName;
                            ratestatus.UpdatedDate = DateTime.Now;
                            ratestatus.ServerID = Convert.ToInt32(srm.Server_ID);
                            ratestatus.ServerRatesheetID = srm.ServerRatesheetID;// Convert.ToInt32(srm.ServerRatesheetID);
                            ratestatus.ServerRatesheetName = srm.ServerRatesheetName;
                            ratestatus.ServerName = sd.ServerName;
                            // ratestatus.JobsQueueID = jobqueueID;
                            if (value == "true")
                            {
                                ratestatus.DBstatus = "Complete";
                                ratestatus.CompleteStatus = "Complete";
                                ratestatus.ServerStstus = "Complete";

                            }
                            else
                            {
                                ratestatus.DBstatus = "Complete";
                                ratestatus.CompleteStatus = "Pending";
                                ratestatus.ServerStstus = "Failure";
                            }
                            ratestatus.BatchID = rateBatchID;
                            rms.ratesheetaddupdatestatus.Add(ratestatus);
                            rms.SaveChanges();
                        }




                        //  string newIdentityValue = ratestatus.ID.ToString();

                        // return RMSCDR.SerializeAndCreateMS(new SuccessResponse() { status = "true", Message = "Ratesheet Updated", Value = newIdentityValue });

                        return new SuccessResponse() { status = "true", Message = "Ratesheet Updated" };
                    }
                    else
                    {
                        //  return RMSCDR.SerializeAndCreateMS(new SuccessResponse() { status = "false", Message = "Ratesheet Not Found.", Value = "0" });
                        return new SuccessResponse() { status = "false", Message = "Ratesheet Not Found." };

                    }
                }

            }
            catch (Exception ex)
            {
                // return RMSCDR.SerializeAndCreateMS(new Response() { status = "false", Message = ex.Message });
                return new SuccessResponse() { status = "false", Message = ex.Message };
            }
            finally
            {

            }
        }

        public RatesheetResponse AddRates(AddRatesClass rates)
        {
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {
                    rms.Configuration.ValidateOnSaveEnabled = false;
                    ngt_ratesheet rate = rms.ngt_ratesheet.Where(e => e.RatesheetID == rates.RateSheetID).SingleOrDefault();
                    if (rate != null)
                    {

                        rate.UpdatedBy = rates.UpdatedBy;
                        rate.LastUpdatedOn = DateTime.Now;
                        rms.SaveChanges();

                        Boolean bError = false;
                        string strErrDesc = string.Empty;
                        string strContent = string.Empty;
                        ArrayList alRegion = new ArrayList();
                        ArrayList alDesc = new ArrayList();

                        List<ngt_rates> resultToFind = new List<ngt_rates>();



                        //((IObjectContextAdapter)rms).ObjectContext.CommandTimeout = 180;
                        ((IObjectContextAdapter)rms).ObjectContext.CommandTimeout = 86400;




                        //ngt_Partition nPartition = ngt_PartitionFactory.LoadNgt_PartitionByQuery("ID=" + Session["PartitionId"].ToString(), null);

                        //rms.Configuration.LazyLoadingEnabled = true;
                        //List<ngt_region_code> regionCodes = rms.ngt_region_code.Where(d => d.ngt_PartitionId == rate.PartitionID).ToList();


                        #region CheckFileValidation




                        foreach (var code in rates.rates)
                        {
                            //if (rms.ngt_region_code.Where(s => s.Country_code == code.RegionCode && s.ngt_PartitionId == rate.PartitionID).ToList().Count == 0)
                            if (rms.ngt_region_code.Where(s => s.Region_hash_code == code.RegionCode && s.ngt_PartitionId == rate.PartitionID).ToList().Count == 0) //why we were comparing with only the Country code??
                            {

                                bError = true;
                                alRegion.Add(code.RegionCode);
                                alDesc.Add(code.Description);
                            }

                        }



                        #endregion
                        #region Uploading file
                        if (bError == false)
                        {
                            try
                            {
                                var addrates = rms.ngt_rates.Where(d => d.RatesheetID == rates.RateSheetID).ToList();

                                Hashtable htRates = new Hashtable();



                                if (addrates.Count > 1)
                                {
                                    foreach (var addrate in addrates)
                                    {
                                        if (addrate.Active != "N")
                                        {
                                            //if (!htRates.ContainsKey(addrate.ngt_region_code.Region_hash_code + addrate.Effective_on))

                                            //if (!htRates.ContainsKey(addrate.ngt_ratesheet.CreationDate.ToString() + addrate.Effective_on)) //addrate.ngt_region_code.Region_hash_code + addrate.Effective_on
                                            //    htRates.Add(addrate.ngt_ratesheet.CreationDate.ToString() + addrate.Effective_on, addrate);


                                            if (!htRates.ContainsKey((addrate.ngt_region_code.Region_hash_code + addrate.Effective_on)))
                                            {
                                                htRates.Add(addrate.ngt_region_code.Region_hash_code + addrate.Effective_on, addrate);
                                            }


                                            //var addratesRHC = rms.ngt_region_code.ToList();
                                            //if (addratesRHC.Count > 1)
                                            //{
                                            //    foreach (var addratesRHC1 in addratesRHC)
                                            //    {
                                            //        //if (addratesRHC1.Active != "N")
                                            //        //{
                                            //            if (!htRates.ContainsKey(addratesRHC1.Region_hash_code + addrate.Effective_on)) //.ngt_region_code.Region_hash_code + addratesRHC1.Effective_on))
                                            //            {
                                            //                htRates.Add(addrate.ngt_ratesheet.CreationDate.ToString() + addrate.Effective_on, addrate);
                                            //            }

                                            //        //}
                                            //    }
                                            //}










                                            //htRates.Add(addrate.ngt_region_code.Region_hash_code + addrate.Effective_on, addrate);

                                            //if (!htRates.ContainsKey(addrate.ngt_region_codeId + Convert.ToInt32(addrate.Effective_on))) //.Region_hash_code + addrate.Effective_on))
                                            //    htRates.Add(addrate.ngt_region_codeId + Convert.ToInt32(addrate.Effective_on), addrate);



                                            //htRates.Add(addrate.ngt_region_code.Region_hash_code + addrate.Effective_on, addrate);
                                        }
                                    }
                                }




                                //Checking first row of ratesheet is data


                                int batchID = 1;


                                //    string ab = "select * from ngt_rates";

                                //    resultToFind = rms.Database.SqlQuery<ratesresult>(ab).ToList();


                                //      if (rms.ngt_rates.ToList().Count > 0)
                                //       {

                                batchID = rms.ngt_rates.OrderByDescending(g => g.BatchID).First().BatchID + 1; //Working uncomment only this needed
                                // batchID = addrates.OrderByDescending(g => g.BatchID).FirstOrDefault().BatchID + 1; //.First().BatchID + 1;


                                //string ab = "select * from ngt_rates order by BatchID desc";
                                //resultToFind = rms.Database.SqlQuery<ngt_rates>(ab).ToList();
                                //batchID = Convert.ToInt32(rms.Database.SqlQuery<ngt_rates>(ab)) + 1;  //.ToList();

                                //   batchID = rms.ngt_rates


                                //     }



                                DateTime dt = new DateTime();
                                string date = "";
                                foreach (var code in rates.rates)
                                {
                                    dt = Convert.ToDateTime(code.Effective_on);
                                    date = dt.ToString(); //String.Format(ConfigurationManager.AppSettings["ServerTimeFormat"].ToString(), dt);
                                    //checking already contain rates for CC+AC
                                    if (htRates.Contains(code.RegionCode + date))
                                    {
                                        ngt_rates updatableRate = (ngt_rates)htRates[code.RegionCode + date];
                                        //ngt_com_rate updatableRate = (ngt_com_rate)htRates[arrContent[Convert.ToInt32(drpdRegionCode.SelectedValue.Trim())] + Convert.ToDateTime(arrContent[Convert.ToInt32(drpdEffectiveOn.SelectedValue.Trim())]).ToString()];
                                        //Check effective date is same
                                        if (updatableRate.Effective_on.ToString().Equals(date))
                                        {
                                            //If rate is not same for same effective date
                                            if (!Convert.ToDecimal(updatableRate.Call_rate).Equals(code.Call_rate))
                                            {
                                                var upd = rms.ngt_rates.SingleOrDefault(f => f.Id == updatableRate.Id);
                                                upd.Active = "N";
                                                rms.SaveChanges();

                                                //Remove from hashtable
                                                htRates.Remove(code.RegionCode + date);

                                                string tempChck = "";
                                                switch (code.Active.ToLower())
                                                {
                                                    case "allowed":
                                                        tempChck = "A";
                                                        break;
                                                    case "blocked":
                                                        tempChck = "B";
                                                        break;
                                                    case "delete":
                                                        tempChck = "D";
                                                        break;
                                                }

                                                ngt_rates addratess = new ngt_rates();
                                                addratess.Effective_on = Convert.ToDateTime(code.Effective_on);
                                                addratess.Call_rate = code.Call_rate;

                                                addratess.Start_Pulse = Convert.ToInt32(code.StartPulse);
                                                addratess.Next_Pulse = Convert.ToInt32(code.NextPulse);

                                                addratess.Active = tempChck;
                                                addratess.RatesheetID = rates.RateSheetID;
                                                addratess.ngt_PartitionId = rate.PartitionID;
                                                addratess.ngt_region_codeId = rms.ngt_region_code.SingleOrDefault(s => s.Country_code == code.RegionCode && s.ngt_PartitionId == rate.PartitionID).Id;
                                                addratess.BatchID = batchID;
                                                rms.ngt_rates.Add(addratess);

                                                htRates.Add(code.RegionCode + date, addrates);
                                            }

                                        }
                                        else
                                        {
                                            string tempChck = "";
                                            switch (code.Active.ToLower())
                                            {
                                                case "allowed":
                                                    tempChck = "A";
                                                    break;
                                                case "blocked":
                                                    tempChck = "B";
                                                    break;
                                                case "delete":
                                                    tempChck = "D";
                                                    break;
                                            }

                                            ngt_rates addratess = new ngt_rates();
                                            addratess.Effective_on = Convert.ToDateTime(code.Effective_on);
                                            addratess.Call_rate = code.Call_rate;

                                            addratess.Start_Pulse = Convert.ToInt32(code.StartPulse);
                                            addratess.Next_Pulse = Convert.ToInt32(code.NextPulse);

                                            addratess.Active = tempChck;
                                            addratess.RatesheetID = rates.RateSheetID;
                                            addratess.ngt_PartitionId = rate.PartitionID;
                                            addratess.ngt_region_codeId = rms.ngt_region_code.SingleOrDefault(s => s.Country_code == code.RegionCode && s.ngt_PartitionId == rate.PartitionID).Id;
                                            addratess.BatchID = batchID;
                                            rms.ngt_rates.Add(addratess);

                                            htRates.Add(code.RegionCode + date, addrates);

                                        }
                                    }
                                    else
                                    {
                                        string tempChck = "";
                                        switch (code.Active.ToLower())
                                        {
                                            case "allowed":
                                                tempChck = "A";
                                                break;
                                            case "blocked":
                                                tempChck = "B";
                                                break;
                                            case "delete":
                                                tempChck = "D";
                                                break;
                                        }

                                        ngt_rates addratess = new ngt_rates();
                                        addratess.Effective_on = Convert.ToDateTime(code.Effective_on);
                                        addratess.Call_rate = code.Call_rate;

                                        addratess.Start_Pulse = Convert.ToInt32(code.StartPulse);
                                        addratess.Next_Pulse = Convert.ToInt32(code.NextPulse);

                                        addratess.Active = tempChck;
                                        addratess.RatesheetID = rates.RateSheetID;
                                        addratess.ngt_PartitionId = rate.PartitionID;
                                        addratess.ngt_region_codeId = rms.ngt_region_code.SingleOrDefault(s => s.Country_code == code.RegionCode && s.ngt_PartitionId == rate.PartitionID).Id;
                                        addratess.BatchID = batchID;
                                        rms.ngt_rates.Add(addratess);

                                        htRates.Add(code.RegionCode + date, addrates);
                                    }



                                }
                                rms.SaveChanges();

                                return new RatesheetResponse { Message = "Rates Added Successfully", status = "true" };
                            }
                            catch (Exception ex)
                            {

                                bError = true;
                                return new RatesheetResponse { Message = ex.Message, status = "false" };
                            }
                            finally
                            {

                            }
                            #endregion


                        }
                        else
                        {

                            //  return new RatesheetResponse { Message = "Region Codes is not present, add them first", status = "false" };
                            #region WriteNotAvailableRegionCode
                            string fileNameDownload = "Temp/RegionCodeHaveToAdd" + string.Format("{0:_yyyy_MM_dd_HH_mm_ss}", DateTime.Now) + ".csv";
                            StreamWriter sw = new StreamWriter(HostingEnvironment.MapPath("~/" + fileNameDownload));
                            try
                            {
                                sw.WriteLine("Country Code,Area Code,Country Description,Group Code,Group Description");
                                for (int count = 0; count < alRegion.Count; count++)
                                {
                                    sw.WriteLine(alRegion[count] + ",," + alDesc[count] + ",,");
                                }



                                return new RatesheetResponse { Message = "Add only those Rates whose destinations are present in the RMS.", status = "false", FileName = fileNameDownload };
                            }
                            catch (Exception ex)
                            {
                                return new RatesheetResponse { Message = ex.Message, status = "false" }; //Error message
                            }
                            finally
                            {
                                sw.Close();
                            }

                            #endregion
                        }

                    }
                    else
                    {
                        return new RatesheetResponse() { status = "false", Message = "Ratesheet Not Found." };

                    }
                }
            }
            catch (Exception ex)
            {
                return new RatesheetResponse { Message = ex.Message, status = "false" };
            }
        }

        public Response AddRegionCodes(UploadRegionCode rates)
        {
            try
            {
                string path = SaveFile(rates.File);
                StreamReader sr = new StreamReader(path);
                string strContent = string.Empty;
                string[] arrContent;
                int nCounter = 1;
                StringBuilder strCheckValid = new StringBuilder();
                strCheckValid.Append(sr.ReadToEnd());
                if (strCheckValid.ToString().Contains("#"))
                {
                    return new Response { status = "false", Message = "File contains invaild character(#)" };

                }
                if (strCheckValid.ToString().Contains(":"))
                {
                    return new Response { status = "false", Message = "File contains invaild character(:)" };
                }
                if (strCheckValid.ToString().Contains("?"))
                {
                    return new Response { status = "false", Message = "File contains invaild character(?)" };
                }
                if (strCheckValid.ToString().Contains("\""))
                {
                    return new Response { status = "false", Message = "File contains invaild character(\")" };
                }
                if (strCheckValid.ToString().Contains("\\"))
                {
                    return new Response { status = "false", Message = "File contains invaild character\\)" };
                }
                if (strCheckValid.ToString().Contains("/"))
                {
                    return new Response { status = "false", Message = "File contains invaild character(/)" };
                }
                if (strCheckValid.ToString().Contains("^"))
                {
                    return new Response { status = "false", Message = "File contains invaild character(^)" };
                }

                int errorCounter = 0;
                sr = new StreamReader(path);
                while (sr.EndOfStream == false)
                {
                    errorCounter++;
                    if (!new Regex(@"^[a-zA-Z0-9 \s,]*$").IsMatch(sr.ReadLine()))
                    {
                        sr.Close();
                        return new Response { status = "false", Message = "Line No." + errorCounter + " contains invalid character" };
                    }
                }
                sr.Close();
                sr = new StreamReader(path);
                Boolean bError = false;
                string strErrorDesc = string.Empty;
                while (sr.EndOfStream == false)
                {

                    if (nCounter > 1)
                    {
                        strContent = sr.ReadLine();
                        arrContent = strContent.Split(',');

                        //checking file have valid data
                        if (arrContent.Length == 5)
                        {
                            if (arrContent[0].Trim().Length == 0)
                            {
                                strErrorDesc = "Country code cannot be null.";
                                bError = true;
                                break;
                            }
                            else
                            {
                                if (!new Regex(@"^[0-9]*$").IsMatch(arrContent[0].Trim()))
                                {
                                    strErrorDesc = "Country code must be numeric";
                                    bError = true;
                                    break;
                                }

                            }

                            if (arrContent[1].Trim().Length != 0)
                            {
                                if (!new Regex(@"^[0-9]*$").IsMatch(arrContent[1].Trim()))
                                {
                                    strErrorDesc = "Area code must be numeric";
                                    bError = true;
                                    break;
                                }
                            }


                            if (arrContent[2].Trim().Length == 0)
                            {
                                strErrorDesc = "Country description cannot be null.";
                                bError = true;
                                break;
                            }

                            if (arrContent[3].Trim().Length == 0)
                            {
                                strErrorDesc = "Group code cannot be null.";
                            }
                            else
                            {
                                if (!new Regex(@"^[0-9]*$").IsMatch(arrContent[3].Trim()))
                                {
                                    strErrorDesc = "Group code must be numeric";
                                    bError = true;
                                    break;
                                }
                            }

                            if (arrContent[4].Trim().Length == 0)
                            {
                                strErrorDesc = "Group description cannot be null.";
                            }
                        }
                        else
                        {
                            strErrorDesc = "Data in not in Correct format,All rows must have five column";
                            bError = true;
                            break;
                        }

                    }
                    else
                    {
                        strContent = sr.ReadLine();
                    }
                    nCounter++;
                }





                ///If  error in file showing error otherwise updating in file
                if (bError == true)
                {

                    sr.Close();
                    return new Response { status = "false", Message = "Error at Line No-" + nCounter.ToString() + ":" + strErrorDesc };
                }
                else
                {
                    if (nCounter <= 2)
                    {
                        return new Response { status = "false", Message = "No record found" };

                    }
                    else
                    {
                        nCounter = 0;
                        using (rmsEntities rms = new rmsEntities())
                        {
                            rms.Configuration.ValidateOnSaveEnabled = false;
                            ngt_region_code newRegioncode = new ngt_region_code();
                            ngt_region_code_group newGroupcode = new ngt_region_code_group();
                            //getting all region code and group code form database

                            //((IObjectContextAdapter)rms).ObjectContext.CommandTimeout = 180;
                            ((IObjectContextAdapter)rms).ObjectContext.CommandTimeout = 86400;

                            rms.Configuration.LazyLoadingEnabled = true;
                            //  List<ngt_region_code> existingRegionCode = rms.ngt_region_code.Where(d=>d.ngt_PartitionId==rates.PartitionID).ToList();

                            List<ngt_region_code_group> existingGroupCode = rms.ngt_region_code_group.Where(d => d.ngt_PartitionId == rates.PartitionID).ToList();

                            //Hashtable htExistingRegionCode = new Hashtable();
                            Hashtable htExistingGroupCode = new Hashtable();


                            //adding all existing region code in hashtable
                            //foreach (ngt_region_code regioncode in existingRegionCode)
                            //{
                            //    if (!htExistingRegionCode.Contains(regioncode.Country_code + regioncode.Area_code))
                            //    {
                            //        htExistingRegionCode.Add(regioncode.Country_code + regioncode.Area_code, regioncode);
                            //    }
                            //}

                            ////adding all existing group code in hashtable
                            foreach (ngt_region_code_group groupcode in existingGroupCode)
                            {
                                if (!htExistingGroupCode.Contains(groupcode.Group_code))
                                {
                                    htExistingGroupCode.Add(groupcode.Group_code, groupcode);
                                }
                            }
                            //Uploading in database
                            sr = new StreamReader(path);
                            sr.ReadLine();
                            string country = "";
                            string areacode = "";
                            string desc = "";
                            try
                            {
                                var par = rms.ngt_partition.SingleOrDefault(d => d.Id == rates.PartitionID);

                                //var ngtRegionCodes = rms.ngt_region_code.Where(n => n.ngt_PartitionId == par.Id).ToList();

                                ///var ngtRegionCodesGroup = rms.ngt_region_code_group.Where(ng => ng.ngt_PartitionId == par.Id).ToList();

                                while (sr.EndOfStream == false)
                                {
                                    nCounter++;
                                    strContent = sr.ReadLine();
                                    arrContent = strContent.Split(',');
                                    country = arrContent[0];
                                    areacode = arrContent[1];
                                    desc = arrContent[3];
                                    //Matching existing country code+area code
                                    //if (ngtRegionCodes.Where(d => d.Country_code == country && d.Area_code == areacode).ToList().Count == 0)
                                    if (rms.ngt_region_code.Where(d => d.ngt_PartitionId == rates.PartitionID && d.Country_code == country && d.Area_code == areacode).ToList().Count == 0)
                                    {
                                        //Matching existing group code
                                        //if (rms.ngt_region_code_group.Where(d => d.ngt_PartitionId == rates.PartitionID && d.Description == desc).ToList().Count == 0)
                                        if (existingGroupCode.Where(d => d.Description == desc).ToList().Count == 0)
                                        {
                                            newGroupcode = new ngt_region_code_group();
                                            newGroupcode.Group_code = arrContent[3].Trim();
                                            newGroupcode.Description = arrContent[4].Trim();
                                            newGroupcode.ngt_partition = par;
                                            rms.ngt_region_code_group.Add(newGroupcode);
                                            if (!htExistingGroupCode.ContainsKey(newGroupcode.Group_code))
                                                htExistingGroupCode.Add(newGroupcode.Group_code, newGroupcode);
                                        }
                                        newGroupcode = (ngt_region_code_group)htExistingGroupCode[arrContent[3].Trim()];
                                        newRegioncode = new ngt_region_code();
                                        newRegioncode.Country_code = arrContent[0].Trim();
                                        newRegioncode.Area_code = arrContent[1].Trim();
                                        newRegioncode.description = arrContent[2].Trim();
                                        newRegioncode.ngt_region_code_group = newGroupcode;
                                        newRegioncode.ngt_partition = par;
                                        rms.ngt_region_code.Add(newRegioncode);

                                    }
                                }
                                rms.SaveChanges();

                                sr.Close();

                                return new Response { status = "true", Message = "Region Codes Uploaded Succesfully" };

                            }
                            catch (Exception ex)
                            {


                                sr.Close();
                                return new Response { status = "false", Message = ex.Message };


                            }

                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return new Response { Message = ex.Message, status = "false" };
            }
        }

        public Response AddRegionCodes1(UploadRegionCode rates)
        {
            return null;
        }

        public RatesheetResponse UploadRatesheet(string file, int PartitionID, int RatesheetID)
        {
            try
            {


                using (rmsEntities rms = new rmsEntities())
                {

                    int nCounter = 0;
                    Boolean bError = false;
                    string strErrDesc = string.Empty;
                    string strContent = string.Empty;
                    string[] arrContent = null;
                    ArrayList alRegion = new ArrayList();
                    ArrayList alDesc = new ArrayList();

                    //((IObjectContextAdapter)rms).ObjectContext.CommandTimeout = 180;
                    ((IObjectContextAdapter)rms).ObjectContext.CommandTimeout = 86400;

                    //ngt_Partition nPartition = ngt_PartitionFactory.LoadNgt_PartitionByQuery("ID=" + Session["PartitionId"].ToString(), null);

                    rms.Configuration.LazyLoadingEnabled = true;
                    //List<ngt_region_code> regionCodes = rms.ngt_region_code.Where(d => d.ngt_PartitionId == PartitionID).ToList();


                    #region CheckFileValidation


                    StreamReader sr = new StreamReader(file);
                    int nColumn = 0;

                    //Reading file line by line validation
                    while (sr.EndOfStream == false)
                    {
                        nCounter++;
                        strContent = sr.ReadLine().Replace('#', ' ').Replace(';', ' ').Replace('?', ' ').Replace('\\', ' ').Replace('/', ' ').Replace('^', ' ').Replace(')', ' ').Replace('(', ' ').Replace('_', ' ').Replace('&', ' ').Replace('"', ' ');
                        arrContent = strContent.Split(new char[] { ',' });

                        //Checking all rows in file have same number of column
                        if (arrContent.Length < nColumn)
                        {

                            sr.Close();
                            return new RatesheetResponse { status = "false", Message = "Error at Line No. " + nCounter };
                        }
                        else
                        {
                            //Checking ratesheet is valid data or not
                            if (nCounter > 1)
                            {
                                try
                                {

                                    DateTime effectiveDate = Convert.ToDateTime(arrContent[4]);
                                    double rate = Convert.ToDouble(arrContent[2]);
                                    string regionCodeName = arrContent[1];
                                    string regionCode = arrContent[0];
                                    if (arrContent[3] == "Allowed" || arrContent[3] == "Blocked" || arrContent[3] == "Delete")
                                    {

                                    }
                                    else
                                    {
                                        sr.Close();
                                        return new RatesheetResponse { status = "false", Message = "Error at line-" + nCounter + ": " + "Invalid Status." };
                                    }

                                }
                                catch (Exception ex)
                                {
                                    sr.Close();
                                    return new RatesheetResponse { Message = "Error at line-" + nCounter + ": " + "Data is not in correct format.", status = "false" };
                                }
                                //Checking region code available in our in database or not,If not add in arrlist to show
                                string RegionCode = arrContent[0];
                                if (rms.ngt_region_code.Where(s => s.Country_code == RegionCode && s.ngt_PartitionId == PartitionID).ToList().Count == 0)
                                {

                                    bError = true;
                                    alRegion.Add(arrContent[0]);
                                    alDesc.Add(arrContent[1]);

                                }
                            }


                        }
                    }
                    #endregion


                    nCounter = 0;
                    #region Uploading file
                    if (bError == false)
                    {

                        try
                        {
                            var rates = rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).ToList();

                            Hashtable htRates = new Hashtable();
                            if (rates.Count > 1)
                            {
                                foreach (var rate in rates)
                                {
                                    if (rate.Active != "N")
                                    {
                                        htRates.Add(rate.ngt_region_code.Region_hash_code + rate.Effective_on, rate);
                                    }
                                }
                            }


                            //Checking first row of ratesheet is data

                            nCounter++;
                            int batchID = 1;
                            if (rms.ngt_rates.ToList().Count > 0)
                            {
                                batchID = rms.ngt_rates.OrderByDescending(g => g.BatchID).First().BatchID + 1;
                            }

                            sr = new StreamReader(file);
                            DateTime dt = new DateTime();

                            nCounter = 0;
                            while (sr.EndOfStream == false)
                            {
                                nCounter++;
                                strContent = sr.ReadLine();
                                arrContent = strContent.Split(new char[] { ',' });
                                string Key = "";
                                string RegionCode = arrContent[0];
                                if (nCounter > 1)
                                {
                                    //checking already contain rates for CC+AC



                                    dt = Convert.ToDateTime(arrContent[4]).ToUniversalTime();
                                    Key = String.Format(ConfigurationManager.AppSettings["ServerTimeFormat"], dt);
                                    //Key = string.Format("{0:dd-MM-yyyy HH:mm:ss}", Convert.ToDateTime(arrContent[4]).ToUniversalTime());

                                    if (htRates.Contains(RegionCode + Key))
                                    {
                                        //IList updatableRate = (IList)htRates[RegionCode+Key];
                                        ngt_rates updatableRate = (ngt_rates)htRates[RegionCode + Key];
                                        //ngt_com_rate updatableRate = (ngt_com_rate)htRates[arrContent[Convert.ToInt32(drpdRegionCode.SelectedValue.Trim())] + Convert.ToDateTime(arrContent[Convert.ToInt32(drpdEffectiveOn.SelectedValue.Trim())]).ToString()];
                                        //Check effective date is same
                                        if (updatableRate.Effective_on.Equals(Convert.ToDateTime(arrContent[4]).ToUniversalTime()))
                                        {
                                            //If rate is not same for same effective date
                                            if (!updatableRate.Call_rate.Equals(Convert.ToDecimal(arrContent[2])))
                                            {
                                                var upd = rms.ngt_rates.SingleOrDefault(f => f.Id == Convert.ToInt32(updatableRate.Id) && f.ngt_PartitionId == PartitionID);
                                                upd.Active = "N";
                                                rms.SaveChanges();

                                                //Remove from hashtable
                                                htRates.Remove(arrContent[0] + arrContent[4]);

                                                string tempChck = "";
                                                switch (arrContent[3].ToLower())
                                                {
                                                    case "allowed":
                                                        tempChck = "A";
                                                        break;
                                                    case "blocked":
                                                        tempChck = "B";
                                                        break;
                                                    case "delete":
                                                        tempChck = "D";
                                                        break;
                                                }

                                                ngt_rates addrates = new ngt_rates();
                                                addrates.Effective_on = Convert.ToDateTime(arrContent[4]).ToUniversalTime();
                                                addrates.Call_rate = Convert.ToDecimal(arrContent[2]);
                                                //Newlines for pulse Start

                                                addrates.Start_Pulse = Convert.ToInt32(arrContent[5]);
                                                addrates.Next_Pulse = Convert.ToInt32(arrContent[6]);

                                                //Newlines for pulse End
                                                addrates.Active = tempChck;
                                                addrates.RatesheetID = RatesheetID;
                                                addrates.ngt_PartitionId = PartitionID;
                                                addrates.ngt_region_codeId = rms.ngt_region_code.Where(s => s.Country_code == RegionCode && s.ngt_PartitionId == PartitionID).First().Id;
                                                //addrates.ngt_region_codeId = regionCode5.Where(s => s.Code == RegionCode).First().ID;
                                                addrates.BatchID = batchID;
                                                rms.ngt_rates.Add(addrates);

                                                htRates.Add(arrContent[0] + arrContent[4], addrates);
                                            }

                                        }
                                        else
                                        {
                                            string tempChck = "";
                                            switch (arrContent[3].ToLower())
                                            {
                                                case "allowed":
                                                    tempChck = "A";
                                                    break;
                                                case "blocked":
                                                    tempChck = "B";
                                                    break;
                                                case "delete":
                                                    tempChck = "D";
                                                    break;
                                            }

                                            ngt_rates addrates = new ngt_rates();
                                            addrates.Effective_on = Convert.ToDateTime(arrContent[4]).ToUniversalTime();
                                            addrates.Call_rate = Convert.ToDecimal(arrContent[2]);

                                            //Newlines for pulse Start

                                            addrates.Start_Pulse = Convert.ToInt32(arrContent[5]);
                                            addrates.Next_Pulse = Convert.ToInt32(arrContent[6]);

                                            //Newlines for pulse End


                                            addrates.Active = tempChck;
                                            addrates.RatesheetID = RatesheetID;
                                            addrates.ngt_PartitionId = PartitionID;
                                            addrates.ngt_region_codeId = rms.ngt_region_code.Where(s => s.Country_code == RegionCode && s.ngt_PartitionId == PartitionID).First().Id;
                                            //addrates.ngt_region_codeId = regionCode5.Where(s => s.Code == RegionCode).First().ID;
                                            addrates.BatchID = batchID;
                                            rms.ngt_rates.Add(addrates);

                                            htRates.Add(arrContent[0] + arrContent[4], addrates);

                                        }


                                    }
                                    else
                                    {
                                        string tempChck = "";
                                        switch (arrContent[3].ToLower())
                                        {
                                            case "allowed":
                                                tempChck = "A";
                                                break;
                                            case "blocked":
                                                tempChck = "B";
                                                break;
                                            case "delete":
                                                tempChck = "D";
                                                break;
                                        }

                                        ngt_rates addrates = new ngt_rates();
                                        addrates.Effective_on = Convert.ToDateTime(arrContent[4]).ToUniversalTime();
                                        addrates.Call_rate = Convert.ToDecimal(arrContent[2]);

                                        //Newlines for pulse Start

                                        addrates.Start_Pulse = Convert.ToInt32(arrContent[5]);
                                        addrates.Next_Pulse = Convert.ToInt32(arrContent[6]);

                                        //Newlines for pulse End

                                        addrates.Active = tempChck;
                                        addrates.RatesheetID = RatesheetID;
                                        addrates.ngt_PartitionId = PartitionID;
                                        addrates.ngt_region_codeId = rms.ngt_region_code.Where(s => s.Country_code == RegionCode && s.ngt_PartitionId == PartitionID).First().Id;

                                        //addrates.ngt_region_codeId = regionCode5.Where(s => s.Code == RegionCode).First().ID;

                                        addrates.BatchID = batchID;
                                        rms.ngt_rates.Add(addrates);

                                        htRates.Add(arrContent[0] + arrContent[4], addrates);
                                    }

                                }

                            }
                            rms.SaveChanges();

                            return new RatesheetResponse { Message = "Rates Added Successfully", status = "true" };
                        }
                        catch (Exception ex)
                        {

                            bError = true;
                            return new RatesheetResponse { Message = ex.Message, status = "false" };
                        }
                        finally
                        {
                            sr.Close();
                        }
                        #endregion


                    }
                    else
                    {
                        #region WriteNotAvailableRegionCode
                        string fileNameDownload = "Temp/RegionCodeHaveToAdd" + string.Format("{0:_yyyy_MM_dd_HH_mm_ss}", DateTime.Now) + ".csv";
                        StreamWriter sw = new StreamWriter(HostingEnvironment.MapPath("~/" + fileNameDownload));
                        try
                        {
                            sw.WriteLine("Country Code,Area Code,Country Description,Group Code,Group Description");
                            for (int count = 0; count < alRegion.Count; count++)
                            {
                                sw.WriteLine(alRegion[count] + ",," + alDesc[count] + ",,");
                            }



                            return new RatesheetResponse { Message = "Some region codes is not available in our database.Please upload these region code.", status = "false", FileName = fileNameDownload };
                        }
                        catch (Exception ex)
                        {
                            return new RatesheetResponse { Message = ex.Message, status = "false" }; //"Some region codes is not available in our database.Please upload these region code.", status = "false" };
                        }
                        finally
                        {
                            sw.Close();
                        }

                        #endregion
                    }

                }




            }
            catch (Exception ex)
            {
                return new RatesheetResponse { Message = ex.Message, status = "false" };
            }
            //return null;
        }

        public Response EditRatesheet(int RatesheetID, string RatesheetName, string Tag, string Owner, int CurrencyID, int Status, string UpdatedBy, int PartitionID)
        {
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {
                    ngt_ratesheet rate = rms.ngt_ratesheet.SingleOrDefault(s => s.RatesheetID == RatesheetID);
                    if (rate != null)
                    {
                        if (rate.RatesheetName == RatesheetName.Trim())
                        {
                            //ngt_ratesheet rateName = rms.ngt_ratesheet.SingleOrDefault(s => s.RatesheetName == RatesheetName.Trim());
                            //if (rateName != null)
                            //{
                            rate.CurrencyID = CurrencyID;
                            rate.LastUpdatedOn = DateTime.Now;
                            //rate.RatesheetName = RatesheetName;
                            rate.Tag = Tag.Trim();
                            rate.Status = Status;
                            rate.Owner = Owner;
                            rate.Tag = Tag;
                            rate.UpdatedBy = UpdatedBy;
                            rate.PartitionID = PartitionID;
                            rms.SaveChanges();

                            return new Response() { status = "true", Message = "Ratesheet Updated Successfully" };
                            //}
                            //else
                            //    return new Response() { status = "false", Message = "No Ratesheet Record Found.." };
                        }
                        else
                        {
                            ngt_ratesheet rateName = rms.ngt_ratesheet.SingleOrDefault(s => s.RatesheetName == RatesheetName.Trim());
                            if (rateName != null)
                            {
                                return new Response() { status = "false", Message = "Ratesheet Name       Already exist. Please give other RatesheetName.." };
                            }
                            rate.CurrencyID = CurrencyID;
                            rate.LastUpdatedOn = DateTime.Now;
                            rate.RatesheetName = RatesheetName;
                            rate.Tag = Tag.Trim();
                            rate.Status = Status;
                            rate.Owner = Owner;
                            rate.Tag = Tag;
                            rate.UpdatedBy = UpdatedBy;
                            rate.PartitionID = PartitionID;
                            rms.SaveChanges();

                            return new Response() { status = "true", Message = "Ratesheet Updated Successfully" };
                        }
                    }
                    else
                    {
                        return new Response() { status = "false", Message = "Ratesheet Not Found" };

                    }
                }
            }
            catch (Exception ex)
            {
                return new Response() { status = "false", Message = ex.Message };
            }
            finally
            {

            }
        }

        public Response DeleteRatesheet(int RatesheetID)
        {
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {
                    ngt_ratesheet rate = rms.ngt_ratesheet.SingleOrDefault(s => s.RatesheetID == RatesheetID);
                    if (rate != null)
                    {


                        rms.ngt_ratesheet.Remove(rate);
                        rms.SaveChanges();

                        return new Response() { status = "true", Message = "Ratesheet Deleted Successfully" };

                    }
                    else
                    {
                        return new Response() { status = "false", Message = "Ratesheet Not Found" };

                    }
                }
            }
            catch (Exception ex)
            {
                return new Response() { status = "false", Message = ex.Message };
            }
            finally
            {

            }
        }

        //updated by shripal Pankj 15 April 2016 Show rates is called in all case below function
        public Response AddRatesheetServerMapping(int RatesheetID, int ServerID, string PulseRule, int GracePeriod, string ServerRatesheetName, string Description, bool Active, int CompanyType, int UpdatedBy, string ServerCsvName, string createdon)
        {
            try
            {
                MongoClient Client = new MongoClient(ConfigurationManager.AppSettings["MongoDbString"].ToString());
                var MongoDB = Client.GetServer().GetDatabase(ConfigurationManager.AppSettings["MongoDBDatabase"].ToString());

                bool status = false;
                SuccessResponse res1 = new SuccessResponse();
                Stream stream = null;
                DataContractJsonSerializer ser;
                ShowRatesheetRecords ContactResponse = new ShowRatesheetRecords();

                using (rmsEntities rms = new rmsEntities())
                {
                    var serverDetails = rms.server_details.SingleOrDefault(d => d.ServerID == ServerID);
                    string Date = string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now);
                    string[] details = serverDetails.SummaryURL.Split(',');
                    string Port = details[0];
                    string ResellerId = details[1];
                    int ServerRatesheetID = 0;
                    string ID = "0";


                    switch (serverDetails.ServerType)
                    {
                        case 1:
                            //Old Nexge 
                            //  stream = ShowRates(Convert.ToInt32(RatesheetID), "effectiveon", Date, "");
                            //...............................................................

                            //By Shinil

                            // stream = ShowsRates(Convert.ToInt32(RatesheetID), "effectiveon", Date, "", UpdatedBy);
                            ShowRecords NewResponse = ShowsRates(Convert.ToInt32(RatesheetID), "effectiveon", Date, "", UpdatedBy);
                            //ser = new DataContractJsonSerializer(typeof(ShowRatesheetRecords));
                            //ContactResponse = ser.ReadObject(stream) as ShowRatesheetRecords;

                            res1 = OldNexege.OldNexgeUpload(serverDetails.ServerIp, serverDetails.Username, serverDetails.Password, "Add", Description, ServerRatesheetName, PulseRule, Active, GracePeriod, NewResponse.records);
                            ID = ServerRatesheetName;

                            break;
                        case 2:
                            //Jerasoft
                            //By shinil
                            ShowRecords NewResponse1 = ShowsRates(Convert.ToInt32(RatesheetID), "effectiveon", "", "", UpdatedBy);
                            //stream = ShowsRates(Convert.ToInt32(RatesheetID), "effectiveon", "", "", UpdatedBy);

                            // ser = new DataContractJsonSerializer(typeof(ShowRatesheetRecords));
                            //  ContactResponse = ser.ReadObject(stream) as ShowRatesheetRecords;

                            ServerRatesheetID = JeraApi1.CreateRatesheetJera(ServerRatesheetName, serverDetails.ServerIp, serverDetails.Username, serverDetails.Password, Port, ResellerId, Description);
                            if (ServerRatesheetID == 0)
                            {
                                ServerRatesheetID = JeraApi1.GetJeraRatesheetId(ServerRatesheetName, serverDetails.Username, serverDetails.Password, serverDetails.ServerIp, serverDetails.SummaryURL.Split(',')[0].ToString());
                            }
                            string datenow = string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now);
                            List<ngt_rateslistjera> ConvertedRatesheet = new List<ngt_rateslistjera>();
                            List<ngt_rateslistjera> ConvertedRatesheetDelete = new List<ngt_rateslistjera>();
                            foreach (var rate in NewResponse1.records)
                            {

                                string effectiveon = Convert.ToDateTime(rate.Effective_on).ToString("yyyy-MM-dd 00:00:00");
                                if (Convert.ToDateTime(rate.Effective_on).ToString("yyyy-MM-dd 00:00:00") != DateTime.Now.ToString("yyyy-MM-dd 00:00:00"))
                                    effectiveon = Convert.ToDateTime(rate.Effective_on).ToString("yyyy-MM-dd 00:00:00");
                                else
                                    effectiveon = createdon;

                                ConvertedRatesheet.Add(new ngt_rateslistjera()
                                {
                                    Id = rate.Id,
                                    // Effective_on = Convert.ToDateTime(rate.Effective_on),
                                    Effective_on = Convert.ToDateTime(effectiveon),
                                    Call_rate = rate.Call_rate,
                                    Grace_period = rate.Grace_period,
                                    Minimal_time = rate.Minimal_time,
                                    Resolution = rate.Resolution,
                                    ngt_region_codeId = rate.ngt_region_codeId,
                                    ngt_regionName = rate.ngt_regionName,
                                    Description = rate.Description,
                                    Connection_charge = rate.Connection_charge,
                                    Active = rate.Active,
                                    Priority = rate.Priority,
                                    Trunck = rate.Trunck,
                                    BatchID = rate.BatchID,
                                    CreatedOn = Convert.ToDateTime(rate.CreatedOn),
                                    Start_Pulse = Convert.ToInt32(rate.StartPulse),
                                    Next_Pulse = Convert.ToInt32(rate.NextPulse),
                                    EndDate = string.IsNullOrEmpty(rate.EndDate) ? Convert.ToDateTime("2500-01-01 00:00:00") : Convert.ToDateTime(rate.EndDate)

                                });
                            }
                            //Record Delete Added by pasupathi 27/06/2016
                            if (NewResponse1.recordsdelete.Count > 0)
                            {

                                foreach (var rate in NewResponse1.recordsdelete)
                                {
                                    string effectiveon = Convert.ToDateTime(rate.Effective_on).ToString("yyyy-MM-dd 00:00:00");
                                    if (Convert.ToDateTime(rate.Effective_on).ToString("yyyy-MM-dd 00:00:00") != DateTime.Now.ToString("yyyy-MM-dd 00:00:00"))
                                        effectiveon = Convert.ToDateTime(rate.Effective_on).ToString("yyyy-MM-dd 00:00:00");
                                    else
                                        effectiveon = createdon;

                                    ConvertedRatesheetDelete.Add(new ngt_rateslistjera()
                                    {
                                        Id = rate.Id,
                                        // Effective_on = Convert.ToDateTime(rate.Effective_on),
                                        Effective_on = Convert.ToDateTime(effectiveon),
                                        Call_rate = rate.Call_rate,
                                        Grace_period = rate.Grace_period,
                                        Minimal_time = rate.Minimal_time,
                                        Resolution = rate.Resolution,
                                        ngt_region_codeId = rate.ngt_region_codeId,
                                        ngt_regionName = rate.ngt_regionName,
                                        Description = rate.Description,
                                        Connection_charge = rate.Connection_charge,
                                        Active = rate.Active,
                                        Priority = rate.Priority,
                                        Trunck = rate.Trunck,
                                        BatchID = rate.BatchID,
                                        CreatedOn = Convert.ToDateTime(rate.CreatedOn),
                                        Start_Pulse = Convert.ToInt32(rate.StartPulse),
                                        Next_Pulse = Convert.ToInt32(rate.NextPulse),
                                        EndDate = Convert.ToDateTime(rate.EndDate)

                                    });
                                }

                                string NewFleNameDelete = ConversiontoNewJera(ConvertedRatesheetDelete);

                                string NewFleName22Delete = "delete" + ServerCsvName + ".csv";
                                // FileStream fs = new FileStream(ConfigurationManager.AppSettings["ReplaceCSV_URL"].ToString() + NewFleName2, FileMode.Open, FileAccess.Read);
                                FileStream fsdelete = new FileStream(NewFleNameDelete, FileMode.Open, FileAccess.Read);
                                byte[] datadelete = new byte[fsdelete.Length];
                                fsdelete.Read(datadelete, 0, datadelete.Length);
                                fsdelete.Close();


                                status = replaceRatesheetInJera(Convert.ToString(ServerRatesheetID), datadelete, NewFleName22Delete, Convert.ToString(datenow), serverDetails.ServerIp, serverDetails.Username, serverDetails.Password);


                            }
                            if (ConvertedRatesheet.Where(t => t.Active == "A").Count() > 0)
                            {
                                string NewFleName = ConversiontoNewJera(ConvertedRatesheet);


                                string NewFleName2 = ServerCsvName + ".csv";
                                // FileStream fs = new FileStream(ConfigurationManager.AppSettings["ReplaceCSV_URL"].ToString() + NewFleName2, FileMode.Open, FileAccess.Read);
                                FileStream fs = new FileStream(NewFleName, FileMode.Open, FileAccess.Read);
                                byte[] data = new byte[fs.Length];
                                fs.Read(data, 0, data.Length);
                                fs.Close();


                                status = replaceRatesheetInJera(Convert.ToString(ServerRatesheetID), data, NewFleName2, Convert.ToString(datenow), serverDetails.ServerIp, serverDetails.Username, serverDetails.Password);
                                //  status = updateRatesheetInJera(Convert.ToString(ServerRatesheetID), data, NewFleName2, Convert.ToString(datenow), serverDetails.ServerIp, serverDetails.Username, serverDetails.Password);
                            }
                            else
                            {
                                status = true;
                                UpdateError("Mapping Record with out active Rate", "", "RatesheetLogs.txt", "", false);
                            }



                            break;

                        case 3:
                            //New Nexege

                            // stream = ShowRates(Convert.ToInt32(RatesheetID), "effectiveon", "", "");
                            ShowRecords NewResponse2 = ShowsRatesNewNexge(Convert.ToInt32(RatesheetID), "effectiveon", "", "", UpdatedBy);
                            //stream = ShowsRates(Convert.ToInt32(RatesheetID), "effectiveon", "", "", UpdatedBy);

                            // ser = new DataContractJsonSerializer(typeof(ShowRatesheetRecords));
                            // ContactResponse = ser.ReadObject(stream) as ShowRatesheetRecords;


                            //// pasupathi commented old code

                            //res1 = NewNexege.NewNexgeUpload(serverDetails.ServerIp, Description, serverDetails.Username, serverDetails.Password, "Add", ServerRatesheetName, "", PulseRule, Active, GracePeriod, CompanyType == 1 ? true : false, NewResponse2.records);



                            res1 = NewNexege.NewNexgeMapping(serverDetails.ServerIp, Description, serverDetails.Username, serverDetails.Password, "Add", ServerRatesheetName, "", PulseRule, Active, GracePeriod, CompanyType == 1 ? true : false, NewResponse2.records, RatesheetID);
                            if (res1.Value != null)
                            {

                                ID = res1.Value;
                            }

                            break;
                        case 4:
                            //VOS
                            // res = NewNexgeUpload(serverDetails.Ipaddress, serverDetails.UserName, serverDetails.Password, actiontype, bpName, pulse, status, gracePeriod, useForTr, useForOr, planTypeCode, RatesheetName);


                            break;
                        case 5:
                            //New Nexege Test

                            // stream = ShowRates(Convert.ToInt32(RatesheetID), "effectiveon", "", "");
                            ShowRecords NewResponse3 = ShowsRates(Convert.ToInt32(RatesheetID), "effectiveon", "", "", UpdatedBy);
                            // stream = ShowsRates(Convert.ToInt32(RatesheetID), "effectiveon", "", "", UpdatedBy);

                            //ser = new DataContractJsonSerializer(typeof(ShowRatesheetRecords));
                            //ContactResponse = ser.ReadObject(stream) as ShowRatesheetRecords;


                            //// Old code PAsupathi Commented

                            //res1 = NewNexege.NewNexgeUpload(serverDetails.ServerIp, Description, serverDetails.Username, serverDetails.Password, "Add", ServerRatesheetName, "", PulseRule, Active, GracePeriod, CompanyType == 1 ? true : false, NewResponse3.records);

                            // New code Pasupathi

                            res1 = NewNexege.NewNexgeMapping(serverDetails.ServerIp, Description, serverDetails.Username, serverDetails.Password, "Add", ServerRatesheetName, "", PulseRule, Active, GracePeriod, CompanyType == 1 ? true : false, NewResponse3.records, RatesheetID);

                            if (res1.Value != null)
                            {
                                ID = res1.Value;

                            }

                            break;
                        case 6:
                            //Old Nexege Test

                            // stream = ShowRates(Convert.ToInt32(RatesheetID), "effectiveon", Date, "");
                            ShowRecords NewResponse4 = ShowsRates(Convert.ToInt32(RatesheetID), "effectiveon", Date, "", UpdatedBy);
                            // stream = ShowsRates(Convert.ToInt32(RatesheetID), "effectiveon", Date, "", UpdatedBy);

                            //ser = new DataContractJsonSerializer(typeof(ShowRatesheetRecords));
                            //ContactResponse = ser.ReadObject(stream) as ShowRatesheetRecords;
                            res1 = OldNexege.OldNexgeUpload(serverDetails.ServerIp, serverDetails.Username, serverDetails.Password, "Add", Description, ServerRatesheetName, PulseRule, Active, GracePeriod, NewResponse4.records);
                            ID = ServerRatesheetName;

                            break;
                        case 7:
                            //Jerasoft Test VCS DEMO
                            ShowRecords NewResponse5 = ShowsRates(Convert.ToInt32(RatesheetID), "effectiveon", "", "", UpdatedBy);
                            // stream = ShowsRates(Convert.ToInt32(RatesheetID), "effectiveon", "", "", UpdatedBy);

                            //ser = new DataContractJsonSerializer(typeof(ShowRatesheetRecords));
                            //ContactResponse = ser.ReadObject(stream) as ShowRatesheetRecords;

                            ServerRatesheetID = JeraApi1.CreateRatesheetJera(ServerRatesheetName, serverDetails.ServerIp, serverDetails.Username, serverDetails.Password, Port, ResellerId, Description);
                            if (ServerRatesheetID == 0)
                            {
                                ServerRatesheetID = JeraApi1.GetJeraRatesheetId(ServerRatesheetName, serverDetails.Username, serverDetails.Password, serverDetails.ServerIp, serverDetails.SummaryURL.Split(',')[0].ToString());
                            }
                            string datenow1 = string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now);
                            List<ngt_rateslistjera> ConvertedRatesheet1 = new List<ngt_rateslistjera>();
                            List<ngt_rateslistjera> ConvertedRatesheetDeletevcs = new List<ngt_rateslistjera>();


                            //Record Delete Added by pasupathi 27/06/2016
                            if (NewResponse5.recordsdelete.Count > 0)
                            {

                                foreach (var rate in NewResponse5.recordsdelete)
                                {
                                    string effectiveon = Convert.ToDateTime(rate.Effective_on).ToString("yyyy-MM-dd 00:00:00");
                                    if (Convert.ToDateTime(rate.Effective_on).ToString("yyyy-MM-dd 00:00:00") != DateTime.Now.ToString("yyyy-MM-dd 00:00:00"))
                                        effectiveon = Convert.ToDateTime(rate.Effective_on).ToString("yyyy-MM-dd 00:00:00");
                                    else
                                        effectiveon = createdon;

                                    ConvertedRatesheetDeletevcs.Add(new ngt_rateslistjera()
                                    {
                                        Id = rate.Id,
                                        // Effective_on = Convert.ToDateTime(rate.Effective_on),
                                        Effective_on = Convert.ToDateTime(effectiveon),
                                        Call_rate = rate.Call_rate,
                                        Grace_period = rate.Grace_period,
                                        Minimal_time = rate.Minimal_time,
                                        Resolution = rate.Resolution,
                                        ngt_region_codeId = rate.ngt_region_codeId,
                                        ngt_regionName = rate.ngt_regionName,
                                        Description = rate.Description,
                                        Connection_charge = rate.Connection_charge,
                                        Active = rate.Active,
                                        Priority = rate.Priority,
                                        Trunck = rate.Trunck,
                                        BatchID = rate.BatchID,
                                        CreatedOn = Convert.ToDateTime(rate.CreatedOn),
                                        Start_Pulse = Convert.ToInt32(rate.StartPulse),
                                        Next_Pulse = Convert.ToInt32(rate.NextPulse),
                                        EndDate = Convert.ToDateTime(rate.EndDate)

                                    });
                                }

                                string NewFleNameDelete = ConversiontoNewJera(ConvertedRatesheetDeletevcs);

                                string NewFleName22Delete = "delete" + ServerCsvName + ".csv";
                                // FileStream fs = new FileStream(ConfigurationManager.AppSettings["ReplaceCSV_URL"].ToString() + NewFleName2, FileMode.Open, FileAccess.Read);
                                FileStream fsdelete = new FileStream(NewFleNameDelete, FileMode.Open, FileAccess.Read);
                                byte[] datadelete = new byte[fsdelete.Length];
                                fsdelete.Read(datadelete, 0, datadelete.Length);
                                fsdelete.Close();


                                status = replaceRatesheetInJera(Convert.ToString(ServerRatesheetID), datadelete, NewFleName22Delete, Convert.ToString(datenow1), serverDetails.ServerIp, serverDetails.Username, serverDetails.Password);


                            }

                            // Existing without Delete
                            if (NewResponse5.records.Count > 0)
                            {
                                foreach (var rate in NewResponse5.records)
                                {
                                    string effectiveon = Convert.ToDateTime(rate.Effective_on).ToString("yyyy-MM-dd 00:00:00");
                                    if (Convert.ToDateTime(rate.Effective_on).ToString("yyyy-MM-dd 00:00:00") != DateTime.Now.ToString("yyyy-MM-dd 00:00:00"))
                                        effectiveon = Convert.ToDateTime(rate.Effective_on).ToString("yyyy-MM-dd 00:00:00");
                                    else
                                        effectiveon = createdon;
                                    ConvertedRatesheet1.Add(new ngt_rateslistjera()
                                    {
                                        Id = rate.Id,
                                        //   Effective_on = Convert.ToDateTime(rate.Effective_on),
                                        Effective_on = Convert.ToDateTime(effectiveon),
                                        Call_rate = rate.Call_rate,
                                        Grace_period = rate.Grace_period,
                                        Minimal_time = rate.Minimal_time,
                                        Resolution = rate.Resolution,
                                        ngt_region_codeId = rate.ngt_region_codeId,
                                        ngt_regionName = rate.ngt_regionName,
                                        Description = rate.Description,
                                        Connection_charge = rate.Connection_charge,
                                        Active = rate.Active,
                                        Priority = rate.Priority,
                                        Trunck = rate.Trunck,
                                        BatchID = rate.BatchID,
                                        CreatedOn = Convert.ToDateTime(rate.CreatedOn),
                                        Start_Pulse = Convert.ToInt32(rate.StartPulse),
                                        Next_Pulse = Convert.ToInt32(rate.NextPulse),
                                        EndDate = string.IsNullOrEmpty(rate.EndDate) ? Convert.ToDateTime("2500-01-01 00:00:00") : Convert.ToDateTime(rate.EndDate)

                                    });
                                }
                            }
                            if (ConvertedRatesheet1.Where(t => t.Active == "A").Count() > 0)
                            {
                                string NewFleName1 = ConversiontoNewJera(ConvertedRatesheet1);


                                string NewFleName22 = ServerCsvName + ".csv";
                                // FileStream fs = new FileStream(ConfigurationManager.AppSettings["ReplaceCSV_URL"].ToString() + NewFleName2, FileMode.Open, FileAccess.Read);
                                FileStream fs1 = new FileStream(NewFleName1, FileMode.Open, FileAccess.Read);
                                byte[] data1 = new byte[fs1.Length];
                                fs1.Read(data1, 0, data1.Length);
                                fs1.Close();


                                status = replaceRatesheetInJera(Convert.ToString(ServerRatesheetID), data1, NewFleName22, Convert.ToString(datenow1), serverDetails.ServerIp, serverDetails.Username, serverDetails.Password);
                                //  status = updateRatesheetInJera(Convert.ToString(ServerRatesheetID), data1, NewFleName22, Convert.ToString(datenow1), serverDetails.ServerIp, serverDetails.Username, serverDetails.Password);

                            }

                            else
                            {
                                status = true;
                                UpdateError("Mapping Record with out active Rate", "", "RatesheetLogs.txt", "", false);
                            }

                            break;


                    }
                    RMSCDR.AddRmsLogs(string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now), ServerID.ToString(), res1.status, res1.Message, RatesheetID.ToString(), "Automatic");

                    if (ServerRatesheetID != 0)
                    {
                        ID = ServerRatesheetID.ToString();
                    }
                    if (res1.status == "false" || res1.status == "failure")
                    {
                        return new Response() { status = "false", Message = res1.Message };
                    }
                    else
                    {
                        server_ratesheet_map map = new server_ratesheet_map();
                        map.Active = Active;
                        map.GracePeriod = GracePeriod;
                        map.PulseRule = PulseRule;
                        map.RatesheetID = RatesheetID;
                        map.Server_ID = ServerID;
                        if (CompanyType != 0)
                        {
                            map.CompanyType = CompanyType;
                        }
                        map.ServerRatesheetName = ServerRatesheetName;
                        map.ServerRatesheetID = ID;
                        map.CreatedOn = DateTime.Now;
                        map.UpdatedOn = DateTime.Now;
                        map.UpdatedByID = UpdatedBy;
                        map.CreatedByID = UpdatedBy;
                        map.Description = Description;

                        rms.server_ratesheet_map.Add(map);
                        rms.SaveChanges();

                        #region MongoDBInsert

                        try
                        {
                            Teleboss_ServerRatesheetMap servermap = new Teleboss_ServerRatesheetMap();
                            servermap._id = DateTime.Now.ToString("yyyyMMddHHmmssffff");
                            servermap.Active = Active;
                            servermap.GracePeriod = GracePeriod.ToString();
                            servermap.PulseRule = PulseRule;
                            servermap.RatesheetID = RatesheetID;
                            servermap.Server_ID = ServerID;
                            if (CompanyType != 0)
                            {
                                servermap.CompanyType = CompanyType;
                            }
                            servermap.ServerRatesheetName = ServerRatesheetName;
                            servermap.ServerRatesheetID = ID;
                            servermap.CreatedOn = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                            servermap.UpdatedOn = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                            servermap.UpdatedByID = UpdatedBy;
                            servermap.CreatedByID = UpdatedBy;
                            servermap.Description = Description;

                            var result = MongoDB.GetCollection<Teleboss_ServerRatesheetMap>("Teleboss_ServerRatesheetMap").Insert(servermap);
                        }
                        catch (Exception ex)
                        {

                        }

                        #endregion

                        return new Response() { status = "true", Message = "Mapping Added Successfully." };
                    }
                }
            }
            catch (Exception ex)
            {
                UpdateError("AddRatesheetServerMapping function call RatesheetID=" + RatesheetID + " Exception=" + ex.Message, "\n inner Exception " + ex.InnerException, "RatesheetLogs.txt", "", false);
                return new Response() { status = "false", Message = ex.Message };
            }
            finally
            {

            }
        }

        // Pasupathi Commented by ratesheet template Format 02-09-2016
        //private class NewJeraRatesheetNew
        //{
        //    public string Country_Prefix { get; set; }
        //    public string Country_Name { get; set; }
        //    public decimal Rate { get; set; }
        //    public string Blocked { get; set; }
        //    public string EffectiveDate { get; set; }
        //    public int startpulse { get; set; }
        //    public int nextpulse { get; set; }


        //}

        // end commented pasupathi

        private class NewJeraRatesheetNew
        {
            public string Country_Prefix { get; set; }
            public string Country_Name { get; set; }
            public decimal Rate { get; set; }
            public string Blocked { get; set; }
            public string EffectiveDate { get; set; }
            public int startpulse { get; set; }
            public int nextpulse { get; set; }
            public string EndDate { get; set; }


        }

        protected static string ConversiontoNewJera(List<ngt_rateslistjera> RateSheet)
        {
            List<NewJeraRatesheetNew> rateList = new List<NewJeraRatesheetNew>();
            try
            {
                string files = "~/ratesheetFiles/" + DateTime.Now.ToString("yyyyMMddHHmmssffff") + ".csv";
                string filename = HostingEnvironment.MapPath(files);
                foreach (var rate in RateSheet)
                {

                    //// Existing Code

                    //if (rate.Active != "D")
                    //{

                    //    string efectivedatenew = String.Format("{0:yyyy-MM-dd HH:mm:00}", rate.Effective_on) + "+0000";

                    //    // rateList.Add(new NewJeraRatesheetNew() { Blocked = rate.Active == "A" ? "ALLOWED" : "BLOCKED", Country_Name = rate.Description, Country_Prefix = rate.ngt_regionName, Rate = rate.Call_rate, startpulse = rate.Start_Pulse, nextpulse = rate.Next_Pulse, EffectiveDate = Convert.ToString(rate.Effective_on)+"+0000" });
                    //    rateList.Add(new NewJeraRatesheetNew() { Blocked = rate.Active == "A" ? "ALLOWED" : "BLOCKED", Country_Name = rate.Description, Country_Prefix = rate.ngt_regionName, Rate = rate.Call_rate, EffectiveDate = efectivedatenew, startpulse = rate.Start_Pulse, nextpulse = rate.Next_Pulse });

                    //}

                    // // Pasupathi Added 27/06/2016

                    string efectivedatenew = String.Format("{0:yyyy-MM-dd HH:mm:00}", rate.Effective_on) + "+0000";
                    string enddatenew = String.Format("{0:yyyy-MM-dd HH:mm:00}", rate.EndDate) + "+0000";

                    // rateList.Add(new NewJeraRatesheetNew() { Blocked = rate.Active == "A" ? "ALLOWED" : "BLOCKED", Country_Name = rate.Description, Country_Prefix = rate.ngt_regionName, Rate = rate.Call_rate, startpulse = rate.Start_Pulse, nextpulse = rate.Next_Pulse, EffectiveDate = Convert.ToString(rate.Effective_on)+"+0000" });
                    rateList.Add(new NewJeraRatesheetNew() { Blocked = rate.Active == "A" ? "ALLOWED" : rate.Active == "D" ? "DELETE" : "BLOCKED", Country_Name = rate.Description, Country_Prefix = rate.ngt_regionName, Rate = rate.Call_rate, EffectiveDate = efectivedatenew, startpulse = rate.Start_Pulse, nextpulse = rate.Next_Pulse, EndDate = enddatenew });


                }
                var rateList1 = rateList.Distinct();
                // RMSDTR.CreateCSVFromGenericList(rateList1, filename);
                // CommonFunctions.ToCSV(rateList1.ToList(), filename);
                CommonFunctions.ToCSVJera(rateList1.ToList(), filename);
                return filename;
            }
            catch (Exception ex)
            {
                return "Exception " + ex.Message + "\n" + ex.InnerException;
            }

        }

        // Pasupathi commented for Ratesheet Template Format 02-09-2016
        //public class ngt_rateslistjera
        //{
        //    public int Id { get; set; }
        //    public DateTime Effective_on { get; set; }
        //    public decimal Call_rate { get; set; }
        //    public int Grace_period { get; set; }
        //    public int Minimal_time { get; set; }
        //    public int Resolution { get; set; }
        //    public int ngt_region_codeId { get; set; }
        //    public string ngt_regionName { get; set; }
        //    public string Description { get; set; }
        //    public decimal Connection_charge { get; set; }
        //    public string Active { get; set; }
        //    public int Priority { get; set; }
        //    public string Trunck { get; set; }
        //    public int BatchID { get; set; }
        //    public DateTime CreatedOn { get; set; }
        //    public int Start_Pulse { get; set; }
        //    public int Next_Pulse { get; set; }

        //}

        // End commented pasupathi
        public class ngt_rateslistjera
        {
            public int Id { get; set; }
            public DateTime Effective_on { get; set; }
            public decimal Call_rate { get; set; }
            public int Grace_period { get; set; }
            public int Minimal_time { get; set; }
            public int Resolution { get; set; }
            public int ngt_region_codeId { get; set; }
            public string ngt_regionName { get; set; }
            public string Description { get; set; }
            public decimal Connection_charge { get; set; }
            public string Active { get; set; }
            public int Priority { get; set; }
            public string Trunck { get; set; }
            public int BatchID { get; set; }
            public DateTime CreatedOn { get; set; }
            public int Start_Pulse { get; set; }
            public int Next_Pulse { get; set; }
            public DateTime EndDate { get; set; }

        }
        public static string getBetweenContains(string strSource, string strStart, string strEnd)
        {
            int Start, End;
            if (strSource.Contains(strStart) && strSource.Contains(strEnd))
            {
                // Start = strSource.IndexOf(strStart, 0) + strStart.Length;
                // End = strSource.IndexOf(strEnd, Start);
                strStart = strStart + strEnd;
                return strStart;
            }
            else
            {
                return "";
            }
        }

        public Stream ShowRatesheet(int PartitionID)
        {
            try
            {
                List<ngt_ratesheetlist> Ratesheetlist = new List<ngt_ratesheetlist>();

                using (rmsEntities rms = new rmsEntities())
                {
                    List<ngt_ratesheet> ratelist = rms.ngt_ratesheet.Where(e => e.PartitionID == PartitionID && e.Active == 1).OrderByDescending(a => a.RatesheetID).ToList();

                    List<int> currencyids = ratelist.Select(t => (int)t.CurrencyID).ToList();
                    string CurrencyName = "";
                    List<financecurrency> CurrencyNameList = rms.financecurrencies.Where(r => r.CurrencyId != null && currencyids.Contains(r.CurrencyId)).ToList();
                    foreach (var rate in ratelist)
                    {
                        CurrencyName = CurrencyNameList.SingleOrDefault(r => r.CurrencyId == rate.CurrencyID).CurrencyName;
                        Ratesheetlist.Add(new ngt_ratesheetlist()
                        {
                            CreatedBy = rate.CreatedBy,
                            CreationDate = String.Format("{0:yyyy-MM-dd HH:mm:00}", rate.CreationDate),
                            CurrencyID = rate.CurrencyID,
                            CurrencyName = CurrencyName,
                            LastUpdatedOn = String.Format("{0:yyyy-MM-dd HH:mm:00}", rate.LastUpdatedOn),
                            Owner = rate.Owner,
                            PartitionID = rate.PartitionID,
                            RatesheetID = rate.RatesheetID,
                            RatesheetName = rate.RatesheetName,
                            Status = rate.Status,
                            Tag = rate.Tag,
                            UpdatedBy = rate.UpdatedBy,
                            RateSheetRequestId = rate.RateSheetRequestId
                             ,
                            CodecId = rate.CodecId
                        });
                    }

                    return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratesheetlist, totalrecords = Ratesheetlist.Count, message = "Records Fetched" });
                }
            }
            catch (Exception ex)
            {
                return RMSCDR.SerializeAndCreateMS(new Response() { status = "false", Message = ex.Message });
            }
            finally
            {

            }
        }

        public SuccessResponse oldnexgeFutureUpdate(oldnexgeupdatepushjobqueue Data)
        {
            SuccessResponse res = new SuccessResponse();

            using (rmsEntities rms = new rmsEntities())
            {
                if (Data.RequestType == "Update")
                {

                    var serverdetails = rms.server_details.Where(t => t.ServerID == Data.ServerId).FirstOrDefault();

                    dynamic RatesheetData = GetRatelistfuturenexge(Data.FileNameCSV);

                    res = OldNexege.OldNexgeFutureUpdateReplaceRatesheet(serverdetails.ServerIp, serverdetails.Username, serverdetails.Password, Data.ServerRatesheetNmae, RatesheetData, Data.CompanyType == 1 ? true : false);
                }
                else
                {
                    //  SuccessResponse res = new SuccessResponse();
                    var serverdetails = rms.server_details.Where(t => t.ServerID == Data.ServerId).FirstOrDefault();
                    dynamic RatesheetData = GetRatelistfuturenexge(Data.FileNameCSV);

                    res = OldNexege.OldNexgeFutureReplaceRatesheet(serverdetails.ServerIp, serverdetails.Username, serverdetails.Password, Data.ServerRatesheetNmae, RatesheetData, Data.CompanyType == 1 ? true : false);



                }

            }
            return res;

        }

        public void oldnexgeShowsRates()
        {
            SuccessResponse res1 = new SuccessResponse();
            ShowRecords ContactResponse;
            List<ngt_rates> Ratelistngt = new List<ngt_rates>();
            try
            {

                using (rmsEntities rms = new rmsEntities())
                {
                    //DateTime date = Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd"));
                    // var RateList = rms.oldnexgeupdatejobqueues.Where(t => t.Effective_on == date).ToList();
                    // var RateList = rms.oldnexgeupdatejobqueues.Where(t => t.Effective_on <= DateTime.Now).ToList();
                    //var jobqueue = rms.jobqueues.Where(j => j.RequestType == "Mapping"
                    //                      && RateList.Select(t => t.RateSheetId).ToList().Contains(j.RateSheetId)
                    //                      && j.PartitionID == 10).ToList();

                    // foreach (var RateBatch in RateList)
                    //{

                    oldnexgeupdatejobqueue RateBatch = rms.oldnexgeupdatejobqueues.Where(t => t.JobStatus == "Pending" && t.Effective_on <= DateTime.Now).OrderBy(t => t.Effective_on).ThenBy(t => t.Created_on).FirstOrDefault();

                    if (RateBatch != null && RateBatch.JobStatus == "Update")
                    {
                        RateBatch.JobStatus = "Progress";
                        rms.SaveChanges();

                        //oldnexgeupdatejobqueue updatePending = rms.oldnexgeupdatejobqueues.Where(t => t.JobStatus == RateBatch.JobStatus && t.RateSheetId == RateBatch.RateSheetId && t.BatchId == RateBatch.BatchId).FirstOrDefault();
                        // List<ngt_RatelistBatchDetails> Rateatch = new List<ngt_RatelistBatchDetails>();


                        var names = new string[] { "Mapping", "Update" };
                        var jobqueue = rms.jobqueues.Where(j => j.RateSheetId == RateBatch.RateSheetId && names.Contains(j.RequestType) &&
                                           j.PartitionID == 10
                                           //&& j.ServerId == 3
                                           ).ToList();

                        if (jobqueue.Count != 0)
                        {
                            foreach (var server in jobqueue)
                            {

                                //if (server.RequestType == "Mapping" && server.ServerId == 3)
                                //{
                                //    List<RMSServices.RatesheetV2.ngt_rateslist> Ratelist1 = new List<RMSServices.RatesheetV2.ngt_rateslist>();

                                //    var ngtratesheet = rms.ngt_ratesheet.Where(r => r.RatesheetID == server.RateSheetId).FirstOrDefault();

                                //    if (server.RatesheetName == ngtratesheet.RatesheetName)
                                //    {

                                //        Ratelistngt = rms.ngt_rates.Where(e => e.Active != "N" &&
                                //               e.RatesheetID == RateBatch.RateSheetId && e.Active != "D"
                                //               && e.ngt_PartitionId == 10 && e.Effective_on == Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd")) && e.BatchID == RateBatch.BatchId).ToList();

                                //        UpdateError("ShowRates function call After Getting Ratelistngt Count:", "Total Record RatesheetCount=" + Ratelistngt.Count, "Global.txt", "", false);

                                //        foreach (var rate in Ratelistngt)
                                //        {
                                //            Ratelist1.Add(new RMSServices.RatesheetV2.ngt_rateslist()
                                //            {
                                //                Id = rate.Id,
                                //                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                //                Call_rate = rate.Call_rate,
                                //                Grace_period = rate.Grace_period,
                                //                Minimal_time = rate.Minimal_time,
                                //                Resolution = rate.Resolution,
                                //                ngt_region_codeId = rate.ngt_region_codeId,

                                //                ngt_regionName = rate.ngt_region_code.Region_hash_code,
                                //                Description = rate.ngt_region_code.description,
                                //                Connection_charge = rate.Connection_charge,
                                //                Active = rate.Active,
                                //                Priority = rate.Priority,
                                //                Trunck = rate.Trunck,
                                //                BatchID = rate.BatchID,
                                //                CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.CreatedOn),
                                //                StartPulse = rate.Start_Pulse.ToString(),
                                //                NextPulse = rate.Next_Pulse.ToString()
                                //            });
                                //        }

                                //        ContactResponse = new ShowRecords() { status = "true", records = Ratelist1, totalrecords = Ratelist1.Count, message = "Records Fetched" };

                                //        var Stype = rms.server_details.Where(s => s.ServerType == 1).ToList();

                                //        foreach (var serverDetails in Stype)
                                //        {
                                //            UpdateError("ShowRates function call before complete nexge Update: RatesheetName=" + server.ServerRatesheetNmae + " IP=" + serverDetails.ServerIp, "Total Record=" + Ratelist1.Count, "Global.txt", "", false);
                                //            res1 = OldNexege.OldNexgeUpload(serverDetails.ServerIp, serverDetails.Username, serverDetails.Password, "Update", server.Descriptions, server.ServerRatesheetNmae, server.PulseRule, server.Active, server.GracePeriod, ContactResponse.records);
                                //            if (res1.status == "success")
                                //            {
                                //                RateBatch.JobStatus = "Completed";
                                //                rms.SaveChanges();
                                //            }
                                //            else
                                //            {
                                //                RateBatch.JobStatus = "Failed";
                                //                rms.SaveChanges();
                                //            }
                                //            UpdateError("ShowRates function call after complete nexge Update: RatesheetName=" + server.ServerRatesheetNmae + " IP=" + serverDetails.ServerIp, "Total Record=" + Ratelist1.Count, "Global.txt", "", false);
                                //        }
                                //    }
                                //}
                                //else
                                //{
                                if (server.RequestType == "Update")
                                {
                                    List<RMSServices.RatesheetV2.ngt_rateslist> Ratelist2 = new List<RMSServices.RatesheetV2.ngt_rateslist>();

                                    var ngtratesheet = rms.ngt_ratesheet.Where(r => r.RatesheetID == server.RateSheetId).FirstOrDefault();

                                    if (server.RatesheetName == ngtratesheet.RatesheetName)
                                    {
                                        var Jobq = rms.jobqueues.Where(j => j.RateSheetId == RateBatch.RateSheetId && j.RequestType == "Mapping" &&
                                             j.PartitionID == 10
                                             && j.ServerId == 3
                                             ).FirstOrDefault();

                                        if (Jobq != null)
                                        {
                                            Ratelistngt = rms.ngt_rates.Where(e => e.Active != "N" &&
                                               e.RatesheetID == RateBatch.RateSheetId && e.Active != "D"
                                               && e.ngt_PartitionId == 10 && e.Effective_on == Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd")) && e.BatchID == RateBatch.BatchId).ToList();

                                            UpdateError("ShowRates function call After Getting Ratelistngt Count:", "Total Record RatesheetCount=" + Ratelistngt.Count, "Global.txt", "", false);

                                            foreach (var rate in Ratelistngt)
                                            {
                                                Ratelist2.Add(new RMSServices.RatesheetV2.ngt_rateslist()
                                                {
                                                    Id = rate.Id,
                                                    Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                                    Call_rate = rate.Call_rate,
                                                    Grace_period = rate.Grace_period,
                                                    Minimal_time = rate.Minimal_time,
                                                    Resolution = rate.Resolution,
                                                    ngt_region_codeId = rate.ngt_region_codeId,

                                                    ngt_regionName = rate.ngt_region_code.Region_hash_code,
                                                    Description = rate.ngt_region_code.description,
                                                    Connection_charge = rate.Connection_charge,
                                                    Active = rate.Active,
                                                    Priority = rate.Priority,
                                                    Trunck = rate.Trunck,
                                                    BatchID = rate.BatchID,
                                                    CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.CreatedOn),
                                                    StartPulse = rate.Start_Pulse.ToString(),
                                                    NextPulse = rate.Next_Pulse.ToString()
                                                });
                                            }

                                            ContactResponse = new ShowRecords() { status = "true", records = Ratelist2, totalrecords = Ratelist2.Count, message = "Records Fetched" };
                                            var Stype = rms.server_details.Where(s => s.ServerType == 1).ToList();

                                            foreach (var serverDetails in Stype)
                                            {
                                                UpdateError("ShowRates function call before complete nexge Update: RatesheetName=" + server.ServerRatesheetNmae + " IP=" + serverDetails.ServerIp, "Total Record=" + Ratelist2.Count, "Global.txt", "", false);
                                                res1 = OldNexege.OldNexgeUpload(serverDetails.ServerIp, serverDetails.Username, serverDetails.Password, "Update", server.Descriptions, server.ServerRatesheetNmae, server.PulseRule, server.Active, server.GracePeriod, ContactResponse.records);
                                                if (res1.status == "success")
                                                {
                                                    RateBatch.JobStatus = "Completed";

                                                    rms.SaveChanges();
                                                }
                                                else
                                                {
                                                    RateBatch.JobStatus = "Failed";

                                                    rms.SaveChanges();
                                                }
                                                UpdateError("ShowRates function call after complete nexge Update: RatesheetName=" + server.ServerRatesheetNmae + " IP=" + serverDetails.ServerIp, "Total Record=" + Ratelist2.Count, "Global.txt", "", false);
                                            }
                                        }
                                    }
                                    //  }
                                }

                            }
                        }
                        else
                        {
                            RateBatch.JobStatus = "Failure";
                            rms.SaveChanges();
                            UpdateError("ShowRates function call after Failure in No Jobqueue", " ID=" + RateBatch.ID, "Global.txt", "", false);
                        }
                    }
                    else
                    {
                        RateBatch.JobStatus = "Completed";
                        rms.SaveChanges();
                        UpdateError("ShowRates function call after complete nexge Replace and Add", " ID=" + RateBatch.ID, "Global.txt", "", false);
                    }
                    //}
                }
            }
            catch (Exception ex)
            {
                UpdateError("ShowRates function call Error Method", ex.InnerException.Message, "Global.txt", "", false);
            }

        }

        public SuccessResponse RatesheetDelete(int Ratesheetid)
        {
            SuccessResponse responsemessage = new SuccessResponse();
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {
                    var ratesheet = rms.ngt_ratesheet.Where(a => a.RatesheetID == Ratesheetid).FirstOrDefault();
                    ratesheet.Active = 0;
                    rms.SaveChanges();

                    return new SuccessResponse() { status = "true", Message = "Ratesheet Successfully deleted." };

                }
            }
            catch (Exception ex)
            {
                return new SuccessResponse() { status = "false", Message = ex.Message };
            }
            finally
            {

            }

        }

        public Stream ShowBatches(int RatesheetID, string fromDate, string todate)
        {
            try
            {

                using (rmsEntities rms = new rmsEntities())
                {
                    DateTime Fromdate = Convert.ToDateTime(fromDate);
                    DateTime Todate = Convert.ToDateTime(todate).AddDays(1);
                    var batchlist = rms.ngt_rates.Where(f => f.RatesheetID == RatesheetID && f.CreatedOn >= Fromdate && f.CreatedOn <= Todate).Select(s => s.BatchID).Distinct().ToList();

                    return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = batchlist, totalrecords = batchlist.Count, message = "Records Fetched" });


                }
            }
            catch (Exception ex)
            {
                return RMSCDR.SerializeAndCreateMS(new Response() { status = "false", Message = ex.Message });
            }
            finally
            {

            }
        }

        //By shinil ncr query here
        public Stream ShowRatesNew(int RatesheetID, string Type, string value, string regionCode)
        {
            try
            {
                List<ngt_rates> Ratelist = new List<ngt_rates>();
                List<ngt_rateslist> Ratelist1 = new List<ngt_rateslist>();
                List<ratesresult> ratesresultList = new List<ratesresult>();
                using (rmsEntities rms = new rmsEntities())
                {
                    if (Type == "effectiveon")
                    {
                        if (value == "")
                        {

                            if (regionCode == "")
                            {
                                string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' order by nrc.country_code asc";
                                ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                                // Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N").OrderBy(e => e.ngt_region_codeId).ToList();
                            }
                            else
                            {
                                string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and nrc.Country_code like'" + regionCode + "' order by nrc.country_code asc";
                                ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                                //Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_region_code.Country_code == regionCode).OrderBy(e => e.ngt_region_codeId).ToList();
                            }
                        }
                        else
                        {
                            DateTime effectiveon = Convert.ToDateTime(value);
                            if (regionCode == "")
                            {
                                //Old Query
                                //string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";
                                //New query 17-04-2015
                                string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";
                                var a = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                                foreach (var rate in a)
                                {
                                    if (rate.Active == "D")
                                    {
                                        if (rate.Effective_on.Date == effectiveon.Date)
                                        {
                                            Ratelist1.Add(new ngt_rateslist()
                                            {
                                                Id = rate.Id,
                                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                                Call_rate = rate.Call_rate,
                                                Grace_period = rate.Grace_period,
                                                Minimal_time = rate.Minimal_time,
                                                Resolution = rate.Resolution,
                                                ngt_region_codeId = rate.ngt_region_codeId,
                                                //shripal ngt_regionName = rate.Country_code,
                                                ngt_regionName = rate.Region_hash_code,
                                                Description = rate.description,
                                                Connection_charge = rate.Connection_charge,
                                                Active = rate.Active,
                                                Priority = rate.Priority,
                                                Trunck = rate.Trunck,
                                                BatchID = rate.BatchID,
                                                CreatedOn = rate.CreatedOn,
                                                StartPulse = rate.Start_Pulse,
                                                NextPulse = rate.Next_Pulse
                                            });
                                        }
                                    }
                                    else
                                    {
                                        Ratelist1.Add(new ngt_rateslist()
                                        {
                                            Id = rate.Id,
                                            Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                            Call_rate = rate.Call_rate,
                                            Grace_period = rate.Grace_period,
                                            Minimal_time = rate.Minimal_time,
                                            Resolution = rate.Resolution,
                                            ngt_region_codeId = rate.ngt_region_codeId,
                                            //shripal ngt_regionName = rate.Country_code,
                                            ngt_regionName = rate.Region_hash_code,
                                            Description = rate.description,
                                            Connection_charge = rate.Connection_charge,
                                            Active = rate.Active,
                                            Priority = rate.Priority,
                                            Trunck = rate.Trunck,
                                            BatchID = rate.BatchID,
                                            CreatedOn = rate.CreatedOn,
                                            StartPulse = rate.Start_Pulse,
                                            NextPulse = rate.Next_Pulse
                                        });
                                    }
                                }
                            }
                            else
                            {
                                string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and Country_code like '" + regionCode + "%' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";
                                var a = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                                foreach (var rate in a)
                                {
                                    if (rate.Active == "D")
                                    {
                                        if (rate.Effective_on.Date == effectiveon.Date)
                                        {
                                            Ratelist1.Add(new ngt_rateslist()
                                            {
                                                Id = rate.Id,
                                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                                Call_rate = rate.Call_rate,
                                                Grace_period = rate.Grace_period,
                                                Minimal_time = rate.Minimal_time,
                                                Resolution = rate.Resolution,
                                                ngt_region_codeId = rate.ngt_region_codeId,
                                                //shripal ngt_regionName = rate.Country_code,
                                                ngt_regionName = rate.Region_hash_code,
                                                Description = rate.description,
                                                Connection_charge = rate.Connection_charge,
                                                Active = rate.Active,
                                                Priority = rate.Priority,
                                                Trunck = rate.Trunck,
                                                BatchID = rate.BatchID,
                                                CreatedOn = rate.CreatedOn,
                                                StartPulse = rate.Start_Pulse,
                                                NextPulse = rate.Next_Pulse
                                            });
                                        }
                                    }
                                    else
                                    {
                                        Ratelist1.Add(new ngt_rateslist()
                                        {
                                            Id = rate.Id,
                                            Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                            Call_rate = rate.Call_rate,
                                            Grace_period = rate.Grace_period,
                                            Minimal_time = rate.Minimal_time,
                                            Resolution = rate.Resolution,
                                            ngt_region_codeId = rate.ngt_region_codeId,
                                            //shripal ngt_regionName = rate.Country_code,
                                            ngt_regionName = rate.Region_hash_code,
                                            Description = rate.description,
                                            Connection_charge = rate.Connection_charge,
                                            Active = rate.Active,
                                            Priority = rate.Priority,
                                            Trunck = rate.Trunck,
                                            BatchID = rate.BatchID,
                                            CreatedOn = rate.CreatedOn,
                                            StartPulse = rate.Start_Pulse,
                                            NextPulse = rate.Next_Pulse
                                        });
                                    }
                                }
                            }
                        }
                        foreach (var rate in ratesresultList)
                        {

                            Ratelist1.Add(new ngt_rateslist()
                            {
                                Id = rate.Id,
                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                Call_rate = rate.Call_rate,
                                Grace_period = rate.Grace_period,
                                Minimal_time = rate.Minimal_time,
                                Resolution = rate.Resolution,
                                ngt_region_codeId = rate.ngt_region_codeId,
                                //shripal ngt_regionName = rate.Country_code,
                                ngt_regionName = rate.Region_hash_code,
                                Description = rate.description,
                                Connection_charge = rate.Connection_charge,
                                Active = rate.Active,
                                Priority = rate.Priority,
                                Trunck = rate.Trunck,
                                BatchID = rate.BatchID,
                                CreatedOn = rate.CreatedOn,
                                StartPulse = rate.Start_Pulse,
                                NextPulse = rate.Next_Pulse
                            });

                        }
                        return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, totalrecords = Ratelist1.Count, message = "Records Fetched" });
                    }
                    else if (Type == "Batch")
                    {
                        if (value == "")
                        {
                            if (regionCode == "")
                            {
                                string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' order by nrc.country_code asc";
                                ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                                // Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.BatchID == rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();
                            }
                            else
                            {
                                string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and nrc.Country_code like'" + regionCode + "' order by nrc.country_code asc";
                                ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                                //Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_region_code.Country_code.Contains(regionCode) && e.BatchID == rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();
                            }
                        }
                        else
                        {
                            int Batch = Convert.ToInt32(value);
                            if (regionCode == "")
                            {
                                string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.BatchID=" + Batch + " and ncr.Active!='N' order by nrc.country_code asc";
                                ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                                //Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.BatchID == Batch).ToList();
                            }
                            else
                            {
                                string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.BatchID=" + Batch + " and ncr.Active!='N' and nrc.Country_code like'" + regionCode + " ' order by nrc.country_code asc";
                                ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                                // Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_region_code.Country_code.Contains(regionCode) && e.BatchID == Batch).ToList();
                            }

                        }
                        foreach (var rate in ratesresultList)
                        {
                            Ratelist1.Add(new ngt_rateslist()
                            {
                                Id = rate.Id,
                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                Call_rate = rate.Call_rate,
                                Grace_period = rate.Grace_period,
                                Minimal_time = rate.Minimal_time,
                                Resolution = rate.Resolution,
                                ngt_region_codeId = rate.ngt_region_codeId,
                                //shripal ngt_regionName = rate.Country_code,
                                ngt_regionName = rate.Region_hash_code,
                                Description = rate.description,
                                Connection_charge = rate.Connection_charge,
                                Active = rate.Active,
                                Priority = rate.Priority,
                                Trunck = rate.Trunck,
                                BatchID = rate.BatchID,
                                CreatedOn = rate.CreatedOn,
                                StartPulse = rate.Start_Pulse,
                                NextPulse = rate.Next_Pulse
                            });
                        }
                        return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, totalrecords = Ratelist1.Count, message = "Records Fetched" });
                    }
                    else
                    {
                        return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "false", records = null, totalrecords = Ratelist1.Count, message = "Type should be effectiveon or Batch" });
                    }
                }
            }
            catch (Exception ex)
            {
                return RMSCDR.SerializeAndCreateMS(new Response() { status = "false", Message = ex.Message });
            }
            finally
            {
            }
        }

        //ncr query here
        public Stream ShowRates(int RatesheetID, string Type, string value, string regionCode)
        {
            try
            {
                List<ngt_rates> Ratelist = new List<ngt_rates>();
                List<ngt_rateslist> Ratelist1 = new List<ngt_rateslist>();
                using (rmsEntities rms = new rmsEntities())
                {
                    if (Type == "effectiveon")
                    {
                        if (value == "")
                        {

                            if (regionCode == "")
                            {
                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N")
                                                               .OrderBy(e => e.ngt_region_codeId).ToList();
                            }
                            else
                            {
                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N"
                                                      && e.ngt_region_code.Country_code == regionCode).OrderBy(e => e.ngt_region_codeId).ToList();
                            }
                        }
                        else
                        {
                            DateTime effectiveon = Convert.ToDateTime(value);
                            if (regionCode == "")
                            {
                                //Old Query
                                //string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";
                                //New query 17-04-2015
                                //shripal string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";
                                string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";
                                var a = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                                foreach (var rate in a)
                                {
                                    if (rate.Active == "D")
                                    {
                                        if (rate.Effective_on.Date == effectiveon.Date)
                                        {
                                            Ratelist1.Add(new ngt_rateslist()
                                            {
                                                Id = rate.Id,
                                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                                Call_rate = rate.Call_rate,
                                                Grace_period = rate.Grace_period,
                                                Minimal_time = rate.Minimal_time,
                                                Resolution = rate.Resolution,
                                                ngt_region_codeId = rate.ngt_region_codeId,
                                                //shripal ngt_regionName = rate.Country_code,
                                                ngt_regionName = rate.Region_hash_code,
                                                Description = rate.description,
                                                Connection_charge = rate.Connection_charge,
                                                Active = rate.Active,
                                                Priority = rate.Priority,
                                                Trunck = rate.Trunck,
                                                BatchID = rate.BatchID,
                                                CreatedOn = rate.CreatedOn,
                                                StartPulse = rate.Start_Pulse,
                                                NextPulse = rate.Next_Pulse
                                            });
                                        }
                                    }
                                    else
                                    {
                                        Ratelist1.Add(new ngt_rateslist()
                                        {
                                            Id = rate.Id,
                                            Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                            Call_rate = rate.Call_rate,
                                            Grace_period = rate.Grace_period,
                                            Minimal_time = rate.Minimal_time,
                                            Resolution = rate.Resolution,
                                            ngt_region_codeId = rate.ngt_region_codeId,
                                            //shripal  ngt_regionName = rate.Country_code,
                                            ngt_regionName = rate.Region_hash_code,
                                            Description = rate.description,
                                            Connection_charge = rate.Connection_charge,
                                            Active = rate.Active,
                                            Priority = rate.Priority,
                                            Trunck = rate.Trunck,
                                            BatchID = rate.BatchID,
                                            CreatedOn = rate.CreatedOn,
                                            StartPulse = rate.Start_Pulse,
                                            NextPulse = rate.Next_Pulse
                                        });
                                    }
                                }
                            }
                            else
                            {
                                //shripal   string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and Country_code like '" + regionCode + "%' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";
                                string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and Country_code like '" + regionCode + "%' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";
                                var a = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                                foreach (var rate in a)
                                {
                                    if (rate.Active == "D")
                                    {
                                        if (rate.Effective_on.Date == effectiveon.Date)
                                        {
                                            Ratelist1.Add(new ngt_rateslist()
                                            {
                                                Id = rate.Id,
                                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                                Call_rate = rate.Call_rate,
                                                Grace_period = rate.Grace_period,
                                                Minimal_time = rate.Minimal_time,
                                                Resolution = rate.Resolution,
                                                ngt_region_codeId = rate.ngt_region_codeId,
                                                //shripal ngt_regionName = rate.Country_code,
                                                ngt_regionName = rate.Region_hash_code,
                                                Description = rate.description,
                                                Connection_charge = rate.Connection_charge,
                                                Active = rate.Active,
                                                Priority = rate.Priority,
                                                Trunck = rate.Trunck,
                                                BatchID = rate.BatchID,
                                                CreatedOn = rate.CreatedOn,
                                                StartPulse = rate.Start_Pulse,
                                                NextPulse = rate.Next_Pulse
                                            });
                                        }
                                    }
                                    else
                                    {
                                        Ratelist1.Add(new ngt_rateslist()
                                        {
                                            Id = rate.Id,
                                            Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                            Call_rate = rate.Call_rate,
                                            Grace_period = rate.Grace_period,
                                            Minimal_time = rate.Minimal_time,
                                            Resolution = rate.Resolution,
                                            ngt_region_codeId = rate.ngt_region_codeId,
                                            //shripal  ngt_regionName = rate.Country_code,
                                            ngt_regionName = rate.Region_hash_code,
                                            Description = rate.description,
                                            Connection_charge = rate.Connection_charge,
                                            Active = rate.Active,
                                            Priority = rate.Priority,
                                            Trunck = rate.Trunck,
                                            BatchID = rate.BatchID,
                                            CreatedOn = rate.CreatedOn,
                                            StartPulse = rate.Start_Pulse,
                                            NextPulse = rate.Next_Pulse
                                        });
                                    }
                                }
                            }
                        }
                        foreach (var rate in Ratelist)
                        {

                            Ratelist1.Add(new ngt_rateslist()
                            {
                                Id = rate.Id,
                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                Call_rate = rate.Call_rate,
                                Grace_period = rate.Grace_period,
                                Minimal_time = rate.Minimal_time,
                                Resolution = rate.Resolution,
                                ngt_region_codeId = rate.ngt_region_codeId,
                                //shripal  ngt_regionName = rate.ngt_region_code.Country_code,
                                ngt_regionName = rate.ngt_region_code.Region_hash_code,

                                Description = rate.ngt_region_code.description,
                                Connection_charge = rate.Connection_charge,
                                Active = rate.Active,
                                Priority = rate.Priority,
                                Trunck = rate.Trunck,
                                BatchID = rate.BatchID,
                                CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.CreatedOn),
                                StartPulse = rate.Start_Pulse.ToString(),
                                NextPulse = rate.Next_Pulse.ToString()
                            });

                        }
                        UpdateError("ShowRates function call RatesheetID=" + RatesheetID + " Type=" + Type + " Value=" + value + " Regioncode=" + regionCode, "Total Record=" + Ratelist1.Count, "RatesheetLogs.txt", "", false);
                        return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, totalrecords = Ratelist1.Count, message = "Records Fetched" });
                    }
                    else if (Type == "Batch")
                    {
                        if (value == "")
                        {
                            if (regionCode == "")
                            {
                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N"
                                                   && e.BatchID == rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).
                                                       OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();
                            }
                            else
                            {
                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N"
                                                && e.ngt_region_code.Country_code.Contains(regionCode) && e.BatchID == rms.ngt_rates.
                                           Where(d => d.RatesheetID == RatesheetID).OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();
                            }
                        }
                        else
                        {
                            int Batch = Convert.ToInt32(value);
                            if (regionCode == "")
                            {
                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.BatchID == Batch).ToList();
                            }
                            else
                            {
                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_region_code.Country_code.Contains(regionCode) && e.BatchID == Batch).ToList();
                            }

                        }
                        foreach (var rate in Ratelist)
                        {
                            Ratelist1.Add(new ngt_rateslist()
                            {
                                Id = rate.Id,
                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                Call_rate = rate.Call_rate,
                                Grace_period = rate.Grace_period,
                                Minimal_time = rate.Minimal_time,
                                Resolution = rate.Resolution,
                                ngt_region_codeId = rate.ngt_region_codeId,
                                //shripal ngt_regionName = rate.ngt_region_code.Country_code,
                                ngt_regionName = rate.ngt_region_code.Region_hash_code,
                                Description = rate.ngt_region_code.description,
                                Connection_charge = rate.Connection_charge,
                                Active = rate.Active,
                                Priority = rate.Priority,
                                Trunck = rate.Trunck,
                                BatchID = rate.BatchID,
                                CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.CreatedOn),
                                StartPulse = rate.Start_Pulse.ToString(),
                                NextPulse = rate.Next_Pulse.ToString()
                            });
                        }
                        UpdateError("ShowRates function call RatesheetID=" + RatesheetID + " Type=" + Type + " Value=" + value + " Regioncode=" + regionCode, "Total Record=" + Ratelist1.Count, "RatesheetLogs.txt", "", false);
                        return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, totalrecords = Ratelist1.Count, message = "Records Fetched" });
                    }
                    else
                    {
                        UpdateError("ShowRates function call RatesheetID=" + RatesheetID + " Type=" + Type, "Total Record=" + Ratelist1.Count, "RatesheetLogs.txt", "", false);
                        return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "false", records = null, totalrecords = Ratelist1.Count, message = "Type should be effectiveon or Batch" });
                    }
                }
            }
            catch (Exception ex)
            {
                return RMSCDR.SerializeAndCreateMS(new Response() { status = "false", Message = ex.Message });
            }
            finally
            {
            }
        }

        //public Stream ShowRatesNew(int RatesheetID, string Type, string value, string regionCode)
        //{
        //    try
        //    {

        //        List<ngt_rates> Ratelist = new List<ngt_rates>();
        //        List<ngt_rateslist> Ratelist1 = new List<ngt_rateslist>();
        //        using (rmsEntities rms = new rmsEntities())
        //        {
        //            if (Type == "effectiveon")
        //            {

        //                if (value == "")
        //                {


        //                    if (regionCode == "")
        //                    {
        //                        Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N").OrderBy(e => e.ngt_region_codeId).ToList();
        //                    }
        //                    else
        //                    {
        //                        Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_region_code.Country_code == regionCode).OrderBy(e => e.ngt_region_codeId).ToList();
        //                    }
        //                }
        //                else
        //                {
        //                    DateTime effectiveon = Convert.ToDateTime(value);
        //                    if (regionCode == "")
        //                    {
        //                        //Old Query
        //                        //string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N'  and   ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";

        //                        //New query 17-04-2015
        //                        string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N'  and   ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";

        //                        var a = rms.Database.SqlQuery<ratesresult>(ab).ToList();
        //                        foreach (var rate in a)
        //                        {
        //                            if (rate.Active == "D")
        //                            {
        //                                if (rate.Effective_on.Date == effectiveon.Date)
        //                                {
        //                                    Ratelist1.Add(new ngt_rateslist()
        //                                    {
        //                                        Id = rate.Id,
        //                                        Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
        //                                        Call_rate = rate.Call_rate,
        //                                        Grace_period = rate.Grace_period,
        //                                        Minimal_time = rate.Minimal_time,
        //                                        Resolution = rate.Resolution,
        //                                        ngt_region_codeId = rate.ngt_region_codeId,
        //                                        ngt_regionName = rate.Country_code,
        //                                        Description = rate.description,
        //                                        Connection_charge = rate.Connection_charge,
        //                                        Active = rate.Active,
        //                                        Priority = rate.Priority,
        //                                        Trunck = rate.Trunck,
        //                                        BatchID = rate.BatchID,
        //                                        CreatedOn = rate.CreatedOn,
        //                                        StartPulse = rate.Start_Pulse,
        //                                        NextPulse = rate.Next_Pulse

        //                                    });
        //                                }
        //                            }
        //                            else
        //                            {
        //                                Ratelist1.Add(new ngt_rateslist()
        //                                {
        //                                    Id = rate.Id,
        //                                    Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
        //                                    Call_rate = rate.Call_rate,
        //                                    Grace_period = rate.Grace_period,
        //                                    Minimal_time = rate.Minimal_time,
        //                                    Resolution = rate.Resolution,
        //                                    ngt_region_codeId = rate.ngt_region_codeId,
        //                                    ngt_regionName = rate.Country_code,
        //                                    Description = rate.description,
        //                                    Connection_charge = rate.Connection_charge,
        //                                    Active = rate.Active,
        //                                    Priority = rate.Priority,
        //                                    Trunck = rate.Trunck,
        //                                    BatchID = rate.BatchID,
        //                                    CreatedOn = rate.CreatedOn,
        //                                    StartPulse = rate.Start_Pulse,
        //                                    NextPulse = rate.Next_Pulse
        //                                });
        //                            }
        //                        }
        //                    }
        //                    else
        //                    {
        //                        string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and Country_code like '" + regionCode + "%' and   ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";
        //                        var a = rms.Database.SqlQuery<ratesresult>(ab).ToList();
        //                        foreach (var rate in a)
        //                        {
        //                            if (rate.Active == "D")
        //                            {
        //                                if (rate.Effective_on.Date == effectiveon.Date)
        //                                {
        //                                    Ratelist1.Add(new ngt_rateslist()
        //                                    {
        //                                        Id = rate.Id,
        //                                        Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
        //                                        Call_rate = rate.Call_rate,
        //                                        Grace_period = rate.Grace_period,
        //                                        Minimal_time = rate.Minimal_time,
        //                                        Resolution = rate.Resolution,
        //                                        ngt_region_codeId = rate.ngt_region_codeId,
        //                                        ngt_regionName = rate.Country_code,
        //                                        Description = rate.description,
        //                                        Connection_charge = rate.Connection_charge,
        //                                        Active = rate.Active,
        //                                        Priority = rate.Priority,
        //                                        Trunck = rate.Trunck,
        //                                        BatchID = rate.BatchID,
        //                                        CreatedOn = rate.CreatedOn,
        //                                        StartPulse = rate.Start_Pulse,
        //                                        NextPulse = rate.Next_Pulse
        //                                    });
        //                                }
        //                            }
        //                            else
        //                            {
        //                                Ratelist1.Add(new ngt_rateslist()
        //                                {
        //                                    Id = rate.Id,
        //                                    Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
        //                                    Call_rate = rate.Call_rate,
        //                                    Grace_period = rate.Grace_period,
        //                                    Minimal_time = rate.Minimal_time,
        //                                    Resolution = rate.Resolution,
        //                                    ngt_region_codeId = rate.ngt_region_codeId,
        //                                    ngt_regionName = rate.Country_code,
        //                                    Description = rate.description,
        //                                    Connection_charge = rate.Connection_charge,
        //                                    Active = rate.Active,
        //                                    Priority = rate.Priority,
        //                                    Trunck = rate.Trunck,
        //                                    BatchID = rate.BatchID,
        //                                    CreatedOn = rate.CreatedOn,
        //                                    StartPulse = rate.Start_Pulse,
        //                                    NextPulse = rate.Next_Pulse
        //                                });
        //                            }
        //                        }
        //                    }
        //                }
        //                foreach (var rate in Ratelist)
        //                {


        //                    Ratelist1.Add(new ngt_rateslist()
        //                    {
        //                        Id = rate.Id,
        //                        Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
        //                        Call_rate = rate.Call_rate,
        //                        Grace_period = rate.Grace_period,
        //                        Minimal_time = rate.Minimal_time,
        //                        Resolution = rate.Resolution,
        //                        ngt_region_codeId = rate.ngt_region_codeId,
        //                        ngt_regionName = rate.ngt_region_code.Country_code,
        //                        Description = rate.ngt_region_code.description,
        //                        Connection_charge = rate.Connection_charge,
        //                        Active = rate.Active,
        //                        Priority = rate.Priority,
        //                        Trunck = rate.Trunck,
        //                        BatchID = rate.BatchID,
        //                        CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.CreatedOn),
        //                        StartPulse = rate.Start_Pulse.ToString(),
        //                        NextPulse = rate.Next_Pulse.ToString()
        //                    });


        //                }

        //                return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, totalrecords = Ratelist1.Count, message = "Records Fetched" });
        //            }
        //            else if (Type == "Batch")
        //            {
        //                if (value == "")
        //                {
        //                    if (regionCode == "")
        //                    {
        //                        Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.BatchID == rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();
        //                    }
        //                    else
        //                    {
        //                        Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_region_code.Country_code.Contains(regionCode) && e.BatchID == rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();

        //                    }
        //                }
        //                else
        //                {
        //                    int Batch = Convert.ToInt32(value);
        //                    if (regionCode == "")
        //                    {
        //                        Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.BatchID == Batch).ToList();
        //                    }
        //                    else
        //                    {
        //                        Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_region_code.Country_code.Contains(regionCode) && e.BatchID == Batch).ToList();
        //                    }


        //                }
        //                foreach (var rate in Ratelist)
        //                {
        //                    Ratelist1.Add(new ngt_rateslist()
        //                    {
        //                        Id = rate.Id,
        //                        Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
        //                        Call_rate = rate.Call_rate,
        //                        Grace_period = rate.Grace_period,
        //                        Minimal_time = rate.Minimal_time,
        //                        Resolution = rate.Resolution,
        //                        ngt_region_codeId = rate.ngt_region_codeId,
        //                        ngt_regionName = rate.ngt_region_code.Country_code,
        //                        Description = rate.ngt_region_code.description,
        //                        Connection_charge = rate.Connection_charge,
        //                        Active = rate.Active,
        //                        Priority = rate.Priority,
        //                        Trunck = rate.Trunck,
        //                        BatchID = rate.BatchID,
        //                        CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.CreatedOn),
        //                        StartPulse = rate.Start_Pulse.ToString(),
        //                        NextPulse = rate.Next_Pulse.ToString()
        //                    });
        //                }
        //                return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, totalrecords = Ratelist1.Count, message = "Records Fetched" });

        //            }
        //            else
        //            {
        //                return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "false", records = null, totalrecords = Ratelist1.Count, message = "Type should be effectiveon or Batch" });

        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        return RMSCDR.SerializeAndCreateMS(new Response() { status = "false", Message = ex.Message });
        //    }
        //    finally
        //    {

        //    }
        //}
        public class ratesresult
        {
            public int Id { get; set; }
            public System.DateTime Effective_on { get; set; }
            public decimal Call_rate { get; set; }
            public int Grace_period { get; set; }
            public int Minimal_time { get; set; }
            public int Resolution { get; set; }
            public int ngt_region_codeId { get; set; }
            public string Country_code { get; set; }
            public string description { get; set; }
            public decimal Connection_charge { get; set; }
            public string Active { get; set; }
            public int Priority { get; set; }
            public string Trunck { get; set; }
            public int BatchID { get; set; }
            public string CreatedOn { get; set; }
            public string Start_Pulse { get; set; }
            public string Next_Pulse { get; set; }
            //shripal
            public string Region_hash_code { get; set; }
        }

        // Pasupathi commented For ratesheet Template Change
        //public class ngt_rateslist
        //{
        //    public int Id { get; set; }
        //    public string Effective_on { get; set; }
        //    public decimal Call_rate { get; set; }
        //    public int Grace_period { get; set; }
        //    public int Minimal_time { get; set; }
        //    public int Resolution { get; set; }
        //    public int ngt_region_codeId { get; set; }
        //    public string ngt_regionName { get; set; }
        //    public string Description { get; set; }
        //    public decimal Connection_charge { get; set; }
        //    public string Active { get; set; }
        //    public int Priority { get; set; }
        //    public string Trunck { get; set; }
        //    public int BatchID { get; set; }
        //    public string CreatedOn { get; set; }
        //    public string StartPulse { get; set; }
        //    public string NextPulse { get; set; }

        //}

        public class ngt_rateslist
        {
            public int Id { get; set; }
            public string Effective_on { get; set; }
            public decimal Call_rate { get; set; }
            public int Grace_period { get; set; }
            public int Minimal_time { get; set; }
            public int Resolution { get; set; }
            public int ngt_region_codeId { get; set; }
            public string ngt_regionName { get; set; }
            public string Description { get; set; }
            public decimal Connection_charge { get; set; }
            public string Active { get; set; }
            public int Priority { get; set; }
            public string Trunck { get; set; }
            public int BatchID { get; set; }
            public string CreatedOn { get; set; }
            public string StartPulse { get; set; }
            public string NextPulse { get; set; }
            public string EndDate { get; set; }

        }
        public class ngt_rateslistNew
        {
            public int Id { get; set; }
            public Nullable<System.DateTime> Effective_on { get; set; }
            public decimal Call_rate { get; set; }
            public int Grace_period { get; set; }
            public int Minimal_time { get; set; }
            public int Resolution { get; set; }
            public int ngt_region_codeId { get; set; }
            public string ngt_regionName { get; set; }
            public string Description { get; set; }
            public decimal Connection_charge { get; set; }
            public string Active { get; set; }
            public int Priority { get; set; }
            public string Trunck { get; set; }
            public int BatchID { get; set; }
            public Nullable<System.DateTime> CreatedOn { get; set; }
            public string StartPulse { get; set; }
            public string NextPulse { get; set; }

        }
        public partial class ngt_ratesheetlist
        {
            public int RatesheetID { get; set; }
            public string RatesheetName { get; set; }
            public string Tag { get; set; }
            public string Owner { get; set; }
            public Nullable<int> CurrencyID { get; set; }
            public string CurrencyName { get; set; }
            public Nullable<int> Status { get; set; }
            public string CreationDate { get; set; }
            public string CreatedBy { get; set; }
            public string LastUpdatedOn { get; set; }
            public string UpdatedBy { get; set; }
            public int PartitionID { get; set; }
            public Nullable<int> RateSheetRequestId { get; set; }

            public string CodecId { get; set; }
        }

        public class Telebossratesheet
        {
            public string Regioncode { get; set; }
            public string Regionname { get; set; }
            public string Rate { get; set; }
            public string Status { get; set; }
            public string Effective_on { get; set; }
            public string StartPulse { get; set; }
            public string NextPulse { get; set; }
            public string Enddate { get; set; }

        }

        public class Teleboss_Ratesheet_Rate_1
        {
            [BsonElement("_id")]
            public object _id { get; set; }

            //[BsonElement("Id")]
            //public string Id { get; set; }

            [BsonElement("Effective_on")]
            public string Effective_on { get; set; }

            [BsonElement("Call_rate")]
            public string Call_rate { get; set; }

            [BsonElement("From_day")]
            public string From_day { get; set; }

            [BsonElement("To_day")]
            public string To_day { get; set; }

            [BsonElement("From_hour")]
            public string From_hour { get; set; }
            [BsonElement("To_hour")]
            public string To_hour { get; set; }
            [BsonElement("Grace_period")]
            public string Grace_period { get; set; }
            [BsonElement("Minimal_time")]
            public string Minimal_time { get; set; }
            [BsonElement("Resolution")]
            public string Resolution { get; set; }
            [BsonElement("ngt_region_codeId")]
            public string ngt_region_codeId { get; set; }
            [BsonElement("RatesheetID")]
            public string RatesheetID { get; set; }
            [BsonElement("Description")]
            public string Description { get; set; }
            [BsonElement("Connection_charge")]
            public string Connection_charge { get; set; }
            [BsonElement("Active")]
            public string Active { get; set; }
            [BsonElement("ngt_PartitionId")]
            public string ngt_PartitionId { get; set; }
            [BsonElement("Priority")]
            public string Priority { get; set; }
            [BsonElement("Trunck")]
            public string Trunck { get; set; }
            [BsonElement("BatchID")]
            public string BatchID { get; set; }
            [BsonElement("CreatedOn")]
            public string CreatedOn { get; set; }
            [BsonElement("Start_Pulse")]
            public string Start_Pulse { get; set; }
            [BsonElement("Next_Pulse")]
            public string Next_Pulse { get; set; }
            [BsonElement("EndDate")]
            public string EndDate { get; set; }
            [BsonElement("RegionCode")]
            public string RegionCode { get; set; }
            [BsonElement("RegionName")]
            public string RegionName { get; set; }

            [BsonElement("expireAt")]
            public dynamic expireAt { get; set; }


        }

        public class Teleboss_Rates_FutureEffectiveon
        {
            [BsonElement("_id")]
            public object _id { get; set; }

            //[BsonElement("Id")]
            //public string Id { get; set; }
            [BsonElement("Status")]
            public string Status { get; set; }
            [BsonElement("RequestType")]
            public string RequestType { get; set; }

            [BsonElement("Effective_on")]
            public string Effective_on { get; set; }

            [BsonElement("BatchID")]
            public string BatchID { get; set; }

            [BsonElement("RatesheetId")]
            public string RatesheetId { get; set; }

            [BsonElement("CreatesOn")]
            public string CreatesOn { get; set; }

            [BsonElement("AppliedDate")]
            public string AppliedDate { get; set; }

        }

        public class Teleboss_Ratesheet_Rate_2
        {
            //[BsonElement("_id")]
            //public object _id { get; set; }

            [BsonElement("Id")]
            public string Id { get; set; }

            [BsonElement("Effective_on")]
            public string Effective_on { get; set; }

            [BsonElement("Call_rate")]
            public string Call_rate { get; set; }

            [BsonElement("From_day")]
            public string From_day { get; set; }

            [BsonElement("To_day")]
            public string To_day { get; set; }

            [BsonElement("From_hour")]
            public string From_hour { get; set; }
            [BsonElement("To_hour")]
            public string To_hour { get; set; }
            [BsonElement("Grace_period")]
            public string Grace_period { get; set; }
            [BsonElement("Minimal_time")]
            public string Minimal_time { get; set; }
            [BsonElement("Resolution")]
            public string Resolution { get; set; }
            [BsonElement("ngt_region_codeId")]
            public string ngt_region_codeId { get; set; }
            [BsonElement("RatesheetID")]
            public string RatesheetID { get; set; }
            [BsonElement("Description")]
            public string Description { get; set; }
            [BsonElement("Connection_charge")]
            public string Connection_charge { get; set; }
            [BsonElement("Active")]
            public string Active { get; set; }
            [BsonElement("ngt_PartitionId")]
            public string ngt_PartitionId { get; set; }
            [BsonElement("Priority")]
            public string Priority { get; set; }
            [BsonElement("Trunck")]
            public string Trunck { get; set; }
            [BsonElement("BatchID")]
            public string BatchID { get; set; }
            [BsonElement("CreatedOn")]
            public string CreatedOn { get; set; }
            [BsonElement("Start_Pulse")]
            public string Start_Pulse { get; set; }
            [BsonElement("Next_Pulse")]
            public string Next_Pulse { get; set; }
            [BsonElement("EndDate")]
            public string EndDate { get; set; }
            [BsonElement("RegionCode")]
            public string RegionCode { get; set; }
            [BsonElement("RegionName")]
            public string RegionName { get; set; }

            [BsonElement("expireAt")]
            public DateTime expireAt { get; set; }


        }

        public class Teleboss_Ratesheet_Status
        {
            [BsonElement("_id")]
            public object _id { get; set; }
            [BsonElement("RatesheetID")]
            public string RatesheetID { get; set; }
            [BsonElement("Active")]
            public string Active { get; set; }
        }

        public class Teleboss_MasterRegionCode
        {
            [BsonElement("_id")]
            public object _id { get; set; }

            [BsonElement("Country_code")]
            public string Country_code { get; set; }

            [BsonElement("Area_code")]
            public string Area_code { get; set; }

            [BsonElement("description")]
            public string description { get; set; }

            [BsonElement("ngt_region_code_groupId")]
            public int ngt_region_code_groupId { get; set; }

            [BsonElement("Region_hash_code")]
            public string Region_hash_code { get; set; }

            [BsonElement("ngt_PartitionId")]
            public int ngt_PartitionId { get; set; }

            [BsonElement("starts_with")]
            public string starts_with { get; set; }

        }
        public class Teleboss_ServerRatesheetMap
        {
            [BsonElement("_id")]
            public object _id { get; set; }

            [BsonElement("Active")]
            public bool Active { get; set; }

            [BsonElement("GracePeriod")]
            public string GracePeriod { get; set; }

            [BsonElement("PulseRule")]
            public string PulseRule { get; set; }

            [BsonElement("RatesheetID")]
            public int RatesheetID { get; set; }

            [BsonElement("Server_ID")]
            public int Server_ID { get; set; }

            [BsonElement("CompanyType")]
            public int CompanyType { get; set; }

            [BsonElement("ServerRatesheetName")]
            public string ServerRatesheetName { get; set; }

            [BsonElement("ServerRatesheetID")]
            public string ServerRatesheetID { get; set; }

            [BsonElement("CreatedOn")]
            public string CreatedOn { get; set; }

            [BsonElement("UpdatedOn")]
            public string UpdatedOn { get; set; }

            [BsonElement("UpdatedByID")]
            public int UpdatedByID { get; set; }

            [BsonElement("CreatedByID")]
            public int CreatedByID { get; set; }

            [BsonElement("Description")]
            public string Description { get; set; }

        }

        public class RatesheetBatchID
        {
            [BsonElement("_id")]
            public object _id { get; set; }
            [BsonElement("Sno")]
            public string Sno { get; set; }
            [BsonElement("BatchId")]
            public string BatchId { get; set; }

        }
        public partial class ngt_RateSheetRequestId
        {

            public string RateSheetRequestId { get; set; }
        }


        public class ShowRatesheetRecords
        {
            public string status { get; set; }
            public List<ngt_rateslist> records { get; set; }
            public List<ngt_rateslist> recordsdelete { get; set; }
            public string message { get; set; }
            public int totalrecords { get; set; }
            public int totalrecordsdelete { get; set; }
        }

        public class ratesheetservermap
        {
            public int ID { get; set; }
            public Nullable<int> RatesheetID { get; set; }
            public Nullable<int> Server_ID { get; set; }
            public string PulseRule { get; set; }
            public Nullable<int> GracePeriod { get; set; }
            public string ServerRatesheetName { get; set; }
            public string Description { get; set; }
            public string ServerRatesheetID { get; set; }
            public string CompanyTypeName { get; set; }
            public Nullable<bool> Active { get; set; }
            public Nullable<System.DateTime> CreatedOn { get; set; }
            public Nullable<System.DateTime> UpdatedOn { get; set; }
            public Nullable<int> CreatedByID { get; set; }
            public Nullable<int> UpdatedByID { get; set; }
            public Nullable<int> CompanyType { get; set; }
            public string ServerName { get; set; }

        }
        public Stream ViewRatesheetServerMappingOptions(int MappingID, int RatesheetID)
        {
            return null;
        }
        public Stream ViewRatesheetServerMapping(int MappingID, int RatesheetID)
        {
            List<server_ratesheet_map> map = new List<server_ratesheet_map>();
            List<ratesheetservermap> map1 = new List<ratesheetservermap>();
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {

                    if (MappingID == 0)
                    {

                        map = rms.server_ratesheet_map.Where(d => d.RatesheetID == RatesheetID).ToList();

                    }
                    else
                    {
                        map = rms.server_ratesheet_map.Where(d => d.ID == MappingID).ToList();
                    }

                    if (map.Count > 0)
                    {
                        //ByShinil
                        List<int?> serverids = map.Select(t => t.Server_ID).ToList();
                        List<server_details> server_detailsList = rms.server_details.Where(d => d.ServerID != 0 && serverids.Contains(d.ServerID)).ToList();
                        foreach (var a in map)
                        {
                            string serverName = "";
                            server_details server_detailsObj = server_detailsList.Where(d => d.ServerID == a.Server_ID).FirstOrDefault();
                            if (server_detailsObj != null)
                            {
                                serverName = server_detailsObj.ServerName;
                            }
                            map1.Add(new ratesheetservermap() { Active = a.Active, CompanyTypeName = a.sales_company_type.Type_name, Description = a.Description, CreatedByID = a.CreatedByID, CreatedOn = a.CreatedOn, GracePeriod = a.GracePeriod, ID = a.ID, PulseRule = a.PulseRule, RatesheetID = a.RatesheetID, Server_ID = a.Server_ID, ServerName = serverName, ServerRatesheetID = a.ServerRatesheetID, ServerRatesheetName = a.ServerRatesheetName, UpdatedByID = a.UpdatedByID, UpdatedOn = a.UpdatedOn, CompanyType = a.CompanyType });
                        }

                        return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", message = "Records Fetched", records = map1, totalrecords = map1.Count });
                    }
                    else
                    {
                        return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "false", message = "Records Not Found", totalrecords = map.Count, records = null });
                    }
                }
            }
            catch (Exception ex)
            {
                return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "false", message = ex.Message, totalrecords = map.Count, records = null });
            }
            finally
            {

            }
        }


        public Response DeleteRatesheetServerMapping(int MappingID)
        {

            try
            {
                using (rmsEntities rms = new rmsEntities())
                {
                    var map = rms.server_ratesheet_map.SingleOrDefault(d => d.ID == MappingID);

                    if (map != null)
                    {
                        rms.server_ratesheet_map.Remove(map);
                        rms.SaveChanges();

                        return new Response() { status = "true", Message = "Mapping Removed Successfully" };
                    }
                    else
                    {
                        return new Response() { status = "false", Message = "Mapping Not Found" };
                    }
                }
            }
            catch (Exception ex)
            {
                return new Response() { status = "false", Message = ex.Message };
            }
            finally
            {

            }
        }


        public SuccessResponse PushRatesheetToServer(int MappingID, string Source, string type, string value)
        {
            SuccessResponse res = new SuccessResponse();
            try
            {
                if (Source == "")
                {
                    Source = "Manual";
                }

                using (rmsEntities rms = new rmsEntities())
                {
                    var map = rms.server_ratesheet_map.SingleOrDefault(d => d.ID == MappingID);

                    if (map != null)
                    {
                        Stream stream = ShowRates(Convert.ToInt32(map.RatesheetID), type, value, "");
                        // Stream stream = ShowsRates(Convert.ToInt32(map.RatesheetID), type, value, "",0);

                        //Stream stream = ShowRatesNew(Convert.ToInt32(map.RatesheetID), type, value, "");


                        DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(ShowRatesheetRecords));
                        ShowRatesheetRecords ContactResponse = ser.ReadObject(stream) as ShowRatesheetRecords;
                        if (ContactResponse.status == "false")
                        {

                            RMSCDR.AddRmsLogs(string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now), map.Server_ID.ToString(), ContactResponse.status, ContactResponse.message, map.RatesheetID.ToString(), Source);


                            return new SuccessResponse() { status = "false", Message = "No Records To Push" };

                        }
                        else
                        {



                            var serverDetails = rms.server_details.SingleOrDefault(d => d.ServerID == map.Server_ID);
                            switch (serverDetails.ServerType)
                            {
                                case 1:
                                    //Old Nexge 

                                    res = OldNexege.OldNexgeUpload(serverDetails.ServerIp, serverDetails.Username, serverDetails.Password, "Update", "", map.ServerRatesheetName, map.PulseRule, map.Active, map.GracePeriod, ContactResponse.records);


                                    break;
                                case 2:
                                    //Jerasoft

                                    res = JeraApi1.PushRateSheetV2(ContactResponse.records, serverDetails.Username, serverDetails.Password, serverDetails.ServerIp, serverDetails.SummaryURL.Split(',')[0], map.ServerRatesheetName);


                                    UpdateError("PushRatesheetToServer: PushRateSheetV2 " + res.Message, "res.status" + res.status, "AddCompanyLogs.txt", "", false);

                                    //res = NewNexgeUpload(serverDetails.Ipaddress, serverDetails.UserName, serverDetails.Password, actiontype, bpName, pulse, status, gracePeriod, useForTr, useForOr, planTypeCode, RatesheetName);
                                    break;
                                case 3:
                                    //New Nexege
                                    res = NewNexege.NewNexgeUpload(serverDetails.ServerIp, map.Description, serverDetails.Username, serverDetails.Password, "Update", map.ServerRatesheetName, map.ServerRatesheetID, map.PulseRule, map.Active, map.GracePeriod, map.CompanyType == 1 ? true : false, ContactResponse.records);

                                    break;
                                case 4:
                                    //VOS
                                    // res = NewNexgeUpload(serverDetails.Ipaddress, serverDetails.UserName, serverDetails.Password, actiontype, bpName, pulse, status, gracePeriod, useForTr, useForOr, planTypeCode, RatesheetName);
                                    break;
                                case 5:
                                    //New Nexege Test
                                    res = NewNexege.NewNexgeUpload(serverDetails.ServerIp, map.Description, serverDetails.Username, serverDetails.Password, "Update", map.ServerRatesheetName, map.ServerRatesheetID, map.PulseRule, map.Active, map.GracePeriod, map.CompanyType == 1 ? true : false, ContactResponse.records);


                                    break;
                                case 6:
                                    //Old Nexege Test

                                    res = OldNexege.OldNexgeUpload(serverDetails.ServerIp, serverDetails.Username, serverDetails.Password, "Update", "", map.ServerRatesheetName, map.PulseRule, map.Active, map.GracePeriod, ContactResponse.records);

                                    break;
                                case 7:
                                    //Jerasoft Test
                                    res = JeraApi1.PushRateSheetV2(ContactResponse.records, serverDetails.Username, serverDetails.Password, serverDetails.ServerIp, serverDetails.SummaryURL.Split(',')[0], map.ServerRatesheetName);

                                    UpdateError("PushRatesheetToServer: PushRateSheetV2 " + res.Message, "res.status" + res.status, "AddCompanyLogs.txt", "", false);
                                    break;
                            }
                            RMSCDR.AddRmsLogs(string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now), map.Server_ID.ToString(), res.status, res.Message, map.RatesheetID.ToString(), Source);

                            return res;
                        }

                    }
                    else
                    {
                        return new SuccessResponse() { status = "false", Message = "Mapping Not Found" };
                    }
                }
            }
            catch (Exception ex)
            {
                return new SuccessResponse() { status = "false", Message = ex.Message };
            }
            finally
            {

            }
        }


        public SuccessResponse PresetRatesheetToServer(int MappingID, int serverId, string Source, string type, string value, int CompanyId, int CompType, string accountId)
        {
            SuccessResponse res = new SuccessResponse();
            try
            {
                if (Source == "")
                {
                    Source = "Manual";
                }

                using (rmsEntities rms = new rmsEntities())
                {
                    var map = rms.server_ratesheet_map.SingleOrDefault(d => d.ID == MappingID && d.Server_ID == serverId);

                    if (map != null)
                    {
                        Stream stream = ShowRates(Convert.ToInt32(map.RatesheetID), type, value, "");
                        DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(ShowRatesheetRecords));
                        ShowRatesheetRecords ContactResponse = ser.ReadObject(stream) as ShowRatesheetRecords;
                        if (ContactResponse.status == "false")
                        {

                            RMSCDR.AddRmsLogs(string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now), map.Server_ID.ToString(), ContactResponse.status, ContactResponse.message, map.RatesheetID.ToString(), Source);


                            return new SuccessResponse() { status = "false", Message = "No Records To Push" };

                        }
                        else
                        {
                            var serverDetails = rms.server_details.SingleOrDefault(d => d.ServerID == map.Server_ID);
                            switch (serverDetails.ServerType)
                            {

                                case 2:
                                    //Jerasoft
                                    res = JeraPresetBPush(ContactResponse.records, serverDetails.Username, serverDetails.Password, serverDetails.ServerIp, serverDetails.SummaryURL.Split(',')[0], map.ServerRatesheetName, CompanyId, CompType, accountId);
                                    //res = JeraApi1.PushRateSheetV2(ContactResponse.records, serverDetails.Username, serverDetails.Password, serverDetails.ServerIp, serverDetails.SummaryURL.Split(',')[0], map.ServerRatesheetName);
                                    //JeraPresetBPush();
                                    //res = NewNexgeUpload(serverDetails.Ipaddress, serverDetails.UserName, serverDetails.Password, actiontype, bpName, pulse, status, gracePeriod, useForTr, useForOr, planTypeCode, RatesheetName);
                                    break;

                                case 7:
                                    //Jerasoft Test
                                    //res = JeraApi1.PushRateSheetV2(ContactResponse.records, serverDetails.Username, serverDetails.Password, serverDetails.ServerIp, serverDetails.SummaryURL.Split(',')[0], map.ServerRatesheetName);
                                    res = JeraPresetBPush(ContactResponse.records, serverDetails.Username, serverDetails.Password, serverDetails.ServerIp, serverDetails.SummaryURL.Split(',')[0], map.ServerRatesheetName, CompanyId, CompType, accountId);

                                    break;
                            }
                            RMSCDR.AddRmsLogs(string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now), map.Server_ID.ToString(), res.status, res.Message, map.RatesheetID.ToString(), Source);

                            return res;
                        }

                    }
                    else
                    {
                        return new SuccessResponse() { status = "false", Message = "Mapping Not Found" };
                    }
                }
            }
            catch (Exception ex)
            {
                return new SuccessResponse() { status = "false", Message = ex.Message };
            }
            finally
            {

            }
        }
        public SuccessResponse PresetRatesheetToServer1(int MappingID, int serverId, string Source, string type, string value, int CompanyId, int CompType, string accountId)
        {
            return null;
        }

        public SuccessResponse PresetRatesheetServer(int RatesheetId, string Source, string type, string value)
        {
            // accid,serverid

            SuccessResponse res = new SuccessResponse();
            try
            {
                if (Source == "")
                {
                    Source = "Manual";
                }

                using (rmsEntities rms = new rmsEntities())
                {

                    var AccountDetails = rms.ngt_com.Where(a => a.ngt_com_ratesheetId == RatesheetId).FirstOrDefault();

                    if (AccountDetails == null)
                        return new SuccessResponse() { status = "false", Message = "Account Not Found" };

                    // string AccountMapId = AccountDetails.Id.ToString();
                    var CompanyDetails = rms.sales_com_user_map.Where(a => a.mapped_ngtID.Contains(AccountDetails.Id.ToString())).FirstOrDefault();

                    if (CompanyDetails == null)
                        return new SuccessResponse() { status = "false", Message = "Company Not Found" };

                    var ServerDetails = rms.sales_com_property_map.Where(a => a.Sales_Com_User_Map_Id == CompanyDetails.ID).FirstOrDefault();

                    if (ServerDetails == null)
                        return new SuccessResponse() { status = "false", Message = "ServerDetails Not Found" };

                    string accountId = AccountDetails.Id.ToString();
                    int CompanyId = CompanyDetails.ID;
                    int CompType = Convert.ToInt32(CompanyDetails.sales_company_typeID);
                    int serverId = Convert.ToInt32(ServerDetails.ServerId);
                    int MappingID = 0;

                    string query1 = "SELECT ID,ServerRatesheetID FROM server_ratesheet_map where RatesheetID=" + RatesheetId + " and Server_ID=" + serverId;
                    IList rows1 = BILLINGPersistentManager.Instance().GetSession().CreateSQLQuery(query1)
                                                        .AddScalar("ID", NHibernateUtil.Int32)
                                                        .AddScalar("ServerRatesheetID", NHibernateUtil.Int32)

                                                        .List();
                    if (rows1.Count > 0)
                    {
                        foreach (IList row2 in rows1)
                        {
                            MappingID = Convert.ToInt32(row2[0]);
                        }
                    }
                    var map = rms.server_ratesheet_map.SingleOrDefault(d => d.ID == MappingID && d.Server_ID == serverId);

                    if (map != null)
                    {
                        Stream stream = ShowRates(Convert.ToInt32(map.RatesheetID), type, value, "");
                        DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(ShowRatesheetRecords));
                        ShowRatesheetRecords ContactResponse = ser.ReadObject(stream) as ShowRatesheetRecords;
                        if (ContactResponse.status == "false")
                        {

                            RMSCDR.AddRmsLogs(string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now), map.Server_ID.ToString(), ContactResponse.status, ContactResponse.message, map.RatesheetID.ToString(), Source);


                            return new SuccessResponse() { status = "false", Message = "No Records To Push" };

                        }
                        else
                        {
                            var serverDetails = rms.server_details.SingleOrDefault(d => d.ServerID == map.Server_ID);
                            switch (serverDetails.ServerType)
                            {

                                case 2:
                                    //Jerasoft
                                    res = JeraPresetBPush(ContactResponse.records, serverDetails.Username, serverDetails.Password, serverDetails.ServerIp, serverDetails.SummaryURL.Split(',')[0], map.ServerRatesheetName, CompanyId, CompType, accountId);
                                    //res = JeraApi1.PushRateSheetV2(ContactResponse.records, serverDetails.Username, serverDetails.Password, serverDetails.ServerIp, serverDetails.SummaryURL.Split(',')[0], map.ServerRatesheetName);
                                    //JeraPresetBPush();
                                    //res = NewNexgeUpload(serverDetails.Ipaddress, serverDetails.UserName, serverDetails.Password, actiontype, bpName, pulse, status, gracePeriod, useForTr, useForOr, planTypeCode, RatesheetName);
                                    break;

                                case 7:
                                    //Jerasoft Test
                                    //res = JeraApi1.PushRateSheetV2(ContactResponse.records, serverDetails.Username, serverDetails.Password, serverDetails.ServerIp, serverDetails.SummaryURL.Split(',')[0], map.ServerRatesheetName);
                                    res = JeraPresetBPush(ContactResponse.records, serverDetails.Username, serverDetails.Password, serverDetails.ServerIp, serverDetails.SummaryURL.Split(',')[0], map.ServerRatesheetName, CompanyId, CompType, accountId);

                                    break;
                            }
                            RMSCDR.AddRmsLogs(string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now), map.Server_ID.ToString(), res.status, res.Message, map.RatesheetID.ToString(), Source);

                            return res;
                        }

                    }
                    else
                    {
                        return new SuccessResponse() { status = "false", Message = "Mapping Not Found" };
                    }
                }
            }
            catch (Exception ex)
            {
                return new SuccessResponse() { status = "false", Message = ex.Message };
            }
            finally
            {

            }
        }


        public class PushJera
        {
            public string Host { get; set; }
            public string User { get; set; }
            public string Password { get; set; }
            public int Id { get; set; }
            public string Port { get; set; }
            public string Type { get; set; }
            public string AccountId { get; set; }
            public List<RatesheetJera1> Rate { get; set; }
        }
        private class RatesheetArray
        {
            public List<RatesheetJera1> Block { get; set; }
        }
        public class RatesheetJera1
        {
            public string Code { get; set; }
            public string Rate { get; set; }
            public string EffectiveFrom { get; set; }
        }
        private static RatesheetArray ConversiontoJera(List<RMSServices.RatesheetV2.ngt_rateslist> RateSheet)
        {
            List<RatesheetJera1> Addlist = new List<RatesheetJera1>();
            List<RatesheetJera1> Deletelist = new List<RatesheetJera1>();
            List<RatesheetJera1> Blocklist = new List<RatesheetJera1>();
            List<RatesheetArray> Result = new List<RatesheetArray>();
            foreach (var rate in RateSheet)
            {

                if (rate.Active == "B")
                {
                    Blocklist.Add(new RatesheetJera1() { Code = rate.ngt_regionName.ToString(), EffectiveFrom = rate.Effective_on, Rate = rate.Call_rate.ToString() });
                }

            }

            return new RatesheetArray { Block = Blocklist };


        }
        public static int GetJeraRatesheetId(string RatesheetName, string Username, string Password, string Ipaddress, string port)
        {
            try
            {
                Password = HttpUtility.UrlEncode(Password);
                string service = String.Format(ConfigurationManager.AppSettings["GetRateSheetID"].ToString(), RatesheetName, Ipaddress, Username, Password, port);

                WebClient wc = new WebClient();
                string data = wc.DownloadString(service);
                if (data == "\r\nNotFound")
                {
                    return 0;
                }
                else
                {
                    return Convert.ToInt32(data);
                }

            }
            catch
            {
                return 0;
            }
        }
        public SuccessResponse JeraPresetBPush(List<RMSServices.RatesheetV2.ngt_rateslist> RateSheet, string Username, string Password, string IpAddress, string Port, string RatesheetName, int clientId, int PresetType, string accountId)
        {
            SuccessResponse res = new SuccessResponse();
            try
            {
                RatesheetArray RateSheet1 = ConversiontoJera(RateSheet);
                PushJera push = new PushJera();
                string data = "";
                string service = "";
                RestRequest request1;
                RestClient restClient1;
                IRestResponse response1;
                //int bpID = GetJeraRatesheetId(RatesheetName, Username, Password, IpAddress);
                if (RateSheet1.Block.Count > 0)
                {
                    push = new PushJera();
                    push.Host = IpAddress;
                    push.Id = clientId;
                    push.Password = Password;
                    push.Rate = RateSheet1.Block;
                    push.User = Username;
                    push.Port = Port;
                    push.Type = PresetType == 2 ? "Orig" : "Term";
                    push.AccountId = accountId == "00" ? "" : accountId;

                    data = RMSCDR.StreamToString(RMSCDR.SerializeAndCreateMS(push));

                    service = ConfigurationManager.AppSettings["BlockToJera1"].ToString();
                    request1 = new RestRequest(service, Method.POST);
                    request1.AddParameter("dataArray", data);

                    restClient1 = new RestClient();
                    restClient1.Timeout = 5 * 60 * 60 * 1000;
                    response1 = restClient1.Execute(request1);

                    if (response1.StatusCode == HttpStatusCode.OK)
                    {

                        if (response1.Content != "")
                        {
                            if (response1.Content.ToLower().Contains("success") || response1.Content.Contains("No record found"))
                            {
                                res.Message = "Jera Ratesheet Uploaded Successfully";
                                res.status = "success";
                            }
                            else
                            {
                                res.Message = "Jera Ratesheet Uploading Failed:- " + response1.Content;
                                res.status = "failure";
                            }
                        }
                    }
                }
                else
                {
                    res.Message = "No Block code found";
                    res.status = "failure";
                }
            }
            catch (Exception ex)
            {
                res.Message = ex.Message;
                res.status = "failure";
            }
            return res;
        }
        //shripal
        public Stream DeleteRatesheetFromDB(Int32 RatesheetID)
        {

            try
            {
                using (rmsEntities rms = new rmsEntities())
                {
                    var ratesheetvar = rms.ngt_ratesheet.SingleOrDefault(g => g.RatesheetID == RatesheetID);

                    if (ratesheetvar != null)
                    {
                        rms.ngt_ratesheet.Remove(ratesheetvar);
                        rms.SaveChanges();

                        return RMSCDR.SerializeAndCreateMS(new SuccessResponse() { status = "true", Message = "Ratesheet remove from Database.", Value = "" });
                    }
                    else
                    {
                        return RMSCDR.SerializeAndCreateMS(new SuccessResponse() { status = "false", Message = "Ratesheet Not Exists." });
                    }
                }

            }
            catch (Exception ex)
            {
                return RMSCDR.SerializeAndCreateMS(new Response() { status = "false", Message = ex.Message });
            }
            finally
            {

            }
            return null;
        }
        public Stream DeleteRatesheetFromDB1(Int32 ratesheetid)
        {
            return null;
        }
        public Stream ShowRatesheetsforupdate(int PartitionID, string str)
        {
            try
            {
                List<ngt_ratesheetupdatelist> Ratesheetlist = new List<ngt_ratesheetupdatelist>();
                using (rmsEntities rms = new rmsEntities())
                {
                    // string str = "366,367";
                    string[] ss = str.Split(',');
                    int[] collection1 = new int[100];// = new int[] { Convert.ToInt32(ss[0]) };
                    int i = 0;
                    for (i = 0; i < ss.Length; i++)
                    {
                        collection1[i] = Convert.ToInt32(ss[i]);
                    }

                    var ratelist = (from SRM in rms.server_ratesheet_map where SRM.ngt_ratesheet.PartitionID == PartitionID && SRM.Active == true && collection1.Contains((int)SRM.RatesheetID) select SRM).ToList();
                    string CurrencyName = "";
                    string servername = "";
                    foreach (var rate in ratelist)
                    {
                        CurrencyName = rms.financecurrencies.SingleOrDefault(r => r.CurrencyId == rate.ngt_ratesheet.CurrencyID).CurrencyName;
                        // servername = rms.server_details.SingleOrDefault(r => r.ServerID == rate.Server_ID).ServerName;
                        Ratesheetlist.Add(new ngt_ratesheetupdatelist() { CreatedBy = rate.ngt_ratesheet.CreatedBy, CreationDate = String.Format("{0:yyyy-MM-dd HH:mm:00}", rate.ngt_ratesheet.CreationDate), CurrencyID = rate.ngt_ratesheet.CurrencyID, CurrencyName = CurrencyName, LastUpdatedOn = String.Format("{0:yyyy-MM-dd HH:mm:00}", rate.ngt_ratesheet.LastUpdatedOn), Owner = rate.ngt_ratesheet.Owner, PartitionID = rate.ngt_ratesheet.PartitionID, RatesheetID = rate.ngt_ratesheet.RatesheetID, RatesheetName = rate.ngt_ratesheet.RatesheetName, Status = rate.ngt_ratesheet.Status, Tag = rate.ngt_ratesheet.Tag, UpdatedBy = rate.ngt_ratesheet.UpdatedBy, ServerRatesheetName = rate.ServerRatesheetName, ServerName = servername });
                    }
                    return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratesheetlist, totalrecords = Ratesheetlist.Count, message = "Records Fetched" });
                }
            }
            catch (Exception ex)
            {
                return RMSCDR.SerializeAndCreateMS(new Response() { status = "false", Message = ex.Message });
            }
            finally
            {

            }
        }
        public Stream ShowRatesheetsforupdate1(int PartitionID, string listid)
        {
            return null;
        }

        public Stream ShowRatesheetstatus(int PartitionID, DateTime fromdate, DateTime todate)
        {
            MySqlConnection conn = new MySqlConnection(ConfigurationManager.ConnectionStrings["rmsconn"].ToString());

            todate = todate.AddDays(1);
            try
            {
                List<ngt_ratesheetstatuslist> Ratesheetlist = new List<ngt_ratesheetstatuslist>();
                MySqlDataReader dr;
                MySqlCommand cmd;
                conn.Open();
                //string query = "SELECT nr.BatchID,nr.CreatedOn,nrs.CreatedBy,nrs.CreationDate,nrs.CurrencyID,nrs.LastUpdatedOn,nrs.Owner,nrs.PartitionID,nrs.RatesheetID,nrs.RatesheetName,nrs.Status,nrs.Tag,nrs.UpdatedBy,srm.ServerRatesheetID,srm.ServerRatesheetName,sd.ServerName FROM ngt_rates nr left join ngt_ratesheet nrs on nr.RatesheetID=nrs.RatesheetID left join  server_ratesheet_map srm on srm.RatesheetID=nrs.RatesheetID and srm.Active=1 left join server_details sd on sd.ServerID=srm.Server_ID where  nr.CreatedOn>='" + String.Format("{0:yyyy-MM-dd HH:mm:00}",fromdate) + "' and  nr.CreatedOn<='" + String.Format("{0:yyyy-MM-dd HH:mm:00}",todate) + "' and nr.ngt_PartitionId=" + PartitionID + " group by nrs.RatesheetID,nr.BatchID,sd.ServerID order by nr.CreatedOn desc";
                //string query = "select RequestType, RatesheetID, RatesheetName, BatchID, ServerID, ServerName, ServerRatesheetID, ServerRatesheetName, DBstatus, ServerStstus, CompleteStatus, UpdatedDate from ratesheetaddupdatestatus rss where rss.updateddate>='" + String.Format("{0:yyyy-MM-dd HH:mm:00}", fromdate) + "' and rss.updateddate<='" + String.Format("{0:yyyy-MM-dd HH:mm:00}", todate) + "' order by rss.ID desc";
                string query = "select jq.ID as ID,jq.RequestID,rss.RequestType, rss.RatesheetID, rss.RatesheetName, BatchID, rss.ServerID, ServerName, ServerRatesheetID, ServerRatesheetName, DBstatus, ServerStstus, CompleteStatus, UpdatedDate,rss.UpdatedBy,rss.Message from ratesheetaddupdatestatus rss left join jobqueue jq on rss.JobsQueueID=jq.ID where rss.updateddate>='" + String.Format("{0:yyyy-MM-dd HH:mm:00}", fromdate) + "' and rss.updateddate<='" + String.Format("{0:yyyy-MM-dd HH:mm:00}", todate) + "' ";
                string query2 = "select jq.ID as ID,jq.RequestID,rss.RequestType, rss.RatesheetID, rss.RatesheetName, BatchID, rss.ServerID, ServerName, ServerRatesheetID, ServerRatesheetName, DBstatus, ServerStstus, CompleteStatus, UpdatedDate,rss.UpdatedBy,rss.Message from ratesheetreplacestatus rss left join jobqueuereplace jq on rss.JobsQueueReplaceID=jq.ID where rss.updateddate>='" + String.Format("{0:yyyy-MM-dd HH:mm:00}", fromdate) + "' and rss.updateddate<='" + String.Format("{0:yyyy-MM-dd HH:mm:00}", todate) + "' ";
                string union = query + " union all " + query2;
                cmd = new MySqlCommand(union, conn);
                cmd.CommandTimeout = 5000000;
                dr = cmd.ExecuteReader();

                //MySqlCommand cmd1 = new MySqlCommand(query2, conn);
                // cmd.CommandTimeout = 5000000;
                // MySqlDataReader dr2 = cmd1.ExecuteReader();
                if (!dr.HasRows)
                {
                    return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "false", records = Ratesheetlist, totalrecords = 0, message = "Records not Fetched" });
                }
                else
                {
                    while (dr.Read())
                    {

                        // string gg = Convert.ToString(dr["ServerRatesheetID"]);
                        Ratesheetlist.Add(new ngt_ratesheetstatuslist()
                        {
                            ID = Convert.ToInt32(dr["ID"]),
                            RequestID = Convert.ToString(dr["RequestID"]),
                            RequestType = Convert.ToString(dr["RequestType"]),
                            RatesheetID = Convert.ToString(dr["RatesheetID"]),
                            RatesheetName = Convert.ToString(dr["RatesheetName"]),
                            BatchID = Convert.ToString(dr["BatchID"]),
                            CompleteStatus = Convert.ToString(dr["CompleteStatus"]),
                            ServerStstus = Convert.ToString(dr["ServerStstus"]),
                            DBstatus = Convert.ToString(dr["DBstatus"]),
                            ServerRatesheetName = Convert.ToString(dr["ServerRatesheetName"]),
                            UpdatedDate = String.Format("{0:yyyy-MM-dd HH:mm:00}", dr["UpdatedDate"]),
                            ServerRatesheetID = Convert.ToString(dr["ServerRatesheetID"]),
                            ServerName = Convert.ToString(dr["ServerName"]),
                            ServerID = Convert.ToString(dr["ServerID"]),
                            UpdatedBy = Convert.ToString(dr["UpdatedBy"]),
                            Message = Convert.ToString(dr["Message"])
                        });
                    }
                    //while (dr2.Read())
                    //{

                    //    // string gg = Convert.ToString(dr["ServerRatesheetID"]);
                    //    Ratesheetlist.Add(new ngt_ratesheetstatuslist() { RequestID = Convert.ToString(dr["RequestID"]), RequestType = Convert.ToString(dr["RequestType"]), RatesheetID = Convert.ToString(dr["RatesheetID"]), RatesheetName = Convert.ToString(dr["RatesheetName"]), BatchID = Convert.ToString(dr["BatchID"]), ServerID = Convert.ToString(dr["ServerID"]), ServerName = Convert.ToString(dr["ServerName"]), ServerRatesheetID = Convert.ToString(dr["ServerRatesheetID"]), ServerRatesheetName = Convert.ToString(dr["ServerRatesheetName"]), UpdatedDate = String.Format("{0:yyyy-MM-dd HH:mm:00}", dr["UpdatedDate"]), DBstatus = Convert.ToString(dr["DBstatus"]), ServerStstus = Convert.ToString(dr["ServerStstus"]), CompleteStatus = Convert.ToString(dr["CompleteStatus"]), UpdatedBy = Convert.ToString(dr["UpdatedBy"]), Message = Convert.ToString(dr["Message"]) });
                    //}
                    Ratesheetlist.OrderByDescending(t => t.ID);
                    return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratesheetlist, totalrecords = Ratesheetlist.Count, message = "Records Fetched" });                                                                                                                                                        //nrs.RatesheetID,nrs.RatesheetName,nrs.Status,nrs.Tag,nrs.UpdatedBy,srm.ServerRatesheetID,srm.ServerRatesheetName,sd.ServerName 
                }
                dr.Dispose();
                cmd.Dispose();
                //  conn.Close();

                //using (rmsEntities rms = new rmsEntities())
                //{
                //    var ratelist = rms.ngt_ratesheet.Where(e => e.PartitionID == PartitionID).ToList();

                //    string CurrencyName = "";
                //    foreach (var rate in ratelist)
                //    {
                //        CurrencyName = rms.financecurrencies.SingleOrDefault(r => r.CurrencyId == rate.CurrencyID).CurrencyName;
                //        Ratesheetlist.Add(new ngt_ratesheetlist() { CreatedBy = rate.CreatedBy, CreationDate = String.Format("{0:yyyy-MM-dd HH:mm:00}", rate.CreationDate), CurrencyID = rate.CurrencyID, CurrencyName = CurrencyName, LastUpdatedOn = String.Format("{0:yyyy-MM-dd HH:mm:00}", rate.LastUpdatedOn), Owner = rate.Owner, PartitionID = rate.PartitionID, RatesheetID = rate.RatesheetID, RatesheetName = rate.RatesheetName, Status = rate.Status, Tag = rate.Tag, UpdatedBy = rate.UpdatedBy, RateSheetRequestId = rate.RateSheetRequestId });
                //    }

                //    return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratesheetlist, totalrecords = Ratesheetlist.Count, message = "Records Fetched" });
                //}
            }
            catch (Exception ex)
            {
                return RMSCDR.SerializeAndCreateMS(new Response() { status = "false", Message = ex.Message });
            }
            finally
            {
                conn.Close();
            }
        }

        //shripal  for windows service

        public List<ratesheetservermap> ViewRatesheetServerMappingfunction(int MappingID, int RatesheetID)
        {
            List<server_ratesheet_map> map = new List<server_ratesheet_map>();
            List<ratesheetservermap> map1 = new List<ratesheetservermap>();
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {

                    if (MappingID == 0)
                    {

                        // map = rms.server_ratesheet_map.Where(d => d.RatesheetID == RatesheetID).ToList();
                        map = rms.server_ratesheet_map.Where(d => d.RatesheetID == RatesheetID && d.ServerRatesheetID.Trim() != "0").ToList();

                    }
                    else
                    {
                        map = rms.server_ratesheet_map.Where(d => d.ID == MappingID).ToList();
                    }

                    if (map.Count > 0)
                    {
                        foreach (var a in map)
                        {
                            map1.Add(new ratesheetservermap() { Active = a.Active, CompanyTypeName = a.sales_company_type.Type_name, Description = a.Description, CreatedByID = a.CreatedByID, CreatedOn = a.CreatedOn, GracePeriod = a.GracePeriod, ID = a.ID, PulseRule = a.PulseRule, RatesheetID = a.RatesheetID, Server_ID = a.Server_ID, ServerName = rms.server_details.SingleOrDefault(d => d.ServerID == a.Server_ID).ServerName, ServerRatesheetID = a.ServerRatesheetID, ServerRatesheetName = a.ServerRatesheetName, UpdatedByID = a.UpdatedByID, UpdatedOn = a.UpdatedOn, CompanyType = a.CompanyType });
                        }

                        return map1;
                        // return new ShowRecords() { status = "true", message = "Records Fetched", records = map1, totalrecords = map1.Count };
                    }
                    else
                    {
                        //   return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "false", message = "Records Not Found", totalrecords = map.Count, records = null });
                        return null;

                    }
                }
            }
            catch (Exception ex)
            {
                UpdateError("ViewRatesheetServerMappingfunction Exception", "" + ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "", false);
                return null;
            }
            finally
            {

            }
        }
        // nexgeApi nxg = new nexgeApi();


        public void UpdateError(string ErrorMessage, string ErrorDescription, string FileName, string Parametersdata, bool Savetodb)
        {
            try
            {
                string FilePath = System.Web.Hosting.HostingEnvironment.MapPath("~/logs/" + FileName);
                System.IO.StreamWriter file1 = File.AppendText(FilePath);
                file1.WriteLine("\r\n" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff") + " ");
                file1.WriteLine(ErrorMessage + " ");
                file1.WriteLine(ErrorDescription + " ");
                file1.WriteLine(Parametersdata + " ");
                file1.Close();
                if (Savetodb)
                {
                    //saving the same parameters also to db.

                }
            }
            catch (Exception ex)
            {

            }
        }

        public static void SendErrorToText(Exception ex, string MethodName)
        {


            try
            {


                StackTrace st = new StackTrace(ex, true);
                // Get the top stack frame

                StackFrame frame = st.GetFrame(0);
                // Get the line number from the stack frame
                var line = frame.GetFileLineNumber();

                string filepath = System.Web.Hosting.HostingEnvironment.MapPath("~/logs/RatesheetMongoDBError/");  //Text File Path

                if (!Directory.Exists(filepath))
                {
                    Directory.CreateDirectory(filepath);

                }
                filepath = filepath + DateTime.Today.ToString("dd-MM-yyyy") + ".txt";   //Text File Name
                if (!File.Exists(filepath))
                {


                    File.Create(filepath).Dispose();

                }
                using (StreamWriter sw = File.AppendText(filepath))
                {
                    string error = "Error Line No :" + line + " \n" + " Error Message :" + ex.Message;
                    if (ex.InnerException != null)
                    {
                        error = error + "\n" + "Inner Exception :" + ex.InnerException.Message;
                    }

                    sw.WriteLine("-----------Exception Details on " + " " + DateTime.Now.ToString() + "-----------------");
                    sw.WriteLine("-----------Method Name " + " " + MethodName + "-----------------");
                    sw.WriteLine("-------------------------------------------------------------------------------------");
                    sw.WriteLine(error);
                    sw.WriteLine("" + ex.StackTrace);
                    sw.WriteLine("--------------------------------*End*------------------------------------------");
                    sw.Flush();
                    sw.Close();

                }

            }
            catch (Exception e)
            {
                CommonLog("Exeption While writing Error Log");
                e.ToString();


            }
        }

        public static void CommonLog(string Message)
        {
            try
            {
                //StreamWriter sw = new StreamWriter(HostingEnvironment.MapPath("~/logs/log.txt"), true);
                string filepath = System.Web.Hosting.HostingEnvironment.MapPath("~/logs/RatesheetMongoDB/");  //Text File Path

                if (!Directory.Exists(filepath))
                {
                    Directory.CreateDirectory(filepath);

                }
                filepath = filepath + DateTime.Today.ToString("dd-MM-yyyy") + "log.txt";   //Text File Name
                if (!File.Exists(filepath))
                {


                    File.Create(filepath).Dispose();

                }
                using (StreamWriter sw = File.AppendText(filepath))
                {
                    sw.WriteLine("-----------Details on " + " " + DateTime.Now.ToString() + "-----------------");
                    sw.WriteLine(Message + "\r\n");
                    sw.Flush();
                    sw.Close();
                }
            }
            catch (Exception ex)
            {

            }


        }

        public static void CommonLogfuture(string Message)
        {
            try
            {
                //StreamWriter sw = new StreamWriter(HostingEnvironment.MapPath("~/logs/log.txt"), true);
                string filepath = System.Web.Hosting.HostingEnvironment.MapPath("~/logs/RatesheetMongoDBError/");  //Text File Path

                if (!Directory.Exists(filepath))
                {
                    Directory.CreateDirectory(filepath);

                }
                filepath = filepath + DateTime.Today.ToString("dd-MM-yyyy") + "log.txt";   //Text File Name
                if (!File.Exists(filepath))
                {


                    File.Create(filepath).Dispose();

                }
                using (StreamWriter sw = File.AppendText(filepath))
                {
                    sw.WriteLine("-----------Details on " + " " + DateTime.Now.ToString() + "-----------------");
                    sw.WriteLine(Message + "\r\n");
                    sw.Flush();
                    sw.Close();
                }

            }
            catch (Exception ex)
            {

            }

        }

        //byShinil
        public SuccessResponse TempUpdateCurrentRate()
        {
            SuccessResponse responsemessage = new SuccessResponse();

            using (rmsEntities rms = new rmsEntities())
            {
                try
                {
                    List<int> ratesheetIds = new List<int>();
                    ratesheetIds = rms.ngt_rates.Select(t => t.RatesheetID).Distinct().ToList();
                    MySqlConnection conn = new MySqlConnection(ConfigurationManager.ConnectionStrings["rmsconn"].ToString());
                    foreach (int k in ratesheetIds)
                    {
                        conn.Open();

                        string sql1 = "insert into ngt_rates_1 select ncr.* from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + k + " and ncr.Active!='N' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' and Active!='N' and RatesheetID=" + k + ")order by nrc.country_code asc";
                        MySqlCommand cmd1 = new MySqlCommand(sql1, conn);
                        int rdr1 = cmd1.ExecuteNonQuery();


                        conn.Close();

                    }
                    responsemessage.status = "success";
                    responsemessage.Message = ratesheetIds.Count + " ratesheets updated.";
                }
                catch (Exception ex)
                {
                    responsemessage.status = "failed";
                    responsemessage.Message = ex.Message;

                }

            }



            return responsemessage;


        }

        //byPasupathi

        // Future Update and Replace in Single Method in Database for Ratesheet
        public SuccessResponse UpdateCurrentRate_old()
        {
            SuccessResponse responsemessage = new SuccessResponse();
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {
                    int updateProgress = rms.rateupdatejobqueues.Where(t => t.JobStatus == "Progress").Count();
                    if (updateProgress <= 0)
                    {
                        rateupdatejobqueue updatePending = rms.rateupdatejobqueues.Where(t => t.JobStatus == "Pending" && t.Effective_on <= DateTime.Now).OrderBy(t => t.Effective_on).ThenBy(t => t.Created_on).FirstOrDefault();



                        if (updatePending != null)
                        {
                            updatePending.JobStatus = "Progress";
                            rms.SaveChanges();
                            string rateTable = "";
                            DateTime dt = (DateTime)updatePending.Effective_on;
                            string EffectiveDate = dt.ToString("yyyy-MM-dd HH:mm:ss");
                            MySqlConnection conn = new MySqlConnection(ConfigurationManager.ConnectionStrings["rmsconn"].ToString());
                            int rdr21 = 0;
                            try
                            {
                                // Delete Old batch Record ngt_rates_1
                                if (updatePending.RequestType.ToUpper() == "REPLACEDELETE".ToUpper())
                                {
                                    try
                                    {
                                        conn.Open();
                                        string SqlDeleteQuery = "delete from  ngt_rates_1  where  ngt_region_codeId not in(select * from (select ngt_region_codeId from ngt_rates where RatesheetID=" + updatePending.RateSheetId + " and BatchID=" + updatePending.BatchId + ") as k) and RatesheetID=" + updatePending.RateSheetId + "";
                                        UpdateError("Delete ngt_rates1 Method After Delete Old Batch rdr1>0 :", "", "updateRate.txt", " Delete Batch Query:" + SqlDeleteQuery, false);
                                        MySqlCommand cmddelete = new MySqlCommand(SqlDeleteQuery, conn);
                                        int rdrdelete = cmddelete.ExecuteNonQuery();
                                        conn.Close();

                                        UpdateError("Delete ngt_rates1 Method After Delete Old Batch rdr1>0 : Completed", "", "updateRate.txt", "", false);
                                    }
                                    catch (Exception ex)
                                    {
                                        if (conn.State == ConnectionState.Open)
                                            conn.Close();

                                        UpdateError("Delete ngt_rates1 Method After Delete Old Batch rdr1>0 : Error", "", "updateRate.txt", ex.Message, false);
                                    }
                                }

                                else
                                {

                                    rateTable = "ngt_rates_1";

                                    conn.Open();
                                    string sql2 = " delete from " + rateTable + " where RatesheetID=" + updatePending.RateSheetId + " and ngt_region_codeId in(select * from (select ngt_region_codeId from ngt_rates where RatesheetID=" + updatePending.RateSheetId + " and BatchID=" + updatePending.BatchId + " and Effective_on<='" + EffectiveDate + "') as k);";
                                    MySqlCommand cmd2 = new MySqlCommand(sql2, conn);
                                    int rdr2 = cmd2.ExecuteNonQuery();
                                    conn.Close();


                                    conn.Open();
                                    string sql21 = "INSERT INTO " + rateTable + "  select * from ngt_rates where RatesheetID=" + updatePending.RateSheetId + " and BatchID=" + updatePending.BatchId + " and Effective_on<='" + EffectiveDate + "';";
                                    MySqlCommand cmd21 = new MySqlCommand(sql21, conn);
                                    rdr21 = cmd21.ExecuteNonQuery();
                                    conn.Close();

                                    UpdateError("UpdateCurrentRate Method After Complete  rdr1>0 :", " Insert Query:" + sql21, "updateRate.txt", " Delete Batch Query:" + sql2, false);


                                }


                                // Ngt_rates_2 operation dont want For Genband Operation (Pasupathi)

                                //  // Update Old batch Record ngt_rates_2
                                if (updatePending.RequestType.ToUpper() == "REPLACEDELETE".ToUpper())
                                {
                                    try
                                    {
                                        conn.Open();
                                        string SqlDeleteQuery = "delete from  ngt_rates_2  where  ngt_region_codeId not in(select * from (select ngt_region_codeId from ngt_rates where RatesheetID=" + updatePending.RateSheetId + " and BatchID=" + updatePending.BatchId + ") as k) and RatesheetID=" + updatePending.RateSheetId + "";
                                        UpdateError("Delete ngt_rates2 Method After Delete Old Batch rdr1>0 :", "", "updateRate.txt", " Delete Batch Query:" + SqlDeleteQuery, false);

                                        MySqlCommand cmddelete = new MySqlCommand(SqlDeleteQuery, conn);
                                        int rdrdelete = cmddelete.ExecuteNonQuery();

                                        conn.Close();
                                        UpdateError("Delete ngt_rates2 Method After Delete Old Batch rdr1>0 Completed :", "", "updateRate.txt", " ", false);
                                    }
                                    catch (Exception ex)
                                    {
                                        if (conn.State == ConnectionState.Open)
                                            conn.Close();

                                        UpdateError("Delete ngt_rates2 Method After Delete Old Batch rdr1>0 Error :", "", "updateRate.txt", ex.Message, false);
                                    }

                                }
                                else
                                {

                                    rateTable = "ngt_rates_2";

                                    conn.Open();
                                    string sql3 = " delete from " + rateTable + " where RatesheetID=" + updatePending.RateSheetId + " and ngt_region_codeId in(select * from (select ngt_region_codeId from ngt_rates where RatesheetID=" + updatePending.RateSheetId + " and BatchID=" + updatePending.BatchId + " and Effective_on<='" + EffectiveDate + "') as k);";
                                    MySqlCommand cmd3 = new MySqlCommand(sql3, conn);
                                    int rdr3 = cmd3.ExecuteNonQuery();
                                    conn.Close();

                                    conn.Open();
                                    string sql31 = "INSERT INTO " + rateTable + "  select * from ngt_rates where RatesheetID=" + updatePending.RateSheetId + " and BatchID=" + updatePending.BatchId + " and Effective_on<='" + EffectiveDate + "';";
                                    MySqlCommand cmd31 = new MySqlCommand(sql31, conn);
                                    int rdr31 = cmd31.ExecuteNonQuery();
                                    conn.Close();

                                    UpdateError("UpdateCurrentRate ngt_rates2 Method After Complete  rdr1>0 :", " Insert Query:" + sql31, "updateRate.txt", " Delete Batch Query:" + sql3, false);

                                }


                                responsemessage.Message = rdr21 + " rates updated";
                                responsemessage.status = "Success";
                            }
                            catch (Exception ex)
                            {
                                if (conn.State == ConnectionState.Open)
                                    conn.Close();

                                UpdateError(" Step 1 updating rates in ngt_rates_1 and ngt_rates_2 Error" + ex.Message + "\n" + ex.InnerException, "res.status" + ex.Source, "updateRate.txt", "", false);
                                responsemessage.Message = ex.Message;
                                responsemessage.status = "Failure";
                            }
                            rms.rateupdatejobqueues.Remove(updatePending);
                            rms.SaveChanges();


                            // }
                            string sql4 = "";
                            try
                            {
                                if (updatePending != null)
                                {
                                    conn.Open();
                                    sql4 = "insert into rateupdatejobqueuecomplete(JobStatus,PartitionID,RateSheetId,RequestType,BatchId,Effective_on,Created_on,AppliedDate) values('Complete','" + updatePending.PartitionID + "','" + updatePending.RateSheetId + "','" + updatePending.RequestType + "','" + updatePending.BatchId + "','" + Convert.ToDateTime(updatePending.Effective_on).ToString("yyyy-MM-dd HH:mm:ss") + "','" + Convert.ToDateTime(updatePending.Created_on).ToString("yyyy-MM-dd HH:mm:ss") + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                                    MySqlCommand cmd4 = new MySqlCommand(sql4, conn);
                                    int rdr4 = cmd4.ExecuteNonQuery();
                                    conn.Close();

                                    UpdateError("Insert rateupdatejobqueuecomplete dr>0 Complete :", "", "updateRate.txt", "", false);
                                }
                            }
                            catch (Exception ex)
                            {
                                if (conn.State == ConnectionState.Open)
                                    conn.Close();

                                UpdateError(" Step 2Insert rateupdatejobqueuecomplete dr>0 Error :" + ex.Message + "\n" + ex.InnerException, "res.status" + ex.Source + " Query:" + sql4, "updateRate.txt", "", false);
                            }

                        }

                        else
                        {
                            var oldupdatepending = rms.oldnexgeupdatepushjobqueues.Where(t => t.EffectiveOn < DateTime.Now.AddDays(1)).OrderBy(t => t.EffectiveOn).ThenBy(t => t.EffectiveOn).FirstOrDefault();
                            if (oldupdatepending != null)
                                responsemessage = oldnexgeFutureUpdate(oldupdatepending);

                            if (responsemessage.status == "success")

                                oldupdatepending.JobStatus = "Complete";
                            else
                                oldupdatepending.JobStatus = "Failure";

                            rms.SaveChanges();

                            responsemessage.Message = "No Records Found";
                            responsemessage.status = "Success";
                        }
                    }
                }
            }
            catch (Exception ex)
            {


                UpdateError("Step Final updating rates in ngt_rates_1 and ngt_rates_2 Error Method" + ex.Message + "\n" + ex.InnerException, "res.status" + ex.Source, "updateRate.txt", "", false);
                responsemessage.Message = ex.Message;
                responsemessage.status = "Failure";
            }

            return responsemessage;
        }


        //byPasupathi

        // Future Update and Replace in Single Method in Database for Ratesheet
        public SuccessResponse UpdateCurrentRate()
        {
            SuccessResponse responsemessage = new SuccessResponse();
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {
                    int updateProgress = rms.rateupdatejobqueues.Where(t => t.JobStatus == "Progress").Count();
                    if (updateProgress <= 0)
                    {

                        //rateupdatejobqueue updatePending = rms.rateupdatejobqueues.Where(t => t.JobStatus == "Pending" && t.Effective_on <= DateTime.Now).OrderByDescending(t => t.Effective_on).ThenBy(t => t.Created_on).FirstOrDefault();

                        rateupdatejobqueue updatePending = rms.rateupdatejobqueues.Where(t => t.JobStatus == "Pending" && t.Effective_on <= DateTime.Now).OrderBy(t => t.Effective_on).ThenBy(t => t.Created_on).FirstOrDefault();

                        // Pasupathi Corrected for veryfying Ratesheet

                        //rateupdatejobqueue updatePending = rms.rateupdatejobqueues.Where(t => t.JobStatus == "Pending" && t.Effective_on <= DateTime.Now).FirstOrDefault();



                        if (updatePending != null)
                        {
                            updatePending.JobStatus = "Progress";
                            rms.SaveChanges();
                            string rateTable = "";
                            DateTime dt = (DateTime)updatePending.Effective_on;
                            string EffectiveDate = dt.ToString("yyyy-MM-dd HH:mm:ss");
                            MySqlConnection conn = new MySqlConnection(ConfigurationManager.ConnectionStrings["rmsconn"].ToString());
                            int rdr21 = 0;
                            try
                            {
                                // Delete Old batch Record ngt_rates_1

                                if (updatePending.RequestType.ToUpper() == "ADD".ToUpper())
                                {
                                    #region Add
                                    try
                                    {
                                        rateTable = "ngt_rates_1";
                                        MySqlCommand cmd21 = new MySqlCommand();
                                        conn.Open();

                                        string sql21 = "INSERT INTO " + rateTable + "  select * from ngt_rates where RatesheetID=" + updatePending.RateSheetId + " and BatchID=" + updatePending.BatchId + " and Effective_on='" + EffectiveDate + "';";
                                        cmd21 = new MySqlCommand(sql21, conn);
                                        rdr21 = cmd21.ExecuteNonQuery();
                                        conn.Close();
                                        UpdateError("UpdateCurrentRate Method After Add Complete  rdr1>0 :", " Insert Query:" + sql21, "updateRate.txt", "", false);
                                    }
                                    catch (Exception ex)
                                    {
                                        UpdateError("UpdateCurrentRate Method After Add Complete Error Message", " Error Message:" + ex.Message, "updateRate.txt", "", false);
                                    }
                                    #endregion

                                }
                                else if (updatePending.RequestType.ToUpper() == "REPLACEDELETE".ToUpper())
                                {
                                    #region ReplaceDelete

                                    try
                                    {
                                        conn.Open();

                                        ////string SqlDeleteQuery = "delete from  ngt_rates_1  where  ngt_region_codeId not in(select * from (select ngt_region_codeId from ngt_rates where RatesheetID=" + updatePending.RateSheetId + " and BatchID=" + updatePending.BatchId + " and Effective_on ='" + updatePending.Effective_on + "') as k) and RatesheetID=" + updatePending.RateSheetId + "";

                                        string SqlDeleteQuery = "delete from  ngt_rates_1  where  ngt_region_codeId not in(select * from (select ngt_region_codeId from ngt_rates where RatesheetID=" + updatePending.RateSheetId + " and BatchID=" + updatePending.BatchId + ") as k) and RatesheetID=" + updatePending.RateSheetId + "";

                                        UpdateError("Delete ngt_rates1 Method After Delete Old Batch rdr1>0 :", "", "updateRate.txt", " Delete Batch Query:" + SqlDeleteQuery, false);
                                        MySqlCommand cmddelete = new MySqlCommand(SqlDeleteQuery, conn);
                                        int rdrdelete = cmddelete.ExecuteNonQuery();
                                        conn.Close();

                                        UpdateError("Delete ngt_rates1 Method After Delete Old Batch rdr1>0 : Completed", "", "updateRate.txt", "", false);

                                    }
                                    catch (Exception ex)
                                    {
                                        if (conn.State == ConnectionState.Open)
                                            conn.Close();

                                        UpdateError("Delete ngt_rates1 Method After Delete Old Batch rdr1>0 : Error", "", "updateRate.txt", ex.Message, false);
                                    }
                                    #endregion
                                }
                                else
                                {

                                    #region update ngt_rates_1 and Trasnsaction Applied

                                    MySqlTransaction tr = null;
                                    MySqlCommand cmd2 = new MySqlCommand();
                                    try

                                    {
                                        rateTable = "ngt_rates_1";
                                        conn.Open();
                                        tr = conn.BeginTransaction();
                                        //string sql2 = " delete from " + rateTable + " where RatesheetID=" + updatePending.RateSheetId + " and ngt_region_codeId in(select * from (select ngt_region_codeId from ngt_rates where RatesheetID=" + updatePending.RateSheetId + " and BatchID=" + updatePending.BatchId + " and Effective_on <='" + EffectiveDate + "') as k);";
                                        string sql2 = " delete from " + rateTable + " where RatesheetID=" + updatePending.RateSheetId + " and ngt_region_codeId in(select * from (select ngt_region_codeId from ngt_rates where RatesheetID=" + updatePending.RateSheetId + " and BatchID=" + updatePending.BatchId + " and Effective_on ='" + EffectiveDate + "') as k);";
                                        cmd2 = new MySqlCommand(sql2, conn);
                                        int rdr2 = cmd2.ExecuteNonQuery();

                                        // conn.Close();
                                        //  conn.Open();

                                        string sql21 = "INSERT INTO " + rateTable + "  select * from ngt_rates where RatesheetID=" + updatePending.RateSheetId + " and BatchID=" + updatePending.BatchId + " and Effective_on='" + EffectiveDate + "';";
                                        cmd2 = new MySqlCommand(sql21, conn);
                                        rdr21 = cmd2.ExecuteNonQuery();

                                        // conn.Close();

                                        tr.Commit();
                                        cmd2.Dispose();

                                        UpdateError("UpdateCurrentRate Method After Complete  rdr1>0 :", " Insert Query:" + sql21, "updateRate.txt", " Delete Batch Query:" + sql2, false);
                                    }
                                    catch (Exception ex)
                                    {
                                        tr.Rollback();
                                        UpdateError("UpdateCurrentRate Method After Insert Error ngt_rates_1 :", " Error Message:" + ex.Message, "updateRate.txt", "", false);
                                    }
                                    finally
                                    {
                                        conn.Close();
                                    }
                                    #endregion
                                }

                                #region Comment ngt_rates_2 update

                                // // Ngt_rates_2 operation dont want For Genband Operation (Pasupathi)

                                //  // Update Old batch Record ngt_rates_2
                                //if (updatePending.RequestType.ToUpper() == "REPLACEDELETE".ToUpper())
                                //{
                                //    try
                                //    {
                                //        conn.Open();
                                //        string SqlDeleteQuery = "delete from  ngt_rates_2  where  ngt_region_codeId not in(select * from (select ngt_region_codeId from ngt_rates where RatesheetID=" + updatePending.RateSheetId + " and BatchID=" + updatePending.BatchId + ") as k) and RatesheetID=" + updatePending.RateSheetId + "";
                                //        UpdateError("Delete ngt_rates2 Method After Delete Old Batch rdr1>0 :", "", "updateRate.txt", " Delete Batch Query:" + SqlDeleteQuery, false);

                                //        MySqlCommand cmddelete = new MySqlCommand(SqlDeleteQuery, conn);
                                //        int rdrdelete = cmddelete.ExecuteNonQuery();

                                //        conn.Close();
                                //        UpdateError("Delete ngt_rates2 Method After Delete Old Batch rdr1>0 Completed :", "", "updateRate.txt", " ", false);
                                //    }
                                //    catch (Exception ex)
                                //    {
                                //        if (conn.State == ConnectionState.Open)
                                //            conn.Close();

                                //        UpdateError("Delete ngt_rates2 Method After Delete Old Batch rdr1>0 Error :", "", "updateRate.txt", ex.Message, false);
                                //    }

                                //}
                                //else
                                //{

                                //    rateTable = "ngt_rates_2";

                                //    conn.Open();
                                //    string sql3 = " delete from " + rateTable + " where RatesheetID=" + updatePending.RateSheetId + " and ngt_region_codeId in(select * from (select ngt_region_codeId from ngt_rates where RatesheetID=" + updatePending.RateSheetId + " and BatchID=" + updatePending.BatchId + " and Effective_on<='" + EffectiveDate + "') as k);";
                                //    MySqlCommand cmd3 = new MySqlCommand(sql3, conn);
                                //    int rdr3 = cmd3.ExecuteNonQuery();
                                //    conn.Close();

                                //    conn.Open();
                                //    string sql31 = "INSERT INTO " + rateTable + "  select * from ngt_rates where RatesheetID=" + updatePending.RateSheetId + " and BatchID=" + updatePending.BatchId + " and Effective_on<='" + EffectiveDate + "';";
                                //    MySqlCommand cmd31 = new MySqlCommand(sql31, conn);
                                //    int rdr31 = cmd31.ExecuteNonQuery();
                                //    conn.Close();

                                //    UpdateError("UpdateCurrentRate ngt_rates2 Method After Complete  rdr1>0 :", " Insert Query:" + sql31, "updateRate.txt", " Delete Batch Query:" + sql3, false);

                                //}

                                #endregion

                                responsemessage.Message = rdr21 + " rates updated";
                                responsemessage.status = "Success";
                            }
                            catch (Exception ex)
                            {
                                if (conn.State == ConnectionState.Open)
                                    conn.Close();

                                UpdateError(" Step 1 updating rates in ngt_rates_1 and ngt_rates_2 Error" + ex.Message + "\n" + ex.InnerException, "res.status" + ex.Source, "updateRate.txt", "", false);
                                responsemessage.Message = ex.Message;
                                responsemessage.status = "Failure";
                            }
                            rms.rateupdatejobqueues.Remove(updatePending);
                            rms.SaveChanges();

                            #region InsertComplete

                            string sql4 = "";
                            try
                            {
                                if (updatePending != null)
                                {
                                    conn.Open();
                                    sql4 = "insert into rateupdatejobqueuecomplete(JobStatus,PartitionID,RateSheetId,RequestType,BatchId,Effective_on,Created_on,AppliedDate) values('Complete','" + updatePending.PartitionID + "','" + updatePending.RateSheetId + "','" + updatePending.RequestType + "','" + updatePending.BatchId + "','" + Convert.ToDateTime(updatePending.Effective_on).ToString("yyyy-MM-dd HH:mm:ss") + "','" + Convert.ToDateTime(updatePending.Created_on).ToString("yyyy-MM-dd HH:mm:ss") + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "')";
                                    MySqlCommand cmd4 = new MySqlCommand(sql4, conn);
                                    int rdr4 = cmd4.ExecuteNonQuery();
                                    conn.Close();

                                    UpdateError("Insert rateupdatejobqueuecomplete dr>0 Complete :", "", "updateRate.txt", "", false);
                                }
                            }
                            catch (Exception ex)
                            {
                                if (conn.State == ConnectionState.Open)
                                    conn.Close();

                                UpdateError(" Step 2Insert rateupdatejobqueuecomplete dr>0 Error :" + ex.Message + "\n" + ex.InnerException, "res.status" + ex.Source + " Query:" + sql4, "updateRate.txt", "", false);
                            }
                            #endregion

                        }

                        else
                        {
                            #region OldNexgeUpdate
                            try
                            {
                                var oldupdatependingprogress = rms.oldnexgeupdatepushjobqueues.Where(t => t.JobStatus == "Progress").Count();
                                if (oldupdatependingprogress <= 0)
                                {
                                    // DateTime Today = DateTime.Now.AddDays(1);
                                    var oldupdatepending = rms.oldnexgeupdatepushjobqueues.Where(t => t.EffectiveOn < DateTime.Now & t.JobStatus == "Pending").OrderBy(t => t.EffectiveOn).ThenBy(t => t.EffectiveOn).FirstOrDefault();

                                    if (oldupdatepending != null)
                                    {
                                        oldupdatepending.JobStatus = "Progress";
                                        responsemessage = oldnexgeFutureUpdate(oldupdatepending);
                                    }

                                    if (responsemessage.status == "success")

                                        oldupdatepending.JobStatus = "Complete";
                                    else
                                        oldupdatepending.JobStatus = "Failure";

                                    rms.SaveChanges();

                                    responsemessage.Message = "No Records Found";
                                    responsemessage.status = "Success";
                                }
                            }
                            catch (Exception ex)
                            {
                                UpdateError("Error Method For Old Nexge Update Future." + ex.Message + "\n" + ex.InnerException, "res.status" + ex.Source, "updateRate.txt", "", false);
                            }
                            #endregion
                        }
                    }
                }
            }
            catch (Exception ex)
            {


                UpdateError("Step Final updating rates in ngt_rates_1 and ngt_rates_2 Error Method" + ex.Message + "\n" + ex.InnerException, "res.status" + ex.Source, "updateRate.txt", "", false);
                responsemessage.Message = ex.Message;
                responsemessage.status = "Failure";
            }

            return responsemessage;
        }
        //By Pasupathi 


        public SuccessResponse windowsserviceprintForReplace()
        {
            SuccessResponse responsemessage = new SuccessResponse();
            jobqueuereplace record = new jobqueuereplace();
            jobqueuereplace job = new jobqueuereplace();
            try
            {
                //  List<jobqueue> joblist = new List<jobqueue>();


                using (rmsEntities rms = new rmsEntities())
                {
                    var jobProgresslist = rms.jobqueues.Where(d => d.JobStatus == "Progress").FirstOrDefault();

                    if (jobProgresslist == null)
                    {

                        job = rms.jobqueuereplaces.Where(d => d.JobStatus == "Pending" && d.HitTry <= 3).OrderBy(e => e.ID).FirstOrDefault();


                        if (job != null)
                        {

                            record = rms.jobqueuereplaces.Where(d => d.ID == job.ID).FirstOrDefault();
                            record.JobStatus = "Progress";
                            record.HitTry = record.HitTry + 1;
                            rms.SaveChanges();
                            UpdateError("windowsserviceprintForReplace Method Job ID : " + job.ID, "Start Date Time : " + DateTime.Now.ToString(), "RatesheetLogs.txt", "", false);
                            try
                            {

                                if (record.RequestType == "Replace")
                                    responsemessage = ReplaceRatesToDBandServerNew(Convert.ToInt32(record.RateSheetId), record.FileNameCSV, Convert.ToString(record.PartitionID), record.ID, record.EndDate, record.FileNameCSV);



                                if (responsemessage.status == "true")
                                {
                                    record.JobStatus = "Complete";
                                    rms.SaveChanges();
                                }
                                else
                                {

                                    record.JobStatus = "Failure";
                                    rms.SaveChanges();
                                }
                            }
                            catch (Exception ex)
                            {
                                UpdateError("Exception : " + ex.Message, ex.InnerException.Message, "RatesheetLogs.txt", "", false);
                                record.JobStatus = "Failure";
                                rms.SaveChanges();
                            }


                            responsemessage.Message = responsemessage.Message + " " + DateTime.Now.ToString();
                            UpdateError("Status : " + responsemessage.status, " Message : " + responsemessage.Message, "RatesheetLogs.txt", "", false);

                        }
                    }


                }
            }
            catch (Exception ex)
            {
                //using (rmsEntities rms = new rmsEntities())
                //{
                //    record = rms.jobqueuereplaces.Where(d => d.ID == job.ID).FirstOrDefault();
                //    record.JobStatus = "Failure";

                //    rms.SaveChanges();
                //}
                UpdateError("windowsserviceprintreplace function exception error " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "", false);
                //  UpdateError("UpdateRatesToDBandServer function  filename", NewFleName2 + " LOAD DATA INFILE successfully", "RatesheetLogs.txt", "", false);
                responsemessage.status = "false";
                responsemessage.Message = ex.Message;
            }

            return responsemessage;

        }

        public SuccessResponse windowsserviceprint()
        {

            SuccessResponse responsemessage = new SuccessResponse();

            try
            {
                using (rmsEntities rms = new rmsEntities())
                {
                    var jobProgresslist = rms.jobqueues.Where(d => d.JobStatus == "Progress").FirstOrDefault();
                    if (jobProgresslist == null)
                    {
                        var jobDelaylist = rms.jobqueues.Where(d => d.JobStatus == "Delay").FirstOrDefault();
                        if (jobDelaylist == null)
                        {
                            var job = rms.jobqueues.Where(d => d.JobStatus == "Pending").OrderBy(e => e.ID).FirstOrDefault();

                            if (job != null)
                            {
                                var record = rms.jobqueues.Where(d => d.ID == job.ID).FirstOrDefault();

                                #region check mapping/New
                                string[] RatesheetType = { "New", "Mapping" };
                                var jobnewmap = rms.jobqueues.Where(d => d.JobStatus == "Pending" & RatesheetType.Contains(d.RequestType)).OrderBy(e => e.ID).FirstOrDefault();

                                if (jobnewmap != null)
                                    record = rms.jobqueues.Where(d => d.ID == jobnewmap.ID).FirstOrDefault();
                                else
                                    record = rms.jobqueues.Where(d => d.ID == job.ID).FirstOrDefault();
                                #endregion

                                if (record != null)
                                {
                                    #region Condition checking
                                    Int32 varRateSheetId = 0;
                                    string varPartitionID = null, varFileNameCSV = null;
                                    Int32 varRecordID = 0;
                                    try { varRateSheetId = Convert.ToInt32(record.RateSheetId); }
                                    catch (Exception ex) { UpdateError("", " Message : Convert.ToInt32(record.RateSheetId) issue" + ex.Message + ex.InnerException, "RatesheetLogs.txt", "", false); }
                                    try { varPartitionID = Convert.ToString(record.PartitionID); }
                                    catch (Exception ex) { UpdateError("", " Message : Convert.ToString(record.PartitionID) issue" + ex.Message + ex.InnerException, "RatesheetLogs.txt", "", false); }
                                    try { varRecordID = Convert.ToInt32(record.ID); }
                                    catch (Exception ex) { UpdateError("", " Message : varRecordID issue" + ex.Message + ex.InnerException, "RatesheetLogs.txt", "", false); }
                                    try { varFileNameCSV = Convert.ToString(record.FileNameCSV); }
                                    catch (Exception ex) { UpdateError("", " Message : varFileNameCSV issue" + ex.Message + ex.InnerException, "RatesheetLogs.txt", "", false); }

                                    #endregion

                                    if (varRateSheetId != 0 && varRecordID != 0 && varPartitionID != null)
                                    {
                                        record.JobStatus = "Progress";
                                        record.HitTry = record.HitTry + 1;
                                        rms.SaveChanges();
                                        UpdateError("Job ID : " + job.ID, "Start Date Time : " + DateTime.Now.ToString(), "RatesheetLogs.txt", "", false);
                                        try
                                        {
                                            #region OperationDatabase
                                            if (record.RequestType == "Update" && varFileNameCSV != null)
                                                responsemessage = UpdateRatesToDBandServer(varRateSheetId, record.FileNameCSV, varPartitionID, varRecordID, record.ServerNameCSV);
                                            else if (record.RequestType == "New" && varFileNameCSV != null)
                                                responsemessage = InsertRatesToDB(varRateSheetId, record.FileNameCSV, varPartitionID, varRecordID);
                                            else if (record.RequestType == "Replace" && varFileNameCSV != null)
                                            {
                                                UpdateError("windowsserviceprint Method Replace", "Request Type=Replace", "RatesheetLogs.txt", " Csv Name:" + record.FileNameCSV + " ,ID:" + record.ID + " ,EndDate:" + record.EndDate + " ,RatesheetId:" + Convert.ToInt32(record.RateSheetId) + " ,ServerCsv:" + record.ServerNameCSV, false);
                                                // responsemessage = ReplaceRatesToDBandServer(varRateSheetId, record.FileNameCSV, varPartitionID, varRecordID);
                                                responsemessage = ReplaceRatesToDBandServerNew(Convert.ToInt32(record.RateSheetId), record.FileNameCSV, Convert.ToString(record.PartitionID), record.ID, record.EndDate, record.ServerNameCSV);
                                            }
                                            else if (record.RequestType == "Mapping")
                                            {
                                                var reccreatedon = rms.jobqueues.Where(a => a.RateSheetId == record.RateSheetId && a.RequestType == "New").FirstOrDefault();
                                                #region add minutes
                                                // int x = Convert.ToInt32(Convert.ToDateTime(record.CreatedOn).ToString("mm")) / 10;
                                                int x = Convert.ToInt16(Convert.ToDateTime(reccreatedon.CreatedOn).ToString("mm").Substring(1, 1));
                                                int y = 0;
                                                switch (x)
                                                {
                                                    case 1:
                                                        y = 9;
                                                        break;
                                                    case 8:
                                                        y = 7;
                                                        break;
                                                    case 2:
                                                        y = 8;
                                                        break;
                                                    case 3:
                                                        y = 7;
                                                        break;
                                                    case 4:
                                                        y = 11;
                                                        break;
                                                    case 5:
                                                        y = 10;
                                                        break;
                                                    case 6:
                                                        y = 11;
                                                        break;
                                                    case 7:
                                                        y = 8;
                                                        break;
                                                    case 9:
                                                        y = 11;
                                                        break;

                                                    default:
                                                        y = 10;
                                                        break;
                                                }

                                                string effectiveon = Convert.ToDateTime(reccreatedon.CreatedOn).AddMinutes(y).ToString("yyyy-MM-dd HH:mm:ss");

                                                #endregion
                                                responsemessage = ServerPushingwithMapping(varRateSheetId, Convert.ToInt32(record.ServerId), Convert.ToString(record.PulseRule), Convert.ToInt32(record.GracePeriod), Convert.ToString(record.ServerRatesheetNmae), Convert.ToString(record.Descriptions), Convert.ToBoolean(record.Active), Convert.ToInt32(record.CompanyType), Convert.ToInt32(record.PartitionID), varRecordID, record.ServerNameCSV, effectiveon);
                                            }
                                            else
                                            {
                                                responsemessage.status = "false";
                                                UpdateError("RequestType not match" + record.RequestType, "", "RatesheetLogs.txt", "", false);
                                            }
                                            #endregion

                                            #region Condition
                                            if (responsemessage.status == "true")
                                            {
                                                record.JobStatus = "Complete";
                                                rms.SaveChanges();
                                            }
                                            else if (responsemessage.status == "Delay")
                                            {
                                                record.JobStatus = "Delay";
                                                string date = string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now);
                                                record.Status = date;
                                                rms.SaveChanges();

                                                ratesheetaddupdatestatu ratestatus = rms.ratesheetaddupdatestatus.Where(m => m.JobsQueueID == record.ID).FirstOrDefault();
                                                ratestatus.Message = responsemessage.Message;
                                                rms.SaveChanges();
                                            }
                                            else
                                            {
                                                record.JobStatus = "Failure";
                                                rms.SaveChanges();
                                                try
                                                {
                                                    ratesheetaddupdatestatu recordstatus = rms.ratesheetaddupdatestatus.Where(d => d.JobsQueueID == record.ID).FirstOrDefault();
                                                    recordstatus.CompleteStatus = "Failure";
                                                    rms.SaveChanges();
                                                }
                                                catch (Exception ex1)
                                                {
                                                    UpdateError("Exception responsemessage.status fail : " + ex1.Message + "\n" + ex1.InnerException, ex1.StackTrace, "RatesheetLogs.txt", "", false);
                                                }
                                            }
                                            #endregion
                                        }
                                        catch (Exception ex)
                                        {
                                            UpdateError("Exception : " + ex.Message, ex.StackTrace + "\n" + ex.InnerException, "RatesheetLogs.txt", "", false);
                                            record.JobStatus = "Failure";
                                            rms.SaveChanges();
                                            try
                                            {
                                                ratesheetaddupdatestatu recordstatus = rms.ratesheetaddupdatestatus.Where(d => d.JobsQueueID == record.ID).FirstOrDefault();
                                                recordstatus.CompleteStatus = "Failure";
                                                rms.SaveChanges();
                                            }
                                            catch (Exception ex1)
                                            {
                                                UpdateError("Exception ratesheetaddupdatestatus : " + ex1.Message, ex1.StackTrace + "\n" + ex.InnerException, "RatesheetLogs.txt", "", false);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        UpdateError("varRateSheetId varRecordID varPartitionID has null value", "", "RatesheetLogs.txt", "", false);
                                    }
                                }
                                else
                                {
                                    UpdateError("", " Message : Record not found", "RatesheetLogs.txt", "", false);
                                }
                                responsemessage.Message = responsemessage.Message + " " + DateTime.Now.ToString();
                                UpdateError("Status : " + responsemessage.status, " Message : " + responsemessage.Message, "RatesheetLogs.txt", "", false);
                            }
                        }//delay
                        else
                        {
                            #region Delay
                            string date = string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now);
                            DateTime dtim = Convert.ToDateTime(jobDelaylist.Status);
                            DateTime newdtim = dtim.AddMinutes(Convert.ToInt32(ConfigurationManager.AppSettings["DelayMinute"]));
                            int numberofhit = Convert.ToInt32(ConfigurationManager.AppSettings["RatesheetHit"]);
                            if (DateTime.Now > newdtim && jobDelaylist.HitTry <= numberofhit)
                            {
                                jobDelaylist.JobStatus = "Pending";
                                //  jobDelaylist.HitTry = jobDelaylist.HitTry + 1;
                                jobDelaylist.Status = null;
                                rms.SaveChanges();
                            }
                            else if (jobDelaylist.HitTry > numberofhit)
                            {
                                jobDelaylist.JobStatus = "Failure";
                                //  jobDelaylist.HitTry = jobDelaylist.HitTry + 1;
                                jobDelaylist.Status = null;
                                rms.SaveChanges();

                                var ratestatus = rms.ratesheetaddupdatestatus.Where(m => m.JobsQueueID == jobDelaylist.ID).FirstOrDefault();
                                ratestatus.CompleteStatus = "Failure";
                                rms.SaveChanges();
                            }
                            #endregion
                        }
                    }//progress
                }
            }
            catch (Exception ex)
            {
                UpdateError("windowsserviceprint function exception error " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", DateTime.Now.ToString(), false);
                responsemessage.status = "false";
                responsemessage.Message = ex.Message;
            }
            return responsemessage;
        }

        public SuccessResponse Windowsserviceprintparrellel()
        {
            SuccessResponse respos = new SuccessResponse();
            SuccessResponse responsemessage = new SuccessResponse();
            SuccessResponse response11 = new SuccessResponse();
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {
                    var job = rms.serverpushjobqueues.Where(d => d.JobStatus.ToUpper() == "PENDING" && d.RequestType.ToUpper() == "UPDATE").FirstOrDefault();

                    if (job != null)
                    {

                        var record = rms.serverpushjobqueues.Where(d => d.ID == job.ID).FirstOrDefault();
                        if (record != null)
                        {
                            record.JobStatus = "Progress";
                            record.HitTry = record.HitTry + 1;
                            rms.SaveChanges();

                            if (record.RequestType == "Update" && record.FileNameCSV != null)
                            {
                                int y = 0;
                                List<ratesheetservermap> list = new List<ratesheetservermap>();
                                list = ViewRatesheetServerMappingfunction(0, Convert.ToInt32(record.RateSheetId));
                                if (list != null)
                                {
                                    if (list.Count > 0)
                                    {
                                        UpdateError("UpdateRatesheetServer List Count Server  ", list.Count.ToString(), "ParellelRatesheetLogsy.txt", " RatesheetId:" + record.RateSheetId.ToString(), false);
                                        dynamic NewResponse = null;
                                        string Path = "";
                                        SuccessResponse res = new SuccessResponse();
                                        try
                                        {
                                            Path = UpdateratesheetNexge(record.FileNameCSV, record.ServerNameCSV);

                                            UpdateError("UpdateRatesheetServer after create csv ", Path, "ParellelRatesheetLogsy.txt", "", false);

                                            #region add minutes
                                            //  int x = Convert.ToInt32(Convert.ToDateTime(record.CreatedOn).ToString("mm")) / 10;
                                            int x = Convert.ToInt16(Convert.ToDateTime(record.CreatedOn).ToString("mm").Substring(1, 1));

                                            switch (x)
                                            {
                                                case 1:
                                                    y = 9;
                                                    break;
                                                case 8:
                                                    y = 7;
                                                    break;
                                                case 2:
                                                    y = 8;
                                                    break;
                                                case 3:
                                                    y = 7;
                                                    break;
                                                case 4:
                                                    y = 11;
                                                    break;
                                                case 5:
                                                    y = 10;
                                                    break;
                                                case 6:
                                                    y = 11;
                                                    break;
                                                case 7:
                                                    y = 8;
                                                    break;
                                                case 9:
                                                    y = 11;
                                                    break;

                                                default:
                                                    y = 10;
                                                    break;
                                            }


                                            #endregion

                                            NewResponse = GetRatelistnexge(HostingEnvironment.MapPath(Path));
                                            // NewResponse = GetRatelistparelleljera(HostingEnvironment.MapPath(Path), y);

                                            UpdateError("UpdateRatesheetServer new response before in New Nexge ", Path, "ParellelRatesheetLogsy.txt", " NewResponse:" + NewResponse, false);
                                        }
                                        catch (Exception ex)
                                        {
                                            UpdateError("UpdateRatesheetServer new response Error", ex.Message, "ParellelRatesheetLogsy.txt", "", false);
                                        }

                                        // Insert Email Update

                                        EmailsendStatusUpdate("Pending", record.RatesheetName, Convert.ToString(record.RateSheetId), Convert.ToString(record.ID), record.RequestID, record.FileNameCSV, record.RequestType);

                                        foreach (var a in list)
                                        {
                                            var DetailsServer = rms.server_details.FirstOrDefault(d => d.ServerID == a.Server_ID);
                                            bool status = false;
                                            // string laststatusis = "1";
                                            SuccessResponse reqrespon = new SuccessResponse();
                                            if (a.Server_ID == Convert.ToInt16(ConfigurationManager.AppSettings["VCSDEMO"]) ||
                                             a.Server_ID == Convert.ToInt16(ConfigurationManager.AppSettings["UKJERA"]) ||
                                               a.Server_ID == Convert.ToInt16(ConfigurationManager.AppSettings["USJERA"]))
                                            {
                                                respos = PushRatesheetToServerUpdateParellel(a.ID, "Automatic", "Batch", "", Convert.ToString(record.PartitionID), record.FileNameCSV, record.ServerNameCSV, Convert.ToInt32(record.RateSheetId), y, record.CreatedOn);
                                                if (respos.status == "success")
                                                {
                                                    UpdateError("UpdateRatesheetServer new response Jera soft complete ", record.RateSheetId.ToString(), "ParellelRatesheetLogsy.txt", " RatesheetId:" + record.RateSheetId.ToString(), false);

                                                    record.JobStatus = "Complete";
                                                    record.HitTry = record.HitTry + 1;
                                                    rms.SaveChanges();

                                                    // Update status

                                                    ServerPushStatusUpdate("Complete", record.RatesheetName, Convert.ToString(record.RateSheetId), record.RequestType, a.ServerRatesheetName, Convert.ToString(a.Server_ID), Convert.ToString(record.ID), record.RequestID);

                                                }
                                                else
                                                {
                                                    UpdateError("UpdateRatesheetServer new response Jera soft Failure ", record.RateSheetId.ToString(), "ParellelRatesheetLogsy.txt", " ratesheetId:" + record.RateSheetId.ToString(), false);
                                                    record.JobStatus = "failure";
                                                    //  record.HitTry = record.HitTry + 1;
                                                    rms.SaveChanges();
                                                    ServerPushStatusUpdate("failure", record.RatesheetName, Convert.ToString(record.RateSheetId), record.RequestType, a.ServerRatesheetName, Convert.ToString(a.Server_ID), Convert.ToString(record.ID), record.RequestID);

                                                }


                                                //if (respos.status == "success")
                                                //{
                                                //    reqrespon = UpdateRatesToserverParellel(Convert.ToInt32(record.RateSheetId), a.ID, Convert.ToInt32(laststatusis), "true", record.ID);
                                                //    record.JobStatus = "Complete";
                                                //    record.HitTry = record.HitTry + 1;
                                                //    rms.SaveChanges();
                                                //}
                                                //else
                                                //{
                                                //    reqrespon = UpdateRatesToserverParellel(Convert.ToInt32(record.RateSheetId), a.ID, Convert.ToInt32(laststatusis), "false", record.ID);
                                                //    record.JobStatus = "failure";
                                                //    record.HitTry = record.HitTry + 1;
                                                //    rms.SaveChanges();
                                                //}

                                                //if (reqrespon.status == "true")
                                                //    responsemessage.status = "true";

                                                //responsemessage.Message = responsemessage.Message + " " + reqrespon.Message;

                                            }
                                            else
                                            {

                                                if (DetailsServer.ServerType == Convert.ToInt32(ConfigurationManager.AppSettings["NewNexgeServerTypeTest"]) || DetailsServer.ServerType == Convert.ToInt32(ConfigurationManager.AppSettings["NewNexgeServerType"]))
                                                {


                                                    //string Path = UpdateratesheetNexge(record.FileNameCSV, record.ServerNameCSV);

                                                    //UpdateError("UpdateRatesheetServer after create csv ", Path, "ParellelRatesheetLogsy.txt", "", false);
                                                    //SuccessResponse res = new SuccessResponse();

                                                    //dynamic NewResponse = GetRatelistnexge(HostingEnvironment.MapPath(Path));

                                                    //UpdateError("UpdateRatesheetServer new response before in New Nexge ", Path, "ParellelRatesheetLogsy.txt", " NewResponse:" + NewResponse, false);




                                                    ////if (NewResponse != null)
                                                    ////{
                                                    ////res = NewNexege.NewNexgeUploadNew(DetailsServer.ServerIp, map.Description, DetailsServer.Username, DetailsServer.Password, "Update", map.ServerRatesheetName, map.ServerRatesheetID, map.PulseRule, map.Active, map.GracePeriod, map.CompanyType == 1 ? true : false, NewResponse, Convert.ToInt32(record.RateSheetId));

                                                    res = NewNexege.NewNexgeUploadNew(DetailsServer.ServerIp, a.Description, DetailsServer.Username, DetailsServer.Password, "Update", a.ServerRatesheetName, a.ServerRatesheetID, a.PulseRule, a.Active, a.GracePeriod, a.CompanyType == 1 ? true : false, NewResponse, Convert.ToInt32(record.RateSheetId));


                                                    //}
                                                    //else
                                                    //{
                                                    //    UpdateError("UpdateRatesheetServer new response null ", Path, "RatesheetLogs.txt", "", false);
                                                    //    status = false;
                                                    //}

                                                    status = res.status == "success" ? true : false;
                                                    // }
                                                    if (status == true)
                                                    {
                                                        UpdateError("UpdateRatesheetServer new response complete in New Nexge ", Path, "ParellelRatesheetLogsy.txt", " RatesheetId:" + record.RateSheetId.ToString(), false);
                                                        record.JobStatus = "Complete";
                                                        record.HitTry = record.HitTry + 1;
                                                        rms.SaveChanges();
                                                        ServerPushStatusUpdate("Complete", record.RatesheetName, Convert.ToString(record.RateSheetId), record.RequestType, a.ServerRatesheetName, Convert.ToString(a.Server_ID), Convert.ToString(record.ID), record.RequestID);

                                                    }
                                                    else
                                                    {
                                                        UpdateError("UpdateRatesheetServer new response Failure in New Nexge ", Path, "ParellelRatesheetLogsy.txt", " RatesheetId:" + record.RateSheetId.ToString(), false);
                                                        record.JobStatus = "Failure";
                                                        // record.HitTry = record.HitTry + 1;
                                                        rms.SaveChanges();
                                                        ServerPushStatusUpdate("failure", record.RatesheetName, Convert.ToString(record.RateSheetId), record.RequestType, a.ServerRatesheetName, Convert.ToString(a.Server_ID), Convert.ToString(record.ID), record.RequestID);
                                                    }

                                                    //record.JobStatus = "NewNexge Server";
                                                    //record.HitTry = record.HitTry + 1;
                                                    //rms.SaveChanges();
                                                    //responsemessage.Message = responsemessage.Message + " " + reqrespon.Message;
                                                }
                                                else
                                                {
                                                    //res = OldNexege.OldNexgeUpdateRatesheet(DetailsServer.ServerIp, DetailsServer.Username, DetailsServer.Password, "Update", "", a.ServerRatesheetName, a.PulseRule, a.Active, a.GracePeriod, NewResponse, a.CompanyType == 1 ? true : false);
                                                    res = OldNexege.OldNexgeUpdateReplaceRatesheet(DetailsServer.ServerIp, DetailsServer.Username, DetailsServer.Password, "Update", "", a.ServerRatesheetName, a.PulseRule, a.Active, a.GracePeriod, NewResponse, a.CompanyType == 1 ? true : false, Convert.ToString(record.RateSheetId), record.RequestID, Convert.ToInt16(a.Server_ID), record.RatesheetName);

                                                    status = res.status == "success" ? true : false;

                                                    if (status == true)
                                                    {
                                                        UpdateError("UpdateRatesheetServer new response complete in Old Nexge ", Path, "ParellelRatesheetLogsy.txt", " RatesheetId:" + record.RateSheetId.ToString(), false);
                                                        record.JobStatus = "Complete";
                                                        record.HitTry = record.HitTry + 1;
                                                        rms.SaveChanges();
                                                        ServerPushStatusUpdate("Complete", record.RatesheetName, Convert.ToString(record.RateSheetId), record.RequestType, a.ServerRatesheetName, Convert.ToString(a.Server_ID), Convert.ToString(record.ID), record.RequestID);

                                                    }
                                                    else
                                                    {
                                                        UpdateError("UpdateRatesheetServer new response Failure in Old Nexge ", Path, "ParellelRatesheetLogsy.txt", " RatesheetId:" + record.RateSheetId.ToString(), false);
                                                        record.JobStatus = "Failure";
                                                        //  record.HitTry = record.HitTry + 1;
                                                        rms.SaveChanges();
                                                        ServerPushStatusUpdate("failure", record.RatesheetName, Convert.ToString(record.RateSheetId), record.RequestType, a.ServerRatesheetName, Convert.ToString(a.Server_ID), Convert.ToString(record.ID), record.RequestID);

                                                    }
                                                    responsemessage.Message = responsemessage.Message + " " + reqrespon.Message;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        //response11 = UpdateRatesDB(Convert.ToInt32(record.RateSheetId), "notmap", record.ID);

                                        //responsemessage.status = "false";
                                        responsemessage.Message = responsemessage.Message + " " + response11.Message;

                                        record.JobStatus = "No Server Map Found";
                                        record.HitTry = -1;
                                        rms.SaveChanges();
                                    }
                                }
                                else
                                {
                                    //response11 = UpdateRatesDB(Convert.ToInt32(record.RateSheetId), "notmap", record.ID);
                                    ////  laststatusis = "0";
                                    //responsemessage.status = "false";
                                    responsemessage.Message = responsemessage.Message + " " + response11.Message;

                                    record.JobStatus = "No Map";
                                    record.HitTry = 0;
                                    rms.SaveChanges();

                                }
                            }
                        }

                    }
                    else
                    {
                        var jobreplace = rms.serverpushjobqueues.Where(d => d.JobStatus.ToUpper() == "PENDING" && d.RequestType.ToUpper() == "REPLACE").FirstOrDefault();
                        if (jobreplace != null)
                        {
                            var record = rms.serverpushjobqueues.Where(d => d.ID == jobreplace.ID).FirstOrDefault();
                            if (record != null)
                            {
                                record.JobStatus = "Progress";
                                record.HitTry = record.HitTry + 1;
                                rms.SaveChanges();

                                if (record.RequestType == "Replace" && record.FileNameCSV != null)
                                {
                                    List<ratesheetservermap> list = new List<ratesheetservermap>();
                                    list = ViewRatesheetServerMappingfunction(0, Convert.ToInt32(record.RateSheetId));

                                    if (list != null)
                                    {
                                        #region add minutes
                                        // int x=Convert.ToInt32(Convert.ToDateTime(record.CreatedOn).ToString("mm")) / 10;
                                        int x = Convert.ToInt16(Convert.ToDateTime(record.CreatedOn).ToString("mm").Substring(1, 1));
                                        int y = 0;
                                        switch (x)
                                        {
                                            case 1:
                                                y = 9;
                                                break;
                                            case 8:
                                                y = 7;
                                                break;
                                            case 2:
                                                y = 8;
                                                break;
                                            case 3:
                                                y = 7;
                                                break;
                                            case 4:
                                                y = 11;
                                                break;
                                            case 5:
                                                y = 10;
                                                break;
                                            case 6:
                                                y = 11;
                                                break;
                                            case 7:
                                                y = 8;
                                                break;
                                            case 9:
                                                y = 11;
                                                break;

                                            default:
                                                y = 10;
                                                break;
                                        }


                                        #endregion


                                        string Path = GetRatelistparelleljerafilename(ConfigurationManager.AppSettings["ReplaceCSV_URL"].ToString() + record.FileNameCSV, y, record.CreatedOn);

                                        FileStream fs = new FileStream(Path, FileMode.Open, FileAccess.Read);

                                        byte[] data = new byte[fs.Length];
                                        fs.Read(data, 0, data.Length);
                                        fs.Close();

                                        if (list.Count > 0)
                                        {
                                            // Insert Email Update

                                            EmailsendStatusUpdate("Pending", record.RatesheetName, Convert.ToString(record.RateSheetId), Convert.ToString(record.ID), record.RequestID, record.FileNameCSV, record.RequestType);
                                            foreach (var a in list)
                                            {
                                                bool status = false;
                                                // Pasupathi added

                                                server_details k = rms.server_details.Where(t => t.ServerID == a.Server_ID).FirstOrDefault();

                                                // SuccessResponse respos = new SuccessResponse();
                                                SuccessResponse reqrespon = new SuccessResponse();
                                                if (a.Server_ID == Convert.ToInt16(ConfigurationManager.AppSettings["VCSDEMO"]) ||
                                                         a.Server_ID == Convert.ToInt16(ConfigurationManager.AppSettings["UKJERA"]) ||
                                                           a.Server_ID == Convert.ToInt16(ConfigurationManager.AppSettings["USJERA"]))
                                                {


                                                    string ServerCSVName = record.ServerNameCSV + ".csv";

                                                    status = replaceRatesheetInJera(a.ServerRatesheetID, data, ServerCSVName, record.EndDate, k.ServerIp, k.Username, k.Password);
                                                    if (status == true)
                                                    {
                                                        record.JobStatus = "Complete";
                                                        record.HitTry = record.HitTry + 1;
                                                        rms.SaveChanges();
                                                        ServerPushStatusUpdate("Complete", record.RatesheetName, Convert.ToString(record.RateSheetId), record.RequestType, a.ServerRatesheetName, Convert.ToString(a.Server_ID), Convert.ToString(record.ID), record.RequestID);
                                                    }
                                                    else
                                                    {
                                                        record.JobStatus = "Failure";
                                                        record.HitTry = record.HitTry + 1;
                                                        rms.SaveChanges();
                                                        ServerPushStatusUpdate("failure", record.RatesheetName, Convert.ToString(record.RateSheetId), record.RequestType, a.ServerRatesheetName, Convert.ToString(a.Server_ID), Convert.ToString(record.ID), record.RequestID);
                                                    }
                                                }
                                                //  else
                                                //  {

                                                else if (k.ServerType == Convert.ToInt32(ConfigurationManager.AppSettings["NewNexgeServerTypeTest"]) || k.ServerType == Convert.ToInt32(ConfigurationManager.AppSettings["NewNexgeServerType"]))
                                                {
                                                    var DetailsServer = rms.server_details.FirstOrDefault(d => d.ServerID == a.Server_ID);
                                                    //  var map = rms.server_ratesheet_map.SingleOrDefault(d => d.RatesheetID == record.RateSheetId);


                                                    string path = ConfigurationManager.AppSettings["ReplaceCSV_URL"].ToString() + record.FileNameCSV;

                                                    SuccessResponse res = new SuccessResponse();

                                                    dynamic NewResponse = GetRatelistnexge(path);

                                                    //res = NewNexege.NewNexgeReplaceNew(DetailsServer.ServerIp, map.Description, DetailsServer.Username, DetailsServer.Password, "Replace", map.ServerRatesheetName, map.ServerRatesheetID, map.PulseRule, map.Active, map.GracePeriod, map.CompanyType == 1 ? true : false, NewResponse);

                                                    res = NewNexege.NewNexgeReplaceNew(DetailsServer.ServerIp, a.Description, DetailsServer.Username, DetailsServer.Password, "Replace", a.ServerRatesheetName, a.ServerRatesheetID, a.PulseRule, a.Active, a.GracePeriod, a.CompanyType == 1 ? true : false, NewResponse);

                                                    status = res.status == "success" ? true : false;
                                                    // }
                                                    if (status == true)
                                                    {
                                                        record.JobStatus = "Complete";
                                                        record.HitTry = record.HitTry + 1;
                                                        rms.SaveChanges();
                                                        ServerPushStatusUpdate("Complete", record.RatesheetName, Convert.ToString(record.RateSheetId), record.RequestType, a.ServerRatesheetName, Convert.ToString(a.Server_ID), Convert.ToString(record.ID), record.RequestID);
                                                    }
                                                    else
                                                    {
                                                        record.JobStatus = "Failure";
                                                        record.HitTry = record.HitTry + 1;
                                                        rms.SaveChanges();
                                                        ServerPushStatusUpdate("failure", record.RatesheetName, Convert.ToString(record.RateSheetId), record.RequestType, a.ServerRatesheetName, Convert.ToString(a.Server_ID), Convert.ToString(record.ID), record.RequestID);
                                                    }
                                                }
                                                else
                                                {
                                                    var DetailsServer = rms.server_details.FirstOrDefault(d => d.ServerID == a.Server_ID);
                                                    string path = ConfigurationManager.AppSettings["ReplaceCSV_URL"].ToString() + record.FileNameCSV;
                                                    SuccessResponse res = new SuccessResponse();

                                                    dynamic NewResponse = GetRatelistnexge(path);

                                                    #region FutureUpdate

                                                    try
                                                    {
                                                        List<ngt_rateslist> RatesheetData = new List<ngt_rateslist>();
                                                        RatesheetData = NewResponse;
                                                        List<List<ngt_rateslist>> EffectiveRateSheet = new List<List<ngt_rateslist>>();

                                                        List<List<ngt_rateslist>> groups = RatesheetData.OrderByDescending(o => o.Effective_on).GroupBy(o => o.Effective_on).Select(grp => grp.ToList()).ToList();

                                                        foreach (var group in groups)
                                                        {
                                                            if (Convert.ToDateTime(group[0].Effective_on).Date > DateTime.UtcNow)
                                                                EffectiveRateSheet.Add(group);
                                                        }

                                                        if (EffectiveRateSheet.Count > 0)
                                                        {
                                                            foreach (var group in EffectiveRateSheet)
                                                            {

                                                                string RatesheetFutureFilePath = ConversiontoOldNexegeFuture(group);


                                                                oldnexgeupdatepushjobqueue updateoldnexge = new oldnexgeupdatepushjobqueue();
                                                                updateoldnexge.JobStatus = "Pending";
                                                                updateoldnexge.RequestType = "Replace";
                                                                updateoldnexge.FileNameCSV = RatesheetFutureFilePath;
                                                                updateoldnexge.RequestID = record.RequestID;
                                                                updateoldnexge.RatesheetName = record.RatesheetName;
                                                                updateoldnexge.ServerId = record.ServerId;
                                                                updateoldnexge.ServerRatesheetNmae = record.ServerRatesheetNmae;
                                                                updateoldnexge.CompanyType = a.CompanyType;
                                                                updateoldnexge.EffectiveOn = Convert.ToDateTime(group[0].Effective_on);
                                                                updateoldnexge.RateSheetId = Convert.ToString(a.RatesheetID);

                                                                rms.oldnexgeupdatepushjobqueues.Add(updateoldnexge);
                                                                rms.SaveChanges();
                                                            }
                                                        }

                                                    }
                                                    catch (Exception ex)
                                                    {

                                                    }

                                                    #endregion

                                                    res = OldNexege.OldNexgeUpload(DetailsServer.ServerIp, DetailsServer.Username, DetailsServer.Password, "Update", "", a.ServerRatesheetName, a.PulseRule, a.Active, a.GracePeriod, NewResponse);

                                                    status = res.status == "success" ? true : false;
                                                    if (status == true)
                                                    {
                                                        record.JobStatus = "Complete";
                                                        record.HitTry = record.HitTry + 1;
                                                        rms.SaveChanges();
                                                        ServerPushStatusUpdate("Complete", record.RatesheetName, Convert.ToString(record.RateSheetId), record.RequestType, a.ServerRatesheetName, Convert.ToString(a.Server_ID), Convert.ToString(record.ID), record.RequestID);
                                                    }
                                                    else
                                                    {
                                                        record.JobStatus = "Failure";
                                                        // record.HitTry = record.HitTry + 1;
                                                        rms.SaveChanges();
                                                        ServerPushStatusUpdate("failure", record.RatesheetName, Convert.ToString(record.RateSheetId), record.RequestType, a.ServerRatesheetName, Convert.ToString(a.Server_ID), Convert.ToString(record.ID), record.RequestID);
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                UpdateError("UpdateRatesheetServer after create csv ", ex.Message + "  ", "ParellelRatesheetLogsy.txt", "", false);
                // rmsEntities rms = new rmsEntities();
                // GC.SuppressFinalize(rms);
                // rms.Dispose();
                //  GC.Collect();
                //throw;

            }
            return responsemessage;
        }


        public SuccessResponse WindowsserviceprintparrellelRatesheet_old()
        {



            SuccessResponse responsemessage = new SuccessResponse();
            RatesheetEmail createcsv = new RatesheetEmail();

            try
            {
                MongoClient Client = new MongoClient(ConfigurationManager.AppSettings["MongoDbString"].ToString());
                var MongoDB = Client.GetServer().GetDatabase(ConfigurationManager.AppSettings["MongoDBDatabase"].ToString());

                using (rmsEntities rms = new rmsEntities())
                {
                    string Path = "";
                    var job = rms.jobqueueupdaterates.Where(d => d.JobStatus.ToUpper() == "PENDING" && d.RequestType.ToUpper() != "MAPPING").FirstOrDefault();
                    if (job != null)
                    {
                        var record = rms.jobqueueupdaterates.Where(d => d.ID == job.ID).FirstOrDefault();

                        #region New

                        if (job.RequestType == "New" && job.FileNameCSV != null)
                        {
                            try
                            {
                                CommonLog("Request Tpe New Started.. Ratesheet ID=" + record.RateSheetId);

                                #region Update
                                record.JobStatus = "Progress";
                                record.HitTry = record.HitTry + 1;
                                record.Descriptions = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                rms.SaveChanges();
                                #endregion

                                #region add minutes
                                // int x = Convert.ToInt32(Convert.ToDateTime(record.CreatedOn).ToString("mm")) / 10;
                                int x = Convert.ToInt16(Convert.ToDateTime(record.CreatedOn).ToString("mm").Substring(1, 1));
                                int y = 0;
                                switch (x)
                                {
                                    case 1:
                                        y = 9;
                                        break;
                                    case 8:
                                        y = 7;
                                        break;
                                    case 2:
                                        y = 8;
                                        break;
                                    case 3:
                                        y = 7;
                                        break;
                                    case 4:
                                        y = 11;
                                        break;
                                    case 5:
                                        y = 10;
                                        break;
                                    case 6:
                                        y = 11;
                                        break;
                                    case 7:
                                        y = 8;
                                        break;
                                    case 9:
                                        y = 11;
                                        break;

                                    default:
                                        y = 10;
                                        break;
                                }


                                #endregion

                                #region Getcsvrecords

                                // var batchidvalu = MongoDB.GetCollection<RatesheetBatchID>("RatesheetBatchID").FindOne();

                                var batchidvalu = DateTime.Now.ToString("yyyyMMddHHmmssffff");

                                Path = UpdateratesheetRates(record.FileNameCSV, record.ServerNameCSV);


                                CommonLog("New Method after create Path..Ratesheet ID=" + record.RateSheetId + " ,Path=" + Path);

                                List<Teleboss_Ratesheet_Rate_1> NewResponse = GetRatelistrates(HostingEnvironment.MapPath(Path), record.RateSheetId.ToString(), batchidvalu, record.CreatedOn, y);

                                List<List<Teleboss_Ratesheet_Rate_1>> groups = NewResponse.OrderBy(o => o.Effective_on).GroupBy(o => o.Effective_on).Select(grp => grp.ToList()).ToList();

                                var Ratesheetidvalue = "1";
                                var RatesheetId = MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").FindOne(Query<Teleboss_Ratesheet_Status>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()));
                                if (RatesheetId == null)
                                {
                                    Teleboss_Ratesheet_Status d = new Teleboss_Ratesheet_Status();
                                    d._id = DateTime.Now.ToString("yyyyMMddHHmmssffff");
                                    d.RatesheetID = record.RateSheetId.ToString();
                                    d.Active = "1";
                                    Ratesheetidvalue = "1";
                                    var Collecstatus = MongoDB.GetCollection<BsonElement>("Teleboss_Ratesheet_Status").Insert(d);
                                }
                                else
                                    Ratesheetidvalue = RatesheetId.Active;

                                #endregion

                                #region DefaultTableinsert

                                // Default table insertion                             

                                var Collecdefault = MongoDB.GetCollection<BsonElement>("Teleboss_Ratesheet_Rates").InsertBatch(NewResponse.Select(c => new BsonDocument{
                                    //{"Id", c.Id},
                                    { "Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", c.expireAt }
                                    }).ToList());

                                #endregion

                                #region First Table Insert

                                // First table insertion            

                                // var Collec = MongoDB.GetCollection<BsonElement>("Teleboss_Ratesheet_Rate_" + Ratesheetidvalue).Insert(json);

                                string TableName = Ratesheetidvalue == "1" ? "Teleboss_Ratesheet_Rate_2" : "Teleboss_Ratesheet_Rate_1";


                                dynamic Collec = null;
                                foreach (var group in groups)
                                {
                                    if (Convert.ToDateTime(group[0].Effective_on).Date <= DateTime.Now)
                                    {
                                        Collec = MongoDB.GetCollection<BsonElement>(TableName).InsertBatch(group.Select(c => new BsonDocument{
                                    //{"Id", c.Id},
                                    {"Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", c.expireAt }
                                    }).ToList());

                                    }
                                    else
                                    {
                                        try
                                        {
                                            List<Teleboss_Rates_FutureEffectiveon> aa = new List<Teleboss_Rates_FutureEffectiveon>();

                                            Teleboss_Rates_FutureEffectiveon ss = new Teleboss_Rates_FutureEffectiveon();
                                            ss._id = DateTime.Now.ToString("yyyyMMddHHmmssffff");
                                            ss.Effective_on = group[0].Effective_on.ToString();
                                            ss.BatchID = batchidvalu;
                                            ss.CreatesOn = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                            ss.RequestType = "New";
                                            ss.AppliedDate = "";
                                            ss.RatesheetId = group[0].RatesheetID;
                                            ss.Status = "Pending";
                                            aa.Add(ss);
                                            //  MongoDB.GetCollection<Teleboss_Rates_FutureEffectiveon>("Teleboss_Rates_FutureEffectiveon").Insert(ss);



                                            MongoDB.GetCollection<BsonElement>("Teleboss_Rates_FutureEffectiveon_Test").InsertBatch(aa.Select(c => new BsonDocument {
                             {"Effective_on", c.Effective_on },
                                    { "BatchID", c.BatchID },
                                    { "CreatesOn", c.CreatesOn },
                                    { "RequestType", c.RequestType },
                                     { "AppliedDate", "" },
                                      { "RatesheetId", c.RatesheetId },
                                       { "Status", c.Status }

                        }).ToList());
                                        }
                                        catch (Exception ex)
                                        {
                                            CommonLog("Teleboss_Rates_FutureEffectiveon Insert Error Insert Method:=" + ex.Message);
                                        }
                                    }

                                }

                                #endregion

                                #region second table insertion

                                // change table active tablename
                                if (((MongoDB.Driver.WriteConcernResult[])Collec)[0].Response["ok"].ToString() == "1")
                                {
                                    CommonLog("First Table New Insert completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName + "  and Count is=" + NewResponse.Count());



                                    string Ratesheetidvaluenew = Ratesheetidvalue == "1" ? "2" : "1";

                                    var check = MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").Update(Query<Teleboss_Ratesheet_Status>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()),
                                                                  Update<Teleboss_Ratesheet_Status>.Set(c => c.Active, Ratesheetidvaluenew));

                                    // 2nd table insertion

                                    string TableName1 = Ratesheetidvaluenew == "1" ? "Teleboss_Ratesheet_Rate_2" : "Teleboss_Ratesheet_Rate_1";

                                    dynamic Collec2 = null;
                                    foreach (var group in groups)
                                    {
                                        if (Convert.ToDateTime(group[0].Effective_on).Date <= DateTime.Now)
                                        {
                                            Collec2 = MongoDB.GetCollection<BsonElement>(TableName1).InsertBatch(group.Select(c => new BsonDocument{
                                    //{"Id", c.Id },
                                    {"Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", "ISODate("+c.expireAt+")" }
                                    }).ToList());

                                        }
                                    }

                                    if (((MongoDB.Driver.WriteConcernResult[])Collec2)[0].Response["ok"].ToString() == "1")
                                    {
                                        CommonLog("second Table New Method Insert completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName1 + "  and Count is=" + NewResponse.Count());
                                        record.JobStatus = "Completed";
                                        record.HitTry = record.HitTry + 1;
                                        record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                        rms.SaveChanges();
                                        responsemessage.status = "true";
                                        responsemessage.Message = "success";
                                    }
                                    else
                                    {
                                        CommonLog("second Table New Insert Failure..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName1);
                                        record.JobStatus = "Failure";
                                        record.HitTry = record.HitTry + 1;
                                        record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                        rms.SaveChanges();

                                        responsemessage.status = "false";
                                        responsemessage.Message = "Failure";
                                    }

                                }
                                else
                                {
                                    CommonLog("First Table New Method Insert failure..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName);
                                    record.JobStatus = "Failure";
                                    record.HitTry = record.HitTry + 1;
                                    record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                    rms.SaveChanges();

                                    responsemessage.status = "false";
                                    responsemessage.Message = "Failure";
                                }
                                #endregion

                            }
                            catch (Exception ex)
                            {
                                record.JobStatus = "FailureCatch";
                                record.HitTry = record.HitTry + 1;
                                record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                rms.SaveChanges();
                                CommonLog("Error Details New Ratesheetid=" + record.RateSheetId + ", Error: " + ex.Message);
                            }

                        }

                        #endregion

                        #region Update

                        else if (job.RequestType == "Update" && job.FileNameCSV != null)
                        {
                            try
                            {
                                CommonLog("Request Tpe Update Started.. Ratesheet ID=" + record.RateSheetId);

                                #region Update
                                record.JobStatus = "Progress";
                                record.HitTry = record.HitTry + 1;
                                record.Descriptions = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                rms.SaveChanges();
                                #endregion

                                #region add minutes
                                // int z = Convert.ToInt32(Convert.ToDateTime(record.CreatedOn).ToString("mm")) / 10;
                                int z = Convert.ToInt16(Convert.ToDateTime(record.CreatedOn).ToString("mm").Substring(1, 1));
                                int y = 0;
                                switch (z)
                                {
                                    case 1:
                                        y = 9;
                                        break;
                                    case 8:
                                        y = 7;
                                        break;
                                    case 2:
                                        y = 8;
                                        break;
                                    case 3:
                                        y = 7;
                                        break;
                                    case 4:
                                        y = 11;
                                        break;
                                    case 5:
                                        y = 10;
                                        break;
                                    case 6:
                                        y = 11;
                                        break;
                                    case 7:
                                        y = 8;
                                        break;
                                    case 9:
                                        y = 11;
                                        break;

                                    default:
                                        y = 10;
                                        break;
                                }


                                #endregion

                                #region Getcsvrecords

                                // var batchidvalu = MongoDB.GetCollection<RatesheetBatchID>("RatesheetBatchID").FindOne();
                                var batchidvalu = DateTime.Now.ToString("yyyyMMddHHmmssffff");

                                Path = UpdateratesheetRates(record.FileNameCSV, record.ServerNameCSV);
                                List<Teleboss_Ratesheet_Rate_1> NewResponse = GetRatelistrates(HostingEnvironment.MapPath(Path), record.RateSheetId.ToString(), batchidvalu, record.CreatedOn, y);


                                var RatesheetId = MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").FindOne(Query<Teleboss_Ratesheet_Status>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()));


                                //var ss = from a in MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").Find(Query.And(Query<Teleboss_Ratesheet_Status>.EQ(a => a.Active, "1"))).ToList()
                                //         join b in MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").Find(Query.And(Query<Teleboss_Ratesheet_Status>.EQ(x => x.Active, "1"))).ToList() on a.RatesheetID equals b.RatesheetID into s
                                //         from u in s.DefaultIfEmpty().Where(a => a.RatesheetID.Count() > 1)

                                //         join c in MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").Find(Query.And(Query<Teleboss_Ratesheet_Status>.EQ(x => x.Active, "1"))).ToList() on a.RatesheetID equals c.RatesheetID into q
                                //         from v in q.DefaultIfEmpty()
                                //         group a by a._id into grp
                                //         select new
                                //         {
                                //             RatesheetID = grp.Select(a => a.RatesheetID).FirstOrDefault()
                                //         };


                                if (RatesheetId == null)
                                {
                                    CommonLog("Request Tpe Update Failure No Ratesheet Id Found in Status Table.. Ratesheet ID=" + record.RateSheetId);
                                    record.JobStatus = "Failure";
                                    record.HitTry = record.HitTry + 1;
                                    record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                    rms.SaveChanges();

                                    responsemessage.status = "false";
                                    responsemessage.Message = "Failure";
                                    return responsemessage;
                                }

                                var Ratesheetidvalue = RatesheetId.Active;

                                List<List<Teleboss_Ratesheet_Rate_1>> groups = NewResponse.OrderBy(x => x.Effective_on).GroupBy(x => x.Effective_on).Select(grp => grp.ToList()).ToList();

                                #endregion

                                #region DefaultTableinsert

                                // Default table insertion                             

                                var Collecdefault = MongoDB.GetCollection<BsonElement>("Teleboss_Ratesheet_Rates").InsertBatch(NewResponse.Select(c => new BsonDocument{
                                    //{"Id", c.Id},
                                    { "Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", c.expireAt }
                                    }).ToList());

                                #endregion

                                #region First Table Insert

                                string TableName = Ratesheetidvalue == "1" ? "Teleboss_Ratesheet_Rate_2" : "Teleboss_Ratesheet_Rate_1";

                                dynamic Collec = null;

                                foreach (var group in groups)
                                {
                                    if (Convert.ToDateTime(group[0].Effective_on).Date <= DateTime.Now)
                                    {

                                        var RegioncodeList = group.Select(a => a.RegionCode).ToList();

                                        var DelCodec = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Remove(Query.And(Query<Teleboss_Ratesheet_Rate_1>.In(k => k.RegionCode, RegioncodeList), Query<Teleboss_Ratesheet_Rate_1>.EQ(k => k.RatesheetID, record.RateSheetId.ToString())));

                                        // Insertion

                                        Collec = MongoDB.GetCollection<BsonElement>(TableName).InsertBatch(group.Select(c => new BsonDocument{
                                   // {"Id", c.Id},
                                    {"Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", c.expireAt }
                                    }).ToList());

                                    }
                                    else
                                    {
                                        try
                                        {
                                            List<Teleboss_Rates_FutureEffectiveon> aa = new List<Teleboss_Rates_FutureEffectiveon>();

                                            Teleboss_Rates_FutureEffectiveon ss = new Teleboss_Rates_FutureEffectiveon();
                                            ss._id = DateTime.Now.ToString("yyyyMMddHHmmssffff");
                                            ss.Effective_on = group[0].Effective_on.ToString();
                                            ss.BatchID = batchidvalu;
                                            ss.CreatesOn = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                            ss.RequestType = "Update";
                                            ss.AppliedDate = "";
                                            ss.RatesheetId = group[0].RatesheetID;
                                            ss.Status = "Pending";
                                            aa.Add(ss);
                                            // MongoDB.GetCollection<Teleboss_Rates_FutureEffectiveon>("Teleboss_Rates_FutureEffectiveon").Insert(ss);
                                            MongoDB.GetCollection<BsonElement>("Teleboss_Rates_FutureEffectiveon_Test").InsertBatch(aa.Select(c => new BsonDocument {
                             {"Effective_on", c.Effective_on },
                                    { "BatchID", c.BatchID },
                                    { "CreatesOn", c.CreatesOn },
                                    { "RequestType", c.RequestType },
                                     { "AppliedDate", "" },
                                      { "RatesheetId", c.RatesheetId },
                                       { "Status", c.Status }

                        }).ToList());
                                        }
                                        catch (Exception ex)
                                        {
                                            CommonLog("Teleboss_Rates_FutureEffectiveon Insert Error Update Method:=" + ex.Message);
                                        }


                                    }
                                }

                                #endregion

                                if (((MongoDB.Driver.WriteConcernResult[])Collec)[0].Response["ok"].ToString() == "1")
                                {
                                    CommonLog("First Table Update method Insert completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName + "  and Count is=" + NewResponse.Count());

                                    #region Change Table

                                    // Change Table Name
                                    string Ratesheetidvaluenew = Ratesheetidvalue == "1" ? "2" : "1";

                                    var check = MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").Update(Query<Teleboss_Ratesheet_Status>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()),
                                                                  Update<Teleboss_Ratesheet_Status>.Set(c => c.Active, Ratesheetidvaluenew));

                                    string TableName1 = Ratesheetidvaluenew == "1" ? "Teleboss_Ratesheet_Rate_2" : "Teleboss_Ratesheet_Rate_1";

                                    #endregion

                                    #region second table insertion

                                    dynamic Collec2 = null;
                                    foreach (var group in groups)
                                    {
                                        if (Convert.ToDateTime(group[0].Effective_on).Date <= DateTime.Now)
                                        {

                                            #region 2nd Table Deletion

                                            // Deletion 2nd table

                                            var RegioncodeList = group.Select(a => a.RegionCode).ToList();

                                            var DelCodec = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName1).Remove(Query.And(Query<Teleboss_Ratesheet_Rate_1>.In(k => k.RegionCode, RegioncodeList), Query<Teleboss_Ratesheet_Rate_1>.EQ(k => k.RatesheetID, record.RateSheetId.ToString())));

                                            #endregion

                                            // Insert 2nd table

                                            Collec2 = MongoDB.GetCollection<BsonElement>(TableName1).InsertBatch(group.Select(c => new BsonDocument{
                                    //{"Id", c.Id },
                                    {"Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", c.expireAt }
                                    }).ToList());
                                        }
                                    }

                                    if (((MongoDB.Driver.WriteConcernResult[])Collec2)[0].Response["ok"].ToString() == "1")
                                    {

                                        CommonLog("Second Table Update method Insert completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName1 + "  and Count is=" + NewResponse.Count());

                                        record.JobStatus = "Completed";
                                        record.HitTry = record.HitTry + 1;
                                        record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                        rms.SaveChanges();

                                        responsemessage.status = "true";
                                        responsemessage.Message = "success";

                                        #endregion

                                    }
                                    else
                                    {
                                        #region Second table Insert Fail

                                        record.JobStatus = "Failure";
                                        record.HitTry = record.HitTry + 1;
                                        record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                        rms.SaveChanges();

                                        responsemessage.status = "false";
                                        responsemessage.Message = "Failure";
                                        #endregion
                                    }

                                }
                                else
                                {
                                    #region First table Insert Fail

                                    record.JobStatus = "Failure";
                                    record.HitTry = record.HitTry + 1;
                                    record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                    rms.SaveChanges();

                                    responsemessage.status = "false";
                                    responsemessage.Message = "Failure";

                                    #endregion
                                }
                            }
                            catch (Exception ex)
                            {
                                record.JobStatus = "Failure";
                                record.HitTry = record.HitTry + 1;
                                record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                CommonLog("Error Update Details Ratesheetid=" + record.RateSheetId + ", Error: " + ex.Message);
                            }

                        }

                        #endregion

                        #region Replace

                        else if (job.RequestType == "Replace" && job.FileNameCSV != null)
                        {
                            try
                            {
                                CommonLog("Request Tpe Replace Started.. Ratesheet ID=" + record.RateSheetId);

                                #region Update
                                record.JobStatus = "Progress";
                                record.HitTry = record.HitTry + 1;
                                record.Descriptions = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                rms.SaveChanges();
                                #endregion

                                #region add minutes

                                // int z = Convert.ToInt32(Convert.ToDateTime(record.CreatedOn).ToString("mm")) / 10;
                                int z = Convert.ToInt16(Convert.ToDateTime(record.CreatedOn).ToString("mm").Substring(1, 1));
                                int y = 0;
                                switch (z)
                                {
                                    case 1:
                                        y = 9;
                                        break;
                                    case 8:
                                        y = 7;
                                        break;
                                    case 2:
                                        y = 8;
                                        break;
                                    case 3:
                                        y = 7;
                                        break;
                                    case 4:
                                        y = 11;
                                        break;
                                    case 5:
                                        y = 10;
                                        break;
                                    case 6:
                                        y = 11;
                                        break;
                                    case 7:
                                        y = 8;
                                        break;
                                    case 9:
                                        y = 11;
                                        break;

                                    default:
                                        y = 10;
                                        break;
                                }


                                #endregion

                                #region Getcsvrecords

                                // var batchidvalu = MongoDB.GetCollection<RatesheetBatchID>("RatesheetBatchID").FindOne();
                                var batchidvalu = DateTime.Now.ToString("yyyyMMddHHmmssffff");

                                //  Path = UpdateratesheetRates(record.FileNameCSV, record.ServerNameCSV);
                                Path = ConfigurationManager.AppSettings["ReplaceCSV_URL"].ToString() + record.FileNameCSV;
                                List<Teleboss_Ratesheet_Rate_1> NewResponse = GetRatelistrates(Path, record.RateSheetId.ToString(), batchidvalu, record.CreatedOn, y);


                                var RatesheetId = MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").FindOne(Query<Teleboss_Ratesheet_Status>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()));

                                if (RatesheetId == null)
                                {
                                    CommonLog("Request Tpe Replace Failure No Ratesheet Id Found in Status Table.. Ratesheet ID=" + record.RateSheetId);
                                    record.JobStatus = "Failure";
                                    record.HitTry = record.HitTry + 1;
                                    record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                    rms.SaveChanges();

                                    responsemessage.status = "false";
                                    responsemessage.Message = "Failure";
                                    return responsemessage;
                                }

                                var Ratesheetidvalue = RatesheetId.Active;

                                List<List<Teleboss_Ratesheet_Rate_1>> groups = NewResponse.OrderBy(x => x.Effective_on).GroupBy(x => x.Effective_on).Select(grp => grp.ToList()).ToList();

                                var DelRegioncode = NewResponse.Select(a => a.RegionCode).ToList();

                                #endregion

                                #region DefaultTableinsert

                                // Default table insertion                             

                                var Collecdefault = MongoDB.GetCollection<BsonElement>("Teleboss_Ratesheet_Rates").InsertBatch(NewResponse.Select(c => new BsonDocument{
                                    //{"Id", c.Id},
                                    { "Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", c.expireAt }
                                    }).ToList());

                                #endregion

                                #region  Table insert
                                // frst table insertion

                                dynamic Collec = null;
                                string TableName = Ratesheetidvalue == "1" ? "Teleboss_Ratesheet_Rate_2" : "Teleboss_Ratesheet_Rate_1";

                                #region DeleteALL

                                var DelCodecall = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Remove(Query.And(Query<Teleboss_Ratesheet_Rate_1>.NotIn(k => k.RegionCode, DelRegioncode), Query<Teleboss_Ratesheet_Rate_1>.EQ(k => k.RatesheetID, record.RateSheetId.ToString())));

                                #endregion

                                foreach (var group in groups)
                                {
                                    if (Convert.ToDateTime(group[0].Effective_on).Date <= DateTime.Now)
                                    {
                                        #region Deletion

                                        var RegioncodeList = group.Select(a => a.RegionCode).ToList();

                                        var DelCodec = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Remove(Query.And(Query<Teleboss_Ratesheet_Rate_1>.In(k => k.RegionCode, RegioncodeList), Query<Teleboss_Ratesheet_Rate_1>.EQ(k => k.RatesheetID, record.RateSheetId.ToString())));

                                        #endregion

                                        Collec = MongoDB.GetCollection<BsonElement>(TableName).InsertBatch(group.Select(c => new BsonDocument{
                                    //{"Id", c.Id},
                                    {"Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", c.expireAt }
                                    }).ToList());
                                    }
                                    else
                                    {
                                        try
                                        {
                                            List<Teleboss_Rates_FutureEffectiveon> aa = new List<Teleboss_Rates_FutureEffectiveon>();
                                            Teleboss_Rates_FutureEffectiveon ss = new Teleboss_Rates_FutureEffectiveon();
                                            ss._id = DateTime.Now.ToString("yyyyMMddHHmmssffff");
                                            ss.Effective_on = group[0].Effective_on.ToString();
                                            ss.BatchID = batchidvalu;
                                            ss.CreatesOn = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                            ss.RequestType = "Replace";
                                            ss.AppliedDate = "";
                                            ss.RatesheetId = group[0].RatesheetID;
                                            ss.Status = "Pending";
                                            aa.Add(ss);
                                            //  MongoDB.GetCollection<Teleboss_Rates_FutureEffectiveon>("Teleboss_Rates_FutureEffectiveon").Insert(ss);
                                            MongoDB.GetCollection<BsonElement>("Teleboss_Rates_FutureEffectiveon_Test").InsertBatch(aa.Select(c => new BsonDocument {
                             {"Effective_on", c.Effective_on },
                                    { "BatchID", c.BatchID },
                                    { "CreatesOn", c.CreatesOn },
                                    { "RequestType", c.RequestType },
                                     { "AppliedDate", "" },
                                      { "RatesheetId", c.RatesheetId },
                                       { "Status", c.Status }

                        }).ToList());
                                        }
                                        catch (Exception ex)
                                        {
                                            CommonLog("Teleboss_Rates_FutureEffectiveon Insert Error Replace Method:=" + ex.Message);
                                        }
                                    }
                                }
                                #endregion

                                if (((MongoDB.Driver.WriteConcernResult[])Collec)[0].Response["ok"].ToString() == "1")
                                {
                                    CommonLog("First Table Replace method Insert completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName + "  and Count is=" + NewResponse.Count());



                                    #region update status table

                                    string Ratesheetidvaluenew = Ratesheetidvalue == "1" ? "2" : "1";

                                    var check = MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").Update(Query<Teleboss_Ratesheet_Status>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()),
                                                                  Update<Teleboss_Ratesheet_Status>.Set(c => c.Active, Ratesheetidvaluenew));

                                    // 2nd table insertion
                                    string TableName1 = Ratesheetidvaluenew == "1" ? "Teleboss_Ratesheet_Rate_2" : "Teleboss_Ratesheet_Rate_1";

                                    #endregion

                                    #region DeleteALL

                                    var DelCodecall1 = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName1).Remove(Query.And(Query<Teleboss_Ratesheet_Rate_1>.NotIn(k => k.RegionCode, DelRegioncode), Query<Teleboss_Ratesheet_Rate_1>.EQ(k => k.RatesheetID, record.RateSheetId.ToString())));

                                    dynamic Collec2 = null;
                                    #endregion


                                    foreach (var group in groups)
                                    {
                                        if (Convert.ToDateTime(group[0].Effective_on).Date <= DateTime.Now)
                                        {
                                            #region Deletion

                                            var RegioncodeList = group.Select(a => a.RegionCode).ToList();

                                            var DelCodec = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName1).Remove(Query.And(Query<Teleboss_Ratesheet_Rate_1>.In(k => k.RegionCode, RegioncodeList), Query<Teleboss_Ratesheet_Rate_1>.EQ(k => k.RatesheetID, record.RateSheetId.ToString())));

                                            Collec2 = MongoDB.GetCollection<BsonElement>(TableName1).InsertBatch(group.Select(c => new BsonDocument{
                                    //{"Id", c.Id },
                                    {"Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", c.expireAt }
                                    }).ToList());
                                        }
                                    }

                                    #endregion

                                    if (((MongoDB.Driver.WriteConcernResult[])Collec2)[0].Response["ok"].ToString() == "1")
                                    {
                                        CommonLog("Second Table Replace Method Insert completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName + "  and Count is=" + NewResponse.Count());


                                        record.JobStatus = "Completed";
                                        record.HitTry = record.HitTry + 1;
                                        record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                        rms.SaveChanges();

                                        responsemessage.status = "true";
                                        responsemessage.Message = "success";
                                    }
                                    else
                                    {
                                        CommonLog("second Table Replace Method Insert failure..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName);
                                        record.JobStatus = "Failure";
                                        record.HitTry = record.HitTry + 1;
                                        record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                        rms.SaveChanges();

                                        responsemessage.status = "false";
                                        responsemessage.Message = "Failure";
                                    }

                                }
                                else
                                {
                                    record.JobStatus = "Failure";
                                    record.HitTry = record.HitTry + 1;
                                    record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                    rms.SaveChanges();

                                    responsemessage.status = "false";
                                    responsemessage.Message = "Failure";
                                }

                            }
                            catch (Exception ex)
                            {
                                record.JobStatus = "Failure";
                                record.HitTry = record.HitTry + 1;
                                record.Descriptions = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                rms.SaveChanges();
                                CommonLog("Error Details Replace Ratesheetid=" + record.RateSheetId + ", Error: " + ex.Message);
                            }
                        }

                        #endregion

                    }
                }
            }
            catch (Exception ex)
            {
                CommonLog("Last Catch  Error: " + ex.Message);
            }
            return responsemessage;
        }

        public SuccessResponse WindowsserviceprintparrellelRatesheetFutureEffective()
        {



            SuccessResponse responsemessage = new SuccessResponse();
            RatesheetEmail createcsv = new RatesheetEmail();

            try
            {
                MongoClient Client = new MongoClient(ConfigurationManager.AppSettings["MongoDbString"].ToString());
                var MongoDB = Client.GetServer().GetDatabase(ConfigurationManager.AppSettings["MongoDBDatabase"].ToString());

                using (rmsEntities rms = new rmsEntities())
                {

                    // var job = rms.jobqueueupdaterates.Where(d => d.JobStatus.ToUpper() == "PENDING" && d.RequestType.ToUpper() != "MAPPING").FirstOrDefault();

                    var job = MongoDB.GetCollection<Teleboss_Rates_FutureEffectiveon>("Teleboss_Rates_FutureEffectiveon").FindOne(Query.And(Query<Teleboss_Rates_FutureEffectiveon>.EQ(k => k.Status, "Pending"), Query<Teleboss_Rates_FutureEffectiveon>.EQ(k => k.Effective_on, DateTime.Now.ToString("dd/MM/yyyy 00:00:00"))));

                    if (job != null)
                    {
                        // var record = rms.jobqueueupdaterates.Where(d => d.ID == job.ID).FirstOrDefault();

                        #region New

                        if (job.RequestType == "New")
                        {
                            try
                            {
                                CommonLogfuture("Request Tpe New Started future.. Ratesheet ID=" + job.RatesheetId);

                                #region Update

                                var checkupdate = MongoDB.GetCollection<Teleboss_Rates_FutureEffectiveon>("Teleboss_Rates_FutureEffectiveon").Update(Query.And(Query<Teleboss_Rates_FutureEffectiveon>.EQ(k => k._id, job._id)),
                                                                 Update<Teleboss_Rates_FutureEffectiveon>.Set(c => c.Status, "Progress"));

                                #endregion

                                var Ratesheetidvalue = "1";
                                var RatesheetId = MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").FindOne(Query<Teleboss_Ratesheet_Status>.EQ(p => p.RatesheetID, job.RatesheetId.ToString()));
                                if (RatesheetId == null)
                                {
                                    Teleboss_Ratesheet_Status d = new Teleboss_Ratesheet_Status();
                                    d._id = DateTime.Now.ToString("yyyyMMddHHmmssffff");
                                    d.RatesheetID = job.RatesheetId.ToString();
                                    d.Active = "1";
                                    Ratesheetidvalue = "1";
                                    var Collecstatus = MongoDB.GetCollection<BsonElement>("Teleboss_Ratesheet_Status").Insert(d);
                                }
                                else
                                    Ratesheetidvalue = RatesheetId.Active;



                                #region First Table Insert

                                // First table insertion            

                                // var Collec = MongoDB.GetCollection<BsonElement>("Teleboss_Ratesheet_Rate_" + Ratesheetidvalue).Insert(json);

                                List<Teleboss_Ratesheet_Rate_1> NewResponse = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>("Teleboss_Ratesheet_Rates").Find(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(k => k.Effective_on, job.Effective_on), Query<Teleboss_Ratesheet_Rate_1>.EQ(k => k.RatesheetID, job.RatesheetId), Query<Teleboss_Ratesheet_Rate_1>.EQ(k => k.BatchID, job.BatchID))).ToList();

                                string TableName = Ratesheetidvalue == "1" ? "Teleboss_Ratesheet_Rate_2" : "Teleboss_Ratesheet_Rate_1";

                                var Collec = MongoDB.GetCollection<BsonElement>(TableName).InsertBatch(NewResponse.Select(c => new BsonDocument{
                                    //{"Id", c.Id},
                                    {"Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", c.expireAt }
                                    }).ToList());

                                #endregion

                                #region second table insertion

                                // change table active tablename
                                if (((MongoDB.Driver.WriteConcernResult[])Collec)[0].Response["ok"].ToString() == "1")
                                {
                                    CommonLogfuture("First Table New Insert completed..Ratesheet ID=" + job.RatesheetId + " ,Table Name=" + TableName + "  and Count is=" + NewResponse.Count());



                                    string Ratesheetidvaluenew = Ratesheetidvalue == "1" ? "2" : "1";

                                    var check = MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").Update(Query<Teleboss_Ratesheet_Status>.EQ(p => p.RatesheetID, job.RatesheetId.ToString()),
                                                                  Update<Teleboss_Ratesheet_Status>.Set(c => c.Active, Ratesheetidvaluenew));

                                    // 2nd table insertion

                                    string TableName1 = Ratesheetidvaluenew == "1" ? "Teleboss_Ratesheet_Rate_2" : "Teleboss_Ratesheet_Rate_1";


                                    var Collec2 = MongoDB.GetCollection<BsonElement>(TableName1).InsertBatch(NewResponse.Select(c => new BsonDocument{
                                    //{"Id", c.Id },
                                    {"Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", "ISODate("+c.expireAt+")" }
                                    }).ToList());



                                    if (((MongoDB.Driver.WriteConcernResult[])Collec2)[0].Response["ok"].ToString() == "1")
                                    {
                                        CommonLogfuture("second Table New Method Insert completed..Ratesheet ID=" + job.RatesheetId + " ,Table Name=" + TableName1 + "  and Count is=" + NewResponse.Count());

                                        responsemessage.status = "true";
                                        responsemessage.Message = "success";
                                        var checkupdatep = MongoDB.GetCollection<Teleboss_Rates_FutureEffectiveon>("Teleboss_Rates_FutureEffectiveon").Update(Query.And(Query<Teleboss_Rates_FutureEffectiveon>.EQ(k => k._id, job._id)),
                                                               Update<Teleboss_Rates_FutureEffectiveon>.Set(c => c.Status, "Completed").Set(c => c.AppliedDate, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")));
                                    }
                                    else
                                    {
                                        CommonLogfuture("second Table New Insert Failure..Ratesheet ID=" + job.RatesheetId + " ,Table Name=" + TableName1);


                                        var checkupdatef = MongoDB.GetCollection<Teleboss_Rates_FutureEffectiveon>("Teleboss_Rates_FutureEffectiveon").Update(Query.And(Query<Teleboss_Rates_FutureEffectiveon>.EQ(k => k._id, job._id)),
                                                                Update<Teleboss_Rates_FutureEffectiveon>.Set(c => c.Status, "Failure").Set(c => c.AppliedDate, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")));

                                        responsemessage.status = "false";
                                        responsemessage.Message = "Failure";
                                    }

                                }
                                else
                                {
                                    CommonLogfuture("First Table New Method Insert failure..Ratesheet ID=" + job.RatesheetId + " ,Table Name=" + TableName);

                                    var checkupdatef = MongoDB.GetCollection<Teleboss_Rates_FutureEffectiveon>("Teleboss_Rates_FutureEffectiveon").Update(Query.And(Query<Teleboss_Rates_FutureEffectiveon>.EQ(k => k._id, job._id)),
                                                               Update<Teleboss_Rates_FutureEffectiveon>.Set(c => c.Status, "Failure").Set(c => c.AppliedDate, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")));
                                    responsemessage.status = "false";
                                    responsemessage.Message = "Failure";
                                }
                                #endregion

                            }
                            catch (Exception ex)
                            {
                                var checkupdatef = MongoDB.GetCollection<Teleboss_Rates_FutureEffectiveon>("Teleboss_Rates_FutureEffectiveon").Update(Query.And(Query<Teleboss_Rates_FutureEffectiveon>.EQ(k => k._id, job._id)),
                                                               Update<Teleboss_Rates_FutureEffectiveon>.Set(c => c.Status, "FailureCatch").Set(c => c.AppliedDate, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")));

                                CommonLogfuture("Error Details New Ratesheetid=" + job.RatesheetId + ", Error: " + ex.Message);
                            }

                        }
                        #endregion

                        #region Update

                        else
                        {
                            try
                            {
                                CommonLogfuture("Request Tpe Update Started.. Ratesheet ID=" + job.RatesheetId);

                                #region Update

                                //  var s = MongoDB.GetCollection<Teleboss_Rates_FutureEffectiveon>("Teleboss_Rates_FutureEffectiveon").Find(Query.And(Query<Teleboss_Rates_FutureEffectiveon>.EQ(k => k.Effective_on, job.Effective_on), Query<Teleboss_Rates_FutureEffectiveon>.EQ(k => k.BatchID, job.BatchID), Query<Teleboss_Rates_FutureEffectiveon>.EQ(k => k.RatesheetId, job.RatesheetId)));

                                var checkupdatef = MongoDB.GetCollection<Teleboss_Rates_FutureEffectiveon>("Teleboss_Rates_FutureEffectiveon").Update(Query.And(Query<Teleboss_Rates_FutureEffectiveon>.EQ(k => k._id, job._id)),
                                                                Update<Teleboss_Rates_FutureEffectiveon>.Set(c => c.Status, "Progress"));
                                //  var checkupdatef = MongoDB.GetCollection<Teleboss_Rates_FutureEffectiveon>("Teleboss_Rates_FutureEffectiveon").Update(Query.And(Query<Teleboss_Rates_FutureEffectiveon>.EQ(k => k.Effective_on, job.Effective_on), Query<Teleboss_Rates_FutureEffectiveon>.EQ(k => k.BatchID, job.BatchID), Query<Teleboss_Rates_FutureEffectiveon>.EQ(k => k.RatesheetId, job.RatesheetId)),
                                //  Update<Teleboss_Rates_FutureEffectiveon>.Set(c => c.Status, "Progress"));

                                #endregion


                                List<Teleboss_Ratesheet_Rate_1> NewResponse = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>("Teleboss_Ratesheet_Rates").Find(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(k => k.Effective_on, job.Effective_on), Query<Teleboss_Ratesheet_Rate_1>.EQ(k => k.RatesheetID, job.RatesheetId), Query<Teleboss_Ratesheet_Rate_1>.EQ(k => k.BatchID, job.BatchID))).ToList();

                                var RegioncodeList = NewResponse.Select(a => a.RegionCode).ToList();

                                var RatesheetId = MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").FindOne(Query<Teleboss_Ratesheet_Status>.EQ(p => p.RatesheetID, job.RatesheetId.ToString()));

                                if (RatesheetId == null)
                                {
                                    CommonLogfuture("Request Tpe Update Failure No Ratesheet Id Found in Status Table.. Ratesheet ID=" + job.RatesheetId);

                                    var checkupdatef1 = MongoDB.GetCollection<Teleboss_Rates_FutureEffectiveon>("Teleboss_Rates_FutureEffectiveon").Update(Query.And(Query<Teleboss_Rates_FutureEffectiveon>.EQ(k => k._id, job._id)),
                                                                Update<Teleboss_Rates_FutureEffectiveon>.Set(c => c.Status, "Failure").Set(c => c.AppliedDate, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")));

                                    responsemessage.status = "false";
                                    responsemessage.Message = "Failure";
                                    return responsemessage;
                                }

                                var Ratesheetidvalue = RatesheetId.Active;

                                List<List<Teleboss_Ratesheet_Rate_1>> groups = NewResponse.OrderBy(x => x.Effective_on).GroupBy(x => x.Effective_on).Select(grp => grp.ToList()).ToList();

                                #endregion

                                #region First Table Insert

                                string TableName = Ratesheetidvalue == "1" ? "Teleboss_Ratesheet_Rate_2" : "Teleboss_Ratesheet_Rate_1";

                                var DelCodec = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Remove(Query.And(Query<Teleboss_Ratesheet_Rate_1>.In(k => k.RegionCode, RegioncodeList), Query<Teleboss_Ratesheet_Rate_1>.EQ(k => k.RatesheetID, job.RatesheetId.ToString())));

                                // Insertion

                                var Collec = MongoDB.GetCollection<BsonElement>(TableName).InsertBatch(NewResponse.Select(c => new BsonDocument{
                                    //{"Id", c.Id},
                                    {"Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", c.expireAt }
                                    }).ToList());



                                #endregion

                                if (((MongoDB.Driver.WriteConcernResult[])Collec)[0].Response["ok"].ToString() == "1")
                                {
                                    CommonLogfuture("First Table Update method Insert completed..Ratesheet ID=" + job.RatesheetId + " ,Table Name=" + TableName + "  and Count is=" + NewResponse.Count());

                                    #region Change Table

                                    // Change Table Name
                                    string Ratesheetidvaluenew = Ratesheetidvalue == "1" ? "2" : "1";

                                    var check = MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").Update(Query<Teleboss_Ratesheet_Status>.EQ(p => p.RatesheetID, job.RatesheetId.ToString()),
                                                                  Update<Teleboss_Ratesheet_Status>.Set(c => c.Active, Ratesheetidvaluenew));

                                    string TableName1 = Ratesheetidvaluenew == "1" ? "Teleboss_Ratesheet_Rate_2" : "Teleboss_Ratesheet_Rate_1";

                                    #endregion

                                    #region second table insertion


                                    var DelCodec1 = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName1).Remove(Query.And(Query<Teleboss_Ratesheet_Rate_1>.In(k => k.RegionCode, RegioncodeList), Query<Teleboss_Ratesheet_Rate_1>.EQ(k => k.RatesheetID, job.RatesheetId.ToString())));

                                    #endregion

                                    // Insert 2nd table

                                    var Collec2 = MongoDB.GetCollection<BsonElement>(TableName1).InsertBatch(NewResponse.Select(c => new BsonDocument{
                                    //{"Id", c.Id },
                                    {"Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", c.expireAt }
                                    }).ToList());


                                    if (((MongoDB.Driver.WriteConcernResult[])Collec2)[0].Response["ok"].ToString() == "1")
                                    {

                                        CommonLog("Second Table Update method Insert completed..Ratesheet ID=" + job.RatesheetId + " ,Table Name=" + TableName1 + "  and Count is=" + NewResponse.Count());

                                        var checkupdatef1 = MongoDB.GetCollection<Teleboss_Rates_FutureEffectiveon>("Teleboss_Rates_FutureEffectiveon").Update(Query.And(Query<Teleboss_Rates_FutureEffectiveon>.EQ(k => k._id, job._id)),
                                                                 Update<Teleboss_Rates_FutureEffectiveon>.Set(c => c.Status, "Completed").Set(c => c.AppliedDate, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")));




                                        responsemessage.status = "true";
                                        responsemessage.Message = "success";



                                    }
                                    else
                                    {
                                        #region Second table Insert Fail

                                        var checkupdatef1 = MongoDB.GetCollection<Teleboss_Rates_FutureEffectiveon>("Teleboss_Rates_FutureEffectiveon").Update(Query.And(Query<Teleboss_Rates_FutureEffectiveon>.EQ(k => k._id, job._id)),
                                                                 Update<Teleboss_Rates_FutureEffectiveon>.Set(c => c.Status, "Failure").Set(c => c.AppliedDate, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")));

                                        responsemessage.status = "false";
                                        responsemessage.Message = "Failure";
                                        #endregion
                                    }

                                }
                                else
                                {
                                    #region First table Insert Fail

                                    var checkupdatef1 = MongoDB.GetCollection<Teleboss_Rates_FutureEffectiveon>("Teleboss_Rates_FutureEffectiveon").Update(Query.And(Query<Teleboss_Rates_FutureEffectiveon>.EQ(k => k._id, job._id)),
                                                                 Update<Teleboss_Rates_FutureEffectiveon>.Set(c => c.Status, "Failure").Set(c => c.AppliedDate, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")));

                                    responsemessage.status = "false";
                                    responsemessage.Message = "Failure";

                                    #endregion
                                }
                            }
                            catch (Exception ex)
                            {
                                var checkupdatef1 = MongoDB.GetCollection<Teleboss_Rates_FutureEffectiveon>("Teleboss_Rates_FutureEffectiveon").Update(Query.And(Query<Teleboss_Rates_FutureEffectiveon>.EQ(k => k._id, job._id)),
                                                                 Update<Teleboss_Rates_FutureEffectiveon>.Set(c => c.Status, "FailureCatch").Set(c => c.AppliedDate, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")));

                                CommonLogfuture("Error Update Details Ratesheetid=" + job.RatesheetId + ", Error: " + ex.Message);
                            }

                        }

                    }
                }
            }
            catch (Exception ex)
            {
                CommonLogfuture("Last Catch  Error: " + ex.Message);
            }
            return responsemessage;
        }

        public SuccessResponse WindowsserviceprintparrellelRatesheet_10122017()
        {

            int time = Convert.ToInt32(ConfigurationManager.AppSettings["MongoDBExpireTime"]);

            SuccessResponse responsemessage = new SuccessResponse();
            RatesheetEmail createcsv = new RatesheetEmail();

            try
            {
                MongoClient Client = new MongoClient(ConfigurationManager.AppSettings["MongoDbString"].ToString());
                var MongoDB = Client.GetServer().GetDatabase(ConfigurationManager.AppSettings["MongoDBDatabase"].ToString());

                using (rmsEntities rms = new rmsEntities())
                {
                    string Path = "";
                    var job = rms.jobqueueupdaterates.Where(d => d.JobStatus.ToUpper() == "PENDING" && d.RequestType.ToUpper() != "MAPPING").FirstOrDefault();
                    if (job != null)
                    {
                        var record = rms.jobqueueupdaterates.Where(d => d.ID == job.ID).FirstOrDefault();

                        #region New

                        if (job.RequestType == "New" && job.FileNameCSV != null)
                        {
                            try
                            {
                                CommonLog("Request Tpe New Started.. Ratesheet ID=" + record.RateSheetId);

                                #region Update
                                record.JobStatus = "Progress";
                                record.HitTry = record.HitTry + 1;
                                record.Descriptions = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                rms.SaveChanges();
                                #endregion

                                #region add minutes
                                // int x = Convert.ToInt32(Convert.ToDateTime(record.CreatedOn).ToString("mm")) / 10;
                                int x = Convert.ToInt16(Convert.ToDateTime(record.CreatedOn).ToString("mm").Substring(1, 1));
                                int y = 0;
                                switch (x)
                                {
                                    case 1:
                                        y = 9;
                                        break;
                                    case 8:
                                        y = 7;
                                        break;
                                    case 2:
                                        y = 8;
                                        break;
                                    case 3:
                                        y = 7;
                                        break;
                                    case 4:
                                        y = 11;
                                        break;
                                    case 5:
                                        y = 10;
                                        break;
                                    case 6:
                                        y = 11;
                                        break;
                                    case 7:
                                        y = 8;
                                        break;
                                    case 9:
                                        y = 11;
                                        break;

                                    default:
                                        y = 10;
                                        break;
                                }


                                #endregion

                                #region Getcsvrecords

                                // var batchidvalu = MongoDB.GetCollection<RatesheetBatchID>("RatesheetBatchID").FindOne();

                                var batchidvalu = DateTime.Now.ToString("yyyyMMddHHmmssffff");

                                Path = UpdateratesheetRates(record.FileNameCSV, record.ServerNameCSV);


                                CommonLog("New Method after create Path..Ratesheet ID=" + record.RateSheetId + " ,Path=" + Path);

                                List<Teleboss_Ratesheet_Rate_1> NewResponse = GetRatelistrates(HostingEnvironment.MapPath(Path), record.RateSheetId.ToString(), batchidvalu, record.CreatedOn, y);

                                var Ratesheetidvalue = "1";
                                var RatesheetId = MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").FindOne(Query<Teleboss_Ratesheet_Status>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()));
                                if (RatesheetId == null)
                                {
                                    Teleboss_Ratesheet_Status d = new Teleboss_Ratesheet_Status();
                                    d._id = DateTime.Now.ToString("yyyyMMddHHmmssffff");
                                    d.RatesheetID = record.RateSheetId.ToString();
                                    d.Active = "1";
                                    Ratesheetidvalue = "1";
                                    var Collecstatus = MongoDB.GetCollection<BsonElement>("Teleboss_Ratesheet_Status").Insert(d);
                                }
                                else
                                    Ratesheetidvalue = RatesheetId.Active;

                                #endregion

                                #region First Table Insert

                                // frst table insertion

                                // var Collec = MongoDB.GetCollection<BsonElement>("Teleboss_Ratesheet_Rate_" + Ratesheetidvalue).Insert(json);

                                string TableName = Ratesheetidvalue == "1" ? "Teleboss_Ratesheet_Rate_2" : "Teleboss_Ratesheet_Rate_1";

                                var Collec = MongoDB.GetCollection<BsonElement>(TableName).InsertBatch(NewResponse.Select(c => new BsonDocument{
                                    //{"Id", c.Id},
                                    {"Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", c.expireAt }
                                    }).ToList());



                                #endregion

                                #region second table insertion

                                // change table active tablename
                                if (((MongoDB.Driver.WriteConcernResult[])Collec)[0].Response["ok"].ToString() == "1")
                                {
                                    CommonLog("First Table New Insert completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName + "  and Count is=" + NewResponse.Count());



                                    string Ratesheetidvaluenew = Ratesheetidvalue == "1" ? "2" : "1";

                                    var check = MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").Update(Query<Teleboss_Ratesheet_Status>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()),
                                                                  Update<Teleboss_Ratesheet_Status>.Set(c => c.Active, Ratesheetidvaluenew));

                                    // 2nd table insertion

                                    string TableName1 = Ratesheetidvaluenew == "1" ? "Teleboss_Ratesheet_Rate_2" : "Teleboss_Ratesheet_Rate_1";

                                    var Collec2 = MongoDB.GetCollection<BsonElement>(TableName1).InsertBatch(NewResponse.Select(c => new BsonDocument{
                                    //{"Id", c.Id },
                                    {"Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", "ISODate("+c.expireAt+")" }
                                    }).ToList());

                                    if (((MongoDB.Driver.WriteConcernResult[])Collec2)[0].Response["ok"].ToString() == "1")
                                    {
                                        CommonLog("second Table New Method Insert completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName1 + "  and Count is=" + NewResponse.Count());
                                        record.JobStatus = "Completed";
                                        record.HitTry = record.HitTry + 1;
                                        record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                        rms.SaveChanges();
                                        responsemessage.status = "true";
                                        responsemessage.Message = "success";
                                    }
                                    else
                                    {
                                        CommonLog("second Table New Insert Failure..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName1);
                                        record.JobStatus = "Failure";
                                        record.HitTry = record.HitTry + 1;
                                        record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                        rms.SaveChanges();

                                        responsemessage.status = "false";
                                        responsemessage.Message = "Failure";
                                    }

                                }
                                else
                                {
                                    CommonLog("First Table New Method Insert failure..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName);
                                    record.JobStatus = "Failure";
                                    record.HitTry = record.HitTry + 1;
                                    record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                    rms.SaveChanges();

                                    responsemessage.status = "false";
                                    responsemessage.Message = "Failure";
                                }
                                #endregion

                            }
                            catch (Exception ex)
                            {
                                record.JobStatus = "FailureCatch";
                                record.HitTry = record.HitTry + 1;
                                record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                rms.SaveChanges();
                                CommonLog("Error Details New Ratesheetid=" + record.RateSheetId + ", Error: " + ex.Message);
                            }

                        }

                        #endregion

                        #region Update

                        else if (job.RequestType == "Update" && job.FileNameCSV != null)
                        {
                            try
                            {
                                CommonLog("Request Tpe Update Started.. Ratesheet ID=" + record.RateSheetId);

                                #region Update
                                record.JobStatus = "Progress";
                                record.HitTry = record.HitTry + 1;
                                record.Descriptions = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                rms.SaveChanges();
                                #endregion

                                #region add minutes
                                // int z = Convert.ToInt32(Convert.ToDateTime(record.CreatedOn).ToString("mm")) / 10;
                                int z = Convert.ToInt16(Convert.ToDateTime(record.CreatedOn).ToString("mm").Substring(1, 1));
                                int y = 0;
                                switch (z)
                                {
                                    case 1:
                                        y = 9;
                                        break;
                                    case 8:
                                        y = 7;
                                        break;
                                    case 2:
                                        y = 8;
                                        break;
                                    case 3:
                                        y = 7;
                                        break;
                                    case 4:
                                        y = 11;
                                        break;
                                    case 5:
                                        y = 10;
                                        break;
                                    case 6:
                                        y = 11;
                                        break;
                                    case 7:
                                        y = 8;
                                        break;
                                    case 9:
                                        y = 11;
                                        break;

                                    default:
                                        y = 10;
                                        break;
                                }


                                #endregion

                                #region Getcsvrecords

                                // var batchidvalu = MongoDB.GetCollection<RatesheetBatchID>("RatesheetBatchID").FindOne();
                                var batchidvalu = DateTime.Now.ToString("yyyyMMddHHmmssffff");

                                Path = UpdateratesheetRates(record.FileNameCSV, record.ServerNameCSV);
                                List<Teleboss_Ratesheet_Rate_1> NewResponse = GetRatelistrates(HostingEnvironment.MapPath(Path), record.RateSheetId.ToString(), batchidvalu, record.CreatedOn, y);


                                var RatesheetId = MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").FindOne(Query<Teleboss_Ratesheet_Status>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()));

                                if (RatesheetId == null)
                                {
                                    CommonLog("Request Tpe Update Failure No Ratesheet Id Found in Status Table.. Ratesheet ID=" + record.RateSheetId);
                                    record.JobStatus = "Failure";
                                    record.HitTry = record.HitTry + 1;
                                    record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                    rms.SaveChanges();

                                    responsemessage.status = "false";
                                    responsemessage.Message = "Failure";
                                    return responsemessage;
                                }

                                var Ratesheetidvalue = RatesheetId.Active;

                                List<List<Teleboss_Ratesheet_Rate_1>> groups = NewResponse.OrderBy(x => x.Effective_on).GroupBy(x => x.Effective_on).Select(grp => grp.ToList()).ToList();

                                #endregion

                                #region First Table Insert

                                // frst table insertion

                                // var Collec = MongoDB.GetCollection<BsonElement>("Teleboss_Ratesheet_Rate_" + Ratesheetidvalue).Insert(json);

                                string TableName = Ratesheetidvalue == "1" ? "Teleboss_Ratesheet_Rate_2" : "Teleboss_Ratesheet_Rate_1";


                                var Collec = MongoDB.GetCollection<BsonElement>(TableName).InsertBatch(NewResponse.Select(c => new BsonDocument{
                                    //{"Id", c.Id},
                                    {"Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", c.expireAt }
                                    }).ToList());



                                #endregion

                                if (((MongoDB.Driver.WriteConcernResult[])Collec)[0].Response["ok"].ToString() == "1")
                                {
                                    CommonLog("First Table Update method Insert completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName + "  and Count is=" + NewResponse.Count());

                                    #region First Table Update 1
                                    // Update table 1
                                    foreach (var group in groups)
                                    {
                                        // if (Convert.ToDateTime(group[0].Effective_on).Date != DateTime.UtcNow)
                                        // {
                                        //    var ResponseList = NewResponse.Where(d => d.Effective_on == group[0].Effective_on).ToList();

                                        //var RegioncodeList = ResponseList.Select(a => a.RegionCode).ToList();
                                        var RegioncodeList = group.Select(a => a.RegionCode).ToList();

                                        // var getlist = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Find(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList))).ToList();

                                        // Old Effective Update

                                        // oLD QUERY pASUPATHI cHANGED 09/06/2017
                                        //var checktable = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.LTE(p => p.Effective_on, group[0].Effective_on), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group[0].Effective_on), UpdateFlags.Multi);
                                        var checktable = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.LTE(p => p.Effective_on, group[0].Effective_on), Query<Teleboss_Ratesheet_Rate_1>.GT(p => p.EndDate, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group[0].Effective_on).Set(p => p.expireAt, Convert.ToDateTime(Convert.ToDateTime(group[0].Effective_on).AddMinutes(time).ToString("yyyy-MM-dd HH:mm:ss"))), UpdateFlags.Multi);


                                        // Future date Update

                                        List<Teleboss_Ratesheet_Rate_1> getfuture = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Find(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.GT(p => p.Effective_on, group[0].Effective_on), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList))).ToList();

                                        if (getfuture.Count != 0)
                                        {
                                            List<List<Teleboss_Ratesheet_Rate_1>> groupss = getfuture.OrderBy(x => x.Effective_on).GroupBy(x => x.Effective_on).Select(grp => grp.ToList()).ToList();
                                            foreach (var group1 in groupss)
                                            {

                                                var regioncodefuture = group1.Select(a => a.RegionCode).ToList();


                                                var checktablefuture = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.EndDate, "2500-01-01 00:00:00"), Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, regioncodefuture)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group1[0].Effective_on).Set(p => p.expireAt, Convert.ToDateTime(Convert.ToDateTime(group[0].Effective_on).AddMinutes(time).ToString("yyyy-MM-dd HH:mm:ss"))), UpdateFlags.Multi);

                                            }
                                        }

                                    }
                                    CommonLog("First Table Replace Method Update completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName);

                                    #endregion

                                    #region second table insertion

                                    // Change Table Name
                                    string Ratesheetidvaluenew = Ratesheetidvalue == "1" ? "2" : "1";

                                    var check = MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").Update(Query<Teleboss_Ratesheet_Status>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()),
                                                                  Update<Teleboss_Ratesheet_Status>.Set(c => c.Active, Ratesheetidvaluenew));

                                    // 2nd table insertion
                                    string TableName1 = Ratesheetidvaluenew == "1" ? "Teleboss_Ratesheet_Rate_2" : "Teleboss_Ratesheet_Rate_1";


                                    var Collec2 = MongoDB.GetCollection<BsonElement>(TableName1).InsertBatch(NewResponse.Select(c => new BsonDocument{
                                    //{"Id", c.Id },
                                    {"Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", c.expireAt }
                                    }).ToList());

                                    #endregion

                                    #region Second Table Update

                                    if (((MongoDB.Driver.WriteConcernResult[])Collec2)[0].Response["ok"].ToString() == "1")
                                    {

                                        CommonLog("Second Table Update method Insert completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName1 + "  and Count is=" + NewResponse.Count());

                                        #region second Table Update 2
                                        // Update table 1
                                        foreach (var group in groups)
                                        {

                                            var RegioncodeList = group.Select(a => a.RegionCode).ToList();



                                            // Old Effective Update

                                            //var checktable = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName1).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.LTE(p => p.Effective_on, group[0].Effective_on), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group[0].Effective_on), UpdateFlags.Multi);

                                            var checktable = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName1).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.LTE(p => p.Effective_on, group[0].Effective_on), Query<Teleboss_Ratesheet_Rate_1>.GT(p => p.EndDate, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group[0].Effective_on).Set(p => p.expireAt, Convert.ToDateTime(Convert.ToDateTime(group[0].Effective_on).AddMinutes(time).ToString("yyyy-MM-dd HH:mm:ss"))), UpdateFlags.Multi);


                                            // Future date Update

                                            List<Teleboss_Ratesheet_Rate_1> getfuture = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName1).Find(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.GT(p => p.Effective_on, group[0].Effective_on), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList))).ToList();

                                            if (getfuture.Count != 0)
                                            {
                                                List<List<Teleboss_Ratesheet_Rate_1>> groupss = getfuture.OrderBy(x => x.Effective_on).GroupBy(x => x.Effective_on).Select(grp => grp.ToList()).ToList();

                                                foreach (var group1 in groupss)
                                                {
                                                    var regioncodefuture = group1.Select(a => a.RegionCode).ToList();

                                                    var checktablefuture = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName1).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.EndDate, "2500-01-01 00:00:00"), Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, regioncodefuture)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group1[0].Effective_on).Set(p => p.expireAt, Convert.ToDateTime(Convert.ToDateTime(group[0].Effective_on).AddMinutes(time).ToString("yyyy-MM-dd HH:mm:ss"))), UpdateFlags.Multi);

                                                }
                                            }

                                        }
                                        CommonLog("Second Table Update Method Update completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName);

                                        #endregion

                                        record.JobStatus = "Completed";
                                        record.HitTry = record.HitTry + 1;
                                        record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                        rms.SaveChanges();

                                        responsemessage.status = "true";
                                        responsemessage.Message = "success";

                                        #endregion

                                    }
                                    else
                                    {
                                        #region Second table Insert Fail

                                        record.JobStatus = "Failure";
                                        record.HitTry = record.HitTry + 1;
                                        record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                        rms.SaveChanges();

                                        responsemessage.status = "false";
                                        responsemessage.Message = "Failure";
                                        #endregion
                                    }

                                }
                                else
                                {
                                    #region First table Insert Fail

                                    record.JobStatus = "Failure";
                                    record.HitTry = record.HitTry + 1;
                                    record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                    rms.SaveChanges();

                                    responsemessage.status = "false";
                                    responsemessage.Message = "Failure";

                                    #endregion
                                }
                            }
                            catch (Exception ex)
                            {
                                record.JobStatus = "Failure";
                                record.HitTry = record.HitTry + 1;
                                record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                CommonLog("Error Update Details Ratesheetid=" + record.RateSheetId + ", Error: " + ex.Message);
                            }

                        }

                        #endregion

                        #region Replace

                        else if (job.RequestType == "Replace" && job.FileNameCSV != null)
                        {
                            try
                            {
                                CommonLog("Request Tpe Replace Started.. Ratesheet ID=" + record.RateSheetId);

                                #region Update
                                record.JobStatus = "Progress";
                                record.HitTry = record.HitTry + 1;
                                record.Descriptions = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                rms.SaveChanges();
                                #endregion

                                #region add minutes
                                // int z = Convert.ToInt32(Convert.ToDateTime(record.CreatedOn).ToString("mm")) / 10;
                                int z = Convert.ToInt16(Convert.ToDateTime(record.CreatedOn).ToString("mm").Substring(1, 1));
                                int y = 0;
                                switch (z)
                                {
                                    case 1:
                                        y = 9;
                                        break;
                                    case 8:
                                        y = 7;
                                        break;
                                    case 2:
                                        y = 8;
                                        break;
                                    case 3:
                                        y = 7;
                                        break;
                                    case 4:
                                        y = 11;
                                        break;
                                    case 5:
                                        y = 10;
                                        break;
                                    case 6:
                                        y = 11;
                                        break;
                                    case 7:
                                        y = 8;
                                        break;
                                    case 9:
                                        y = 11;
                                        break;

                                    default:
                                        y = 10;
                                        break;
                                }


                                #endregion

                                #region Getcsvrecords

                                // var batchidvalu = MongoDB.GetCollection<RatesheetBatchID>("RatesheetBatchID").FindOne();
                                var batchidvalu = DateTime.Now.ToString("yyyyMMddHHmmssffff");

                                //  Path = UpdateratesheetRates(record.FileNameCSV, record.ServerNameCSV);
                                Path = ConfigurationManager.AppSettings["ReplaceCSV_URL"].ToString() + record.FileNameCSV;
                                List<Teleboss_Ratesheet_Rate_1> NewResponse = GetRatelistrates(Path, record.RateSheetId.ToString(), batchidvalu, record.CreatedOn, y);


                                var RatesheetId = MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").FindOne(Query<Teleboss_Ratesheet_Status>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()));

                                if (RatesheetId == null)
                                {
                                    CommonLog("Request Tpe Replace Failure No Ratesheet Id Found in Status Table.. Ratesheet ID=" + record.RateSheetId);
                                    record.JobStatus = "Failure";
                                    record.HitTry = record.HitTry + 1;
                                    record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                    rms.SaveChanges();

                                    responsemessage.status = "false";
                                    responsemessage.Message = "Failure";
                                    return responsemessage;
                                }

                                var Ratesheetidvalue = RatesheetId.Active;

                                List<List<Teleboss_Ratesheet_Rate_1>> groups = NewResponse.OrderBy(x => x.Effective_on).GroupBy(x => x.Effective_on).Select(grp => grp.ToList()).ToList();

                                var DelRegioncode = NewResponse.Select(a => a.RegionCode).ToList();

                                #endregion

                                #region First table  Delete 1

                                string TableName = Ratesheetidvalue == "1" ? "Teleboss_Ratesheet_Rate_2" : "Teleboss_Ratesheet_Rate_1";

                                // var DelCodec = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Remove(Query.And(Query<Teleboss_Ratesheet_Rate_1>.NotIn(k => k.RegionCode, DelRegioncode), Query<Teleboss_Ratesheet_Rate_1>.EQ(k => k.RatesheetID, record.RateSheetId.ToString())));

                                //  List<Teleboss_Ratesheet_Rate_1> get = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Find(Query.And(Query<Teleboss_Ratesheet_Rate_1>.NotIn(k => k.RegionCode, DelRegioncode), Query<Teleboss_Ratesheet_Rate_1>.LTE(k => k.Effective_on, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")), Query<Teleboss_Ratesheet_Rate_1>.EQ(k => k.RatesheetID, record.RateSheetId.ToString()))).ToList();

                                var DelCodec = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Remove(Query.And(Query<Teleboss_Ratesheet_Rate_1>.NotIn(k => k.RegionCode, DelRegioncode), Query<Teleboss_Ratesheet_Rate_1>.LTE(k => k.Effective_on, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")), Query<Teleboss_Ratesheet_Rate_1>.EQ(k => k.RatesheetID, record.RateSheetId.ToString())));

                                CommonLog("First Table Replace Method delete completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName);
                                #endregion

                                #region  Table insert
                                // frst table insertion

                                // var Collec = MongoDB.GetCollection<BsonElement>("Teleboss_Ratesheet_Rate_" + Ratesheetidvalue).Insert(json);


                                var Collec = MongoDB.GetCollection<BsonElement>(TableName).InsertBatch(NewResponse.Select(c => new BsonDocument{
                                    //{"Id", c.Id},
                                    {"Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", c.expireAt }
                                    }).ToList());

                                #endregion

                                if (((MongoDB.Driver.WriteConcernResult[])Collec)[0].Response["ok"].ToString() == "1")
                                {
                                    CommonLog("First Table Replace method Insert completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName + "  and Count is=" + NewResponse.Count());

                                    #region First Table Update 1
                                    // Update table 1
                                    foreach (var group in groups)
                                    {

                                        var RegioncodeList = group.Select(a => a.RegionCode).ToList();

                                        // var getlist = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Find(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList))).ToList();

                                        // Old Effective Update
                                        // Commended for 06/09/2017

                                        //var checktable = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.LTE(p => p.Effective_on, group[0].Effective_on), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group[0].Effective_on), UpdateFlags.Multi);

                                        var checktable = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.LTE(p => p.Effective_on, group[0].Effective_on),
                            Query<Teleboss_Ratesheet_Rate_1>.GT(p => p.EndDate, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group[0].Effective_on).Set(p => p.expireAt, Convert.ToDateTime(Convert.ToDateTime(group[0].Effective_on).AddMinutes(time).ToString("yyyy-MM-dd HH:mm:ss"))), UpdateFlags.Multi);


                                        // Future date Update

                                        List<Teleboss_Ratesheet_Rate_1> getfuture = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Find(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.GT(p => p.Effective_on, group[0].Effective_on), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList))).ToList();

                                        if (getfuture.Count != 0)
                                        {
                                            List<List<Teleboss_Ratesheet_Rate_1>> groupss = getfuture.OrderBy(x => x.Effective_on).GroupBy(x => x.Effective_on).Select(grp => grp.ToList()).ToList();

                                            foreach (var group1 in groupss)
                                            {

                                                var regioncodefuture = group1.Select(a => a.RegionCode).ToList();

                                                var checktablefuture = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.EndDate, "2500-01-01 00:00:00"), Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, regioncodefuture)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group1[0].Effective_on).Set(p => p.expireAt, Convert.ToDateTime(Convert.ToDateTime(group[0].Effective_on).AddMinutes(time).ToString("yyyy-MM-dd HH:mm:ss"))), UpdateFlags.Multi);

                                            }
                                        }

                                    }
                                    CommonLog("First Table Replace Method Update completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName);

                                    #endregion

                                    #region update status table

                                    string Ratesheetidvaluenew = Ratesheetidvalue == "1" ? "2" : "1";

                                    var check = MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").Update(Query<Teleboss_Ratesheet_Status>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()),
                                                                  Update<Teleboss_Ratesheet_Status>.Set(c => c.Active, Ratesheetidvaluenew));

                                    // 2nd table insertion
                                    string TableName1 = Ratesheetidvaluenew == "1" ? "Teleboss_Ratesheet_Rate_2" : "Teleboss_Ratesheet_Rate_1";

                                    #endregion

                                    #region second table  Delete 1

                                    var DelCodec2 = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName1).Remove(Query.And(Query<Teleboss_Ratesheet_Rate_1>.NotIn(k => k.RegionCode, DelRegioncode), Query<Teleboss_Ratesheet_Rate_1>.LTE(k => k.Effective_on, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")), Query<Teleboss_Ratesheet_Rate_1>.EQ(k => k.RatesheetID, record.RateSheetId.ToString())));

                                    CommonLog("second Table Replace Method delete completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName1);
                                    #endregion

                                    #region Insert second table

                                    var Collec2 = MongoDB.GetCollection<BsonElement>(TableName1).InsertBatch(NewResponse.Select(c => new BsonDocument{
                                    //{"Id", c.Id },
                                    {"Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", c.expireAt }
                                    }).ToList());

                                    #endregion

                                    if (((MongoDB.Driver.WriteConcernResult[])Collec2)[0].Response["ok"].ToString() == "1")
                                    {
                                        CommonLog("Second Table Replace Method Insert completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName1 + "  and Count is=" + NewResponse.Count());


                                        #region second Table Update 2
                                        // Update table 1
                                        foreach (var group in groups)
                                        {

                                            var RegioncodeList = group.Select(a => a.RegionCode).ToList();



                                            // Old Effective Update

                                            // Commented Pasupathi 06/09/2017

                                            //var checktable = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName1).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.LTE(p => p.Effective_on, group[0].Effective_on), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group[0].Effective_on), UpdateFlags.Multi);

                                            var checktable = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName1).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.LTE(p => p.Effective_on, group[0].Effective_on),
                           Query<Teleboss_Ratesheet_Rate_1>.GT(p => p.EndDate, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group[0].Effective_on).Set(p => p.expireAt, Convert.ToDateTime(Convert.ToDateTime(group[0].Effective_on).AddMinutes(time).ToString("yyyy-MM-dd HH:mm:ss"))), UpdateFlags.Multi);


                                            // Future date Update

                                            List<Teleboss_Ratesheet_Rate_1> getfuture = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName1).Find(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.GT(p => p.Effective_on, group[0].Effective_on), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList))).ToList();

                                            if (getfuture.Count != 0)
                                            {
                                                List<List<Teleboss_Ratesheet_Rate_1>> groupss = getfuture.OrderBy(x => x.Effective_on).GroupBy(x => x.Effective_on).Select(grp => grp.ToList()).ToList();

                                                foreach (var group1 in groupss)
                                                {
                                                    var regioncodefuture = group1.Select(a => a.RegionCode).ToList();

                                                    var checktablefuture = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName1).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.EndDate, "2500-01-01 00:00:00"), Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, regioncodefuture)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group1[0].Effective_on).Set(p => p.expireAt, Convert.ToDateTime(Convert.ToDateTime(group[0].Effective_on).AddMinutes(time).ToString("yyyy-MM-dd HH:mm:ss"))), UpdateFlags.Multi);

                                                }
                                            }

                                        }
                                        CommonLog("Second Table Update Method Update completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName1);

                                        #endregion

                                        record.JobStatus = "Completed";
                                        record.HitTry = record.HitTry + 1;
                                        record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                        rms.SaveChanges();

                                        responsemessage.status = "true";
                                        responsemessage.Message = "success";
                                    }
                                    else
                                    {
                                        CommonLog("second Table Replace Method Insert failure..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName1);
                                        record.JobStatus = "Failure";
                                        record.HitTry = record.HitTry + 1;
                                        record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                        rms.SaveChanges();

                                        responsemessage.status = "false";
                                        responsemessage.Message = "Failure";
                                    }

                                }
                                else
                                {
                                    record.JobStatus = "Failure";
                                    record.HitTry = record.HitTry + 1;
                                    record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                    rms.SaveChanges();

                                    responsemessage.status = "false";
                                    responsemessage.Message = "Failure";
                                }

                            }
                            catch (Exception ex)
                            {
                                record.JobStatus = "Failure";
                                record.HitTry = record.HitTry + 1;
                                record.Descriptions = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                rms.SaveChanges();
                                CommonLog("Error Details Replace Ratesheetid=" + record.RateSheetId + ", Error: " + ex.Message);
                            }
                        }

                        #endregion

                    }
                }
            }
            catch (Exception ex)
            {
                CommonLog("Last Catch  Error: " + ex.Message);
            }
            return responsemessage;
        }

        public SuccessResponse WindowsserviceprintparrellelRatesheet()
        {

            int time = Convert.ToInt32(ConfigurationManager.AppSettings["MongoDBExpireTime"]);

            SuccessResponse responsemessage = new SuccessResponse();
            RatesheetEmail createcsv = new RatesheetEmail();

            try
            {
                MongoClient Client = new MongoClient(ConfigurationManager.AppSettings["MongoDbString"].ToString());
                var MongoDB = Client.GetServer().GetDatabase(ConfigurationManager.AppSettings["MongoDBDatabase"].ToString());

                using (rmsEntities rms = new rmsEntities())
                {
                    string Path = "";
                    var job = rms.jobqueueupdaterates.Where(d => d.JobStatus.ToUpper() == "PENDING" && d.RequestType.ToUpper() != "MAPPING").FirstOrDefault();
                    if (job != null)
                    {
                        var record = rms.jobqueueupdaterates.Where(d => d.ID == job.ID).FirstOrDefault();

                        #region New

                        if (job.RequestType == "New" && job.FileNameCSV != null)
                        {
                            try
                            {
                                CommonLog("Request Tpe New Started.. Ratesheet ID=" + record.RateSheetId);

                                #region Update
                                record.JobStatus = "Progress";
                                record.HitTry = record.HitTry + 1;
                                record.Descriptions = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                rms.SaveChanges();
                                #endregion

                                #region add minutes
                                // int x = Convert.ToInt32(Convert.ToDateTime(record.CreatedOn).ToString("mm")) / 10;
                                int x = Convert.ToInt16(Convert.ToDateTime(record.CreatedOn).ToString("mm").Substring(1, 1));
                                int y = 0;
                                switch (x)
                                {
                                    case 1:
                                        y = 9;
                                        break;
                                    case 8:
                                        y = 7;
                                        break;
                                    case 2:
                                        y = 8;
                                        break;
                                    case 3:
                                        y = 7;
                                        break;
                                    case 4:
                                        y = 11;
                                        break;
                                    case 5:
                                        y = 10;
                                        break;
                                    case 6:
                                        y = 11;
                                        break;
                                    case 7:
                                        y = 8;
                                        break;
                                    case 9:
                                        y = 11;
                                        break;

                                    default:
                                        y = 10;
                                        break;
                                }


                                #endregion

                                #region Getcsvrecords

                                // var batchidvalu = MongoDB.GetCollection<RatesheetBatchID>("RatesheetBatchID").FindOne();

                                var batchidvalu = DateTime.Now.ToString("yyyyMMddHHmmssffff");

                                Path = UpdateratesheetRates(record.FileNameCSV, record.ServerNameCSV);


                                CommonLog("New Method after create Path..Ratesheet ID=" + record.RateSheetId + " ,Path=" + Path);

                                List<Teleboss_Ratesheet_Rate_1> NewResponse = GetRatelistrates(HostingEnvironment.MapPath(Path), record.RateSheetId.ToString(), batchidvalu, record.CreatedOn, y);

                                var Ratesheetidvalue = "1";
                                var RatesheetId = MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").FindOne(Query<Teleboss_Ratesheet_Status>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()));
                                if (RatesheetId == null)
                                {
                                    Teleboss_Ratesheet_Status d = new Teleboss_Ratesheet_Status();
                                    d._id = DateTime.Now.ToString("yyyyMMddHHmmssffff");
                                    d.RatesheetID = record.RateSheetId.ToString();
                                    d.Active = "1";
                                    Ratesheetidvalue = "1";
                                    var Collecstatus = MongoDB.GetCollection<BsonElement>("Teleboss_Ratesheet_Status").Insert(d);
                                }
                                else
                                    Ratesheetidvalue = RatesheetId.Active;

                                #endregion

                                #region First Table Insert

                                // frst table insertion

                                // var Collec = MongoDB.GetCollection<BsonElement>("Teleboss_Ratesheet_Rate_" + Ratesheetidvalue).Insert(json);

                                //   string TableName = Ratesheetidvalue == "1" ? "Teleboss_Ratesheet_Rate_2" : "Teleboss_Ratesheet_Rate_1";
                                string TableName = "Teleboss_Ratesheet_Rate_1";

                                var Collec = MongoDB.GetCollection<BsonElement>(TableName).InsertBatch(NewResponse.Select(c => new BsonDocument{
                                    //{"Id", c.Id},
                                    {"Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", c.expireAt }
                                    }).ToList());



                                #endregion

                                #region second table insertion

                                // change table active tablename
                                if (((MongoDB.Driver.WriteConcernResult[])Collec)[0].Response["ok"].ToString() == "1")
                                {
                                    CommonLog("First Table New Insert completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName + "  and Count is=" + NewResponse.Count());

                                    record.JobStatus = "Completed";
                                    record.HitTry = record.HitTry + 1;
                                    record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                    record.Status = "First Table Completed";
                                    rms.SaveChanges();
                                   

                                    //  string Ratesheetidvaluenew = Ratesheetidvalue == "1" ? "2" : "1";

                                    // var check = MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").Update(Query<Teleboss_Ratesheet_Status>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()),
                                    //        Update<Teleboss_Ratesheet_Status>.Set(c => c.Active, Ratesheetidvaluenew));

                                    // 2nd table insertion

                                    // string TableName1 = Ratesheetidvaluenew == "1" ? "Teleboss_Ratesheet_Rate_2" : "Teleboss_Ratesheet_Rate_1";

                                    string TableName1 = "Teleboss_Ratesheet_Rate_2";

                                    var Collec2 = MongoDB.GetCollection<BsonElement>(TableName1).InsertBatch(NewResponse.Select(c => new BsonDocument{
                                    //{"Id", c.Id },
                                    {"Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", "ISODate("+c.expireAt+")" }
                                    }).ToList());

                                    if (((MongoDB.Driver.WriteConcernResult[])Collec2)[0].Response["ok"].ToString() == "1")
                                    {
                                        CommonLog("second Table New Method Insert completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName1 + "  and Count is=" + NewResponse.Count());
                                        record.JobStatus = "Completed";
                                        record.HitTry = record.HitTry + 1;
                                        record.Status = "Second Table Completed";
                                        record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                        rms.SaveChanges();
                                        responsemessage.status = "true";
                                        responsemessage.Message = "success";
                                    }
                                    else
                                    {
                                        CommonLog("second Table New Insert Failure..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName1);
                                        record.JobStatus = "Failure";
                                        record.HitTry = record.HitTry + 1;
                                        record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                        rms.SaveChanges();

                                        responsemessage.status = "false";
                                        responsemessage.Message = "Failure";
                                    }

                                }
                                else
                                {
                                    CommonLog("First Table New Method Insert failure..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName);
                                    record.JobStatus = "Failure";
                                    record.HitTry = record.HitTry + 1;
                                    record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                    rms.SaveChanges();

                                    responsemessage.status = "false";
                                    responsemessage.Message = "Failure";
                                }
                                #endregion

                            }
                            catch (Exception ex)
                            {
                                record.JobStatus = "FailureCatch";
                                record.HitTry = record.HitTry + 1;
                                record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                rms.SaveChanges();
                                CommonLog("Error Details New Ratesheetid=" + record.RateSheetId + ", Error: " + ex.Message);
                            }

                        }

                        #endregion

                        #region Update

                        else if (job.RequestType == "Update" && job.FileNameCSV != null)
                        {
                            try
                            {
                                CommonLog("Request Tpe Update Started.. Ratesheet ID=" + record.RateSheetId);

                                #region Update
                                record.JobStatus = "Progress";
                                record.HitTry = record.HitTry + 1;
                                record.Descriptions = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                rms.SaveChanges();
                                #endregion

                                #region add minutes
                                // int z = Convert.ToInt32(Convert.ToDateTime(record.CreatedOn).ToString("mm")) / 10;
                                int z = Convert.ToInt16(Convert.ToDateTime(record.CreatedOn).ToString("mm").Substring(1, 1));
                                int y = 0;
                                switch (z)
                                {
                                    case 1:
                                        y = 9;
                                        break;
                                    case 8:
                                        y = 7;
                                        break;
                                    case 2:
                                        y = 8;
                                        break;
                                    case 3:
                                        y = 7;
                                        break;
                                    case 4:
                                        y = 11;
                                        break;
                                    case 5:
                                        y = 10;
                                        break;
                                    case 6:
                                        y = 11;
                                        break;
                                    case 7:
                                        y = 8;
                                        break;
                                    case 9:
                                        y = 11;
                                        break;

                                    default:
                                        y = 10;
                                        break;
                                }


                                #endregion

                                #region Getcsvrecords

                                // var batchidvalu = MongoDB.GetCollection<RatesheetBatchID>("RatesheetBatchID").FindOne();
                                var batchidvalu = DateTime.Now.ToString("yyyyMMddHHmmssffff");

                                Path = UpdateratesheetRates(record.FileNameCSV, record.ServerNameCSV);
                                List<Teleboss_Ratesheet_Rate_1> NewResponse = GetRatelistrates(HostingEnvironment.MapPath(Path), record.RateSheetId.ToString(), batchidvalu, record.CreatedOn, y);


                              //  var RatesheetId = MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").FindOne(Query<Teleboss_Ratesheet_Status>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()));

                                //if (RatesheetId == null)
                                //{
                                //    CommonLog("Request Tpe Update Failure No Ratesheet Id Found in Status Table.. Ratesheet ID=" + record.RateSheetId);
                                //    record.JobStatus = "Failure";
                                //    record.HitTry = record.HitTry + 1;
                                //    record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                //    rms.SaveChanges();

                                //    responsemessage.status = "false";
                                //    responsemessage.Message = "Failure";
                                //    return responsemessage;
                                //}

                               // var Ratesheetidvalue = RatesheetId.Active;

                                List<List<Teleboss_Ratesheet_Rate_1>> groups = NewResponse.OrderBy(x => x.Effective_on).GroupBy(x => x.Effective_on).Select(grp => grp.ToList()).ToList();

                                #endregion

                                #region First Table Insert

                                // frst table insertion

                                // var Collec = MongoDB.GetCollection<BsonElement>("Teleboss_Ratesheet_Rate_" + Ratesheetidvalue).Insert(json);

                                //  string TableName = Ratesheetidvalue == "1" ? "Teleboss_Ratesheet_Rate_2" : "Teleboss_Ratesheet_Rate_1";
                                string TableName = "Teleboss_Ratesheet_Rate_1";


                                var Collec = MongoDB.GetCollection<BsonElement>(TableName).InsertBatch(NewResponse.Select(c => new BsonDocument{
                                    //{"Id", c.Id},
                                    {"Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", c.expireAt }
                                    }).ToList());



                                #endregion

                                if (((MongoDB.Driver.WriteConcernResult[])Collec)[0].Response["ok"].ToString() == "1")
                                {
                                    CommonLog("First Table Update method Insert completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName + "  and Count is=" + NewResponse.Count());

                                    #region First Table Update 1
                                    // Update table 1
                                    foreach (var group in groups)
                                    {
                                        // if (Convert.ToDateTime(group[0].Effective_on).Date != DateTime.UtcNow)
                                        // {
                                        //    var ResponseList = NewResponse.Where(d => d.Effective_on == group[0].Effective_on).ToList();

                                        //var RegioncodeList = ResponseList.Select(a => a.RegionCode).ToList();
                                        var RegioncodeList = group.Select(a => a.RegionCode).ToList();

                                        // var getlist = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Find(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList))).ToList();

                                        // Old Effective Update

                                        // oLD QUERY pASUPATHI cHANGED 09/06/2017
                                        //var checktable = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.LTE(p => p.Effective_on, group[0].Effective_on), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group[0].Effective_on), UpdateFlags.Multi);
                                        var checktable = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.LTE(p => p.Effective_on, group[0].Effective_on), Query<Teleboss_Ratesheet_Rate_1>.GT(p => p.EndDate, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group[0].Effective_on).Set(p => p.expireAt, Convert.ToDateTime(Convert.ToDateTime(group[0].Effective_on).AddMinutes(time).ToString("yyyy-MM-dd HH:mm:ss"))), UpdateFlags.Multi);


                                        // Future date Update

                                        List<Teleboss_Ratesheet_Rate_1> getfuture = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Find(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.GT(p => p.Effective_on, group[0].Effective_on), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList))).ToList();

                                        if (getfuture.Count != 0)
                                        {
                                            List<List<Teleboss_Ratesheet_Rate_1>> groupss = getfuture.OrderBy(x => x.Effective_on).GroupBy(x => x.Effective_on).Select(grp => grp.ToList()).ToList();
                                            foreach (var group1 in groupss)
                                            {

                                                var regioncodefuture = group1.Select(a => a.RegionCode).ToList();


                                                var checktablefuture = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.EndDate, "2500-01-01 00:00:00"), Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, regioncodefuture)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group1[0].Effective_on).Set(p => p.expireAt, Convert.ToDateTime(Convert.ToDateTime(group[0].Effective_on).AddMinutes(time).ToString("yyyy-MM-dd HH:mm:ss"))), UpdateFlags.Multi);

                                            }
                                        }

                                    }
                                    CommonLog("First Table Replace Method Update completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName);

                                    #endregion

                                    #region second table insertion

                                    // Change Table Name
                                    // string Ratesheetidvaluenew = Ratesheetidvalue == "1" ? "2" : "1";

                                    //  var check = MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").Update(Query<Teleboss_Ratesheet_Status>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()),
                                    //                         Update<Teleboss_Ratesheet_Status>.Set(c => c.Active, Ratesheetidvaluenew));

                                    // 2nd table insertion
                                    // string TableName1 = Ratesheetidvaluenew == "1" ? "Teleboss_Ratesheet_Rate_2" : "Teleboss_Ratesheet_Rate_1";

                                    record.JobStatus = "Completed";
                                    record.HitTry = record.HitTry + 1;
                                    record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                    record.Status = "First Table Completed";
                                    rms.SaveChanges();

                                    string TableName1 = "Teleboss_Ratesheet_Rate_2";

                                    var Collec2 = MongoDB.GetCollection<BsonElement>(TableName1).InsertBatch(NewResponse.Select(c => new BsonDocument{
                                    //{"Id", c.Id },
                                    {"Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", c.expireAt }
                                    }).ToList());

                                    #endregion

                                    #region Second Table Update

                                    if (((MongoDB.Driver.WriteConcernResult[])Collec2)[0].Response["ok"].ToString() == "1")
                                    {

                                        CommonLog("Second Table Update method Insert completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName1 + "  and Count is=" + NewResponse.Count());

                                        #region second Table Update 2
                                        // Update table 1
                                        foreach (var group in groups)
                                        {

                                            var RegioncodeList = group.Select(a => a.RegionCode).ToList();



                                            // Old Effective Update

                                            //var checktable = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName1).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.LTE(p => p.Effective_on, group[0].Effective_on), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group[0].Effective_on), UpdateFlags.Multi);

                                            var checktable = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName1).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.LTE(p => p.Effective_on, group[0].Effective_on), Query<Teleboss_Ratesheet_Rate_1>.GT(p => p.EndDate, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group[0].Effective_on).Set(p => p.expireAt, Convert.ToDateTime(Convert.ToDateTime(group[0].Effective_on).AddMinutes(time).ToString("yyyy-MM-dd HH:mm:ss"))), UpdateFlags.Multi);


                                            // Future date Update

                                            List<Teleboss_Ratesheet_Rate_1> getfuture = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName1).Find(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.GT(p => p.Effective_on, group[0].Effective_on), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList))).ToList();

                                            if (getfuture.Count != 0)
                                            {
                                                List<List<Teleboss_Ratesheet_Rate_1>> groupss = getfuture.OrderBy(x => x.Effective_on).GroupBy(x => x.Effective_on).Select(grp => grp.ToList()).ToList();

                                                foreach (var group1 in groupss)
                                                {
                                                    var regioncodefuture = group1.Select(a => a.RegionCode).ToList();

                                                    var checktablefuture = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName1).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.EndDate, "2500-01-01 00:00:00"), Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, regioncodefuture)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group1[0].Effective_on).Set(p => p.expireAt, Convert.ToDateTime(Convert.ToDateTime(group[0].Effective_on).AddMinutes(time).ToString("yyyy-MM-dd HH:mm:ss"))), UpdateFlags.Multi);

                                                }
                                            }

                                        }
                                        CommonLog("Second Table Update Method Update completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName);

                                        #endregion

                                        record.JobStatus = "Completed";
                                        record.HitTry = record.HitTry + 1;
                                        record.Status = "Second Table Completed";
                                        record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                        rms.SaveChanges();

                                        responsemessage.status = "true";
                                        responsemessage.Message = "success";

                                        #endregion

                                    }
                                    else
                                    {
                                        #region Second table Insert Fail

                                        record.JobStatus = "Failure";
                                        record.HitTry = record.HitTry + 1;
                                        record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                        rms.SaveChanges();

                                        responsemessage.status = "false";
                                        responsemessage.Message = "Failure";
                                        #endregion
                                    }

                                }
                                else
                                {
                                    #region First table Insert Fail

                                    record.JobStatus = "Failure";
                                    record.HitTry = record.HitTry + 1;
                                    record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                    rms.SaveChanges();

                                    responsemessage.status = "false";
                                    responsemessage.Message = "Failure";

                                    #endregion
                                }
                            }
                            catch (Exception ex)
                            {
                                record.JobStatus = "Failure";
                                record.HitTry = record.HitTry + 1;
                                record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                CommonLog("Error Update Details Ratesheetid=" + record.RateSheetId + ", Error: " + ex.Message);
                            }

                        }

                        #endregion

                        #region Replace

                        else if (job.RequestType == "Replace" && job.FileNameCSV != null)
                        {
                            try
                            {
                                CommonLog("Request Tpe Replace Started.. Ratesheet ID=" + record.RateSheetId);

                                #region Update
                                record.JobStatus = "Progress";
                                record.HitTry = record.HitTry + 1;
                                record.Descriptions = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                rms.SaveChanges();
                                #endregion

                                #region add minutes
                                // int z = Convert.ToInt32(Convert.ToDateTime(record.CreatedOn).ToString("mm")) / 10;
                                int z = Convert.ToInt16(Convert.ToDateTime(record.CreatedOn).ToString("mm").Substring(1, 1));
                                int y = 0;
                                switch (z)
                                {
                                    case 1:
                                        y = 9;
                                        break;
                                    case 8:
                                        y = 7;
                                        break;
                                    case 2:
                                        y = 8;
                                        break;
                                    case 3:
                                        y = 7;
                                        break;
                                    case 4:
                                        y = 11;
                                        break;
                                    case 5:
                                        y = 10;
                                        break;
                                    case 6:
                                        y = 11;
                                        break;
                                    case 7:
                                        y = 8;
                                        break;
                                    case 9:
                                        y = 11;
                                        break;

                                    default:
                                        y = 10;
                                        break;
                                }


                                #endregion

                                #region Getcsvrecords

                                // var batchidvalu = MongoDB.GetCollection<RatesheetBatchID>("RatesheetBatchID").FindOne();
                                var batchidvalu = DateTime.Now.ToString("yyyyMMddHHmmssffff");

                                //  Path = UpdateratesheetRates(record.FileNameCSV, record.ServerNameCSV);
                                Path = ConfigurationManager.AppSettings["ReplaceCSV_URL"].ToString() + record.FileNameCSV;
                                List<Teleboss_Ratesheet_Rate_1> NewResponse = GetRatelistrates(Path, record.RateSheetId.ToString(), batchidvalu, record.CreatedOn, y);


                                //var RatesheetId = MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").FindOne(Query<Teleboss_Ratesheet_Status>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()));

                                //if (RatesheetId == null)
                                //{
                                //    CommonLog("Request Tpe Replace Failure No Ratesheet Id Found in Status Table.. Ratesheet ID=" + record.RateSheetId);
                                //    record.JobStatus = "Failure";
                                //    record.HitTry = record.HitTry + 1;
                                //    record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                //    rms.SaveChanges();

                                //    responsemessage.status = "false";
                                //    responsemessage.Message = "Failure";
                                //    return responsemessage;
                                //}

                                //var Ratesheetidvalue = RatesheetId.Active;

                                List<List<Teleboss_Ratesheet_Rate_1>> groups = NewResponse.OrderBy(x => x.Effective_on).GroupBy(x => x.Effective_on).Select(grp => grp.ToList()).ToList();

                                var DelRegioncode = NewResponse.Select(a => a.RegionCode).ToList();

                                #endregion

                                #region First table  Delete 1

                                //  string TableName = Ratesheetidvalue == "1" ? "Teleboss_Ratesheet_Rate_2" : "Teleboss_Ratesheet_Rate_1";

                                string TableName = "Teleboss_Ratesheet_Rate_1";

                                // var DelCodec = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Remove(Query.And(Query<Teleboss_Ratesheet_Rate_1>.NotIn(k => k.RegionCode, DelRegioncode), Query<Teleboss_Ratesheet_Rate_1>.EQ(k => k.RatesheetID, record.RateSheetId.ToString())));

                                //  List<Teleboss_Ratesheet_Rate_1> get = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Find(Query.And(Query<Teleboss_Ratesheet_Rate_1>.NotIn(k => k.RegionCode, DelRegioncode), Query<Teleboss_Ratesheet_Rate_1>.LTE(k => k.Effective_on, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")), Query<Teleboss_Ratesheet_Rate_1>.EQ(k => k.RatesheetID, record.RateSheetId.ToString()))).ToList();

                                var DelCodec = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Remove(Query.And(Query<Teleboss_Ratesheet_Rate_1>.NotIn(k => k.RegionCode, DelRegioncode), Query<Teleboss_Ratesheet_Rate_1>.LTE(k => k.Effective_on, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")), Query<Teleboss_Ratesheet_Rate_1>.EQ(k => k.RatesheetID, record.RateSheetId.ToString())));

                                CommonLog("First Table Replace Method delete completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName);
                                #endregion

                                #region  Table insert
                                // frst table insertion

                                // var Collec = MongoDB.GetCollection<BsonElement>("Teleboss_Ratesheet_Rate_" + Ratesheetidvalue).Insert(json);


                                var Collec = MongoDB.GetCollection<BsonElement>(TableName).InsertBatch(NewResponse.Select(c => new BsonDocument{
                                    //{"Id", c.Id},
                                    {"Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", c.expireAt }
                                    }).ToList());

                                #endregion

                                if (((MongoDB.Driver.WriteConcernResult[])Collec)[0].Response["ok"].ToString() == "1")
                                {
                                    CommonLog("First Table Replace method Insert completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName + "  and Count is=" + NewResponse.Count());

                                    #region First Table Update 1
                                    // Update table 1
                                    foreach (var group in groups)
                                    {

                                        var RegioncodeList = group.Select(a => a.RegionCode).ToList();

                                        // var getlist = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Find(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList))).ToList();

                                        // Old Effective Update
                                        // Commended for 06/09/2017

                                        //var checktable = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.LTE(p => p.Effective_on, group[0].Effective_on), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group[0].Effective_on), UpdateFlags.Multi);

                                        var checktable = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.LTE(p => p.Effective_on, group[0].Effective_on),
                            Query<Teleboss_Ratesheet_Rate_1>.GT(p => p.EndDate, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group[0].Effective_on).Set(p => p.expireAt, Convert.ToDateTime(Convert.ToDateTime(group[0].Effective_on).AddMinutes(time).ToString("yyyy-MM-dd HH:mm:ss"))), UpdateFlags.Multi);


                                        // Future date Update

                                        List<Teleboss_Ratesheet_Rate_1> getfuture = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Find(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.GT(p => p.Effective_on, group[0].Effective_on), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList))).ToList();

                                        if (getfuture.Count != 0)
                                        {
                                            List<List<Teleboss_Ratesheet_Rate_1>> groupss = getfuture.OrderBy(x => x.Effective_on).GroupBy(x => x.Effective_on).Select(grp => grp.ToList()).ToList();

                                            foreach (var group1 in groupss)
                                            {

                                                var regioncodefuture = group1.Select(a => a.RegionCode).ToList();

                                                var checktablefuture = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.EndDate, "2500-01-01 00:00:00"), Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, regioncodefuture)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group1[0].Effective_on).Set(p => p.expireAt, Convert.ToDateTime(Convert.ToDateTime(group[0].Effective_on).AddMinutes(time).ToString("yyyy-MM-dd HH:mm:ss"))), UpdateFlags.Multi);

                                            }
                                        }

                                    }
                                    CommonLog("First Table Replace Method Update completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName);

                                    #endregion

                                    #region update status table

                                    //string Ratesheetidvaluenew = Ratesheetidvalue == "1" ? "2" : "1";

                                    //var check = MongoDB.GetCollection<Teleboss_Ratesheet_Status>("Teleboss_Ratesheet_Status").Update(Query<Teleboss_Ratesheet_Status>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()),
                                    //                              Update<Teleboss_Ratesheet_Status>.Set(c => c.Active, Ratesheetidvaluenew));

                                    // 2nd table insertion
                                    // string TableName1 = Ratesheetidvaluenew == "1" ? "Teleboss_Ratesheet_Rate_2" : "Teleboss_Ratesheet_Rate_1";

                                    record.JobStatus = "Completed";
                                    record.HitTry = record.HitTry + 1;
                                    record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                    record.Status = "First Table Completed";
                                    rms.SaveChanges();

                                    string TableName1 = "Teleboss_Ratesheet_Rate_2";

                                    #endregion

                                    #region second table  Delete 1

                                    var DelCodec2 = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName1).Remove(Query.And(Query<Teleboss_Ratesheet_Rate_1>.NotIn(k => k.RegionCode, DelRegioncode), Query<Teleboss_Ratesheet_Rate_1>.LTE(k => k.Effective_on, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")), Query<Teleboss_Ratesheet_Rate_1>.EQ(k => k.RatesheetID, record.RateSheetId.ToString())));

                                    CommonLog("second Table Replace Method delete completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName1);
                                    #endregion

                                    #region Insert second table

                                    var Collec2 = MongoDB.GetCollection<BsonElement>(TableName1).InsertBatch(NewResponse.Select(c => new BsonDocument{
                                    //{"Id", c.Id },
                                    {"Effective_on", c.Effective_on },
                                    {"Call_rate", c.Call_rate },
                                    {"From_day", c.From_day },
                                    {"From_hour", c.From_hour },
                                    {"To_day",c.To_day },
                                    {"To_hour", c.To_hour },
                                    {"Grace_period", c.Grace_period },
                                    {"Minimal_time", c.Minimal_time },
                                    {"Resolution", c.Resolution },
                                    {"ngt_region_codeId", c.ngt_region_codeId },
                                    {"RatesheetID", c.RatesheetID },
                                    {"Description", c.Description },
                                    {"Connection_charge", c.Connection_charge },
                                    {"Active", c.Active },
                                    {"ngt_PartitionId", c.ngt_PartitionId },
                                    {"Priority", c.Priority },
                                    {"Trunck", c.Trunck },
                                    {"BatchID", c.BatchID },
                                    {"CreatedOn", c.CreatedOn },
                                    {"Start_Pulse", c.Start_Pulse },
                                    {"Next_Pulse", c.Next_Pulse },
                                    {"EndDate", c.EndDate },
                                    {"RegionCode", c.RegionCode },
                                    {"RegionName", c.RegionName },
                                    {"expireAt", c.expireAt }
                                    }).ToList());

                                    #endregion

                                    if (((MongoDB.Driver.WriteConcernResult[])Collec2)[0].Response["ok"].ToString() == "1")
                                    {
                                        CommonLog("Second Table Replace Method Insert completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName1 + "  and Count is=" + NewResponse.Count());


                                        #region second Table Update 2
                                        // Update table 1
                                        foreach (var group in groups)
                                        {

                                            var RegioncodeList = group.Select(a => a.RegionCode).ToList();



                                            // Old Effective Update

                                            // Commented Pasupathi 06/09/2017

                                            //var checktable = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName1).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.LTE(p => p.Effective_on, group[0].Effective_on), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group[0].Effective_on), UpdateFlags.Multi);

                                            var checktable = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName1).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.LTE(p => p.Effective_on, group[0].Effective_on),
                           Query<Teleboss_Ratesheet_Rate_1>.GT(p => p.EndDate, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group[0].Effective_on).Set(p => p.expireAt, Convert.ToDateTime(Convert.ToDateTime(group[0].Effective_on).AddMinutes(time).ToString("yyyy-MM-dd HH:mm:ss"))), UpdateFlags.Multi);


                                            // Future date Update

                                            List<Teleboss_Ratesheet_Rate_1> getfuture = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName1).Find(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.GT(p => p.Effective_on, group[0].Effective_on), Query<Teleboss_Ratesheet_Rate_1>.NE(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, RegioncodeList))).ToList();

                                            if (getfuture.Count != 0)
                                            {
                                                List<List<Teleboss_Ratesheet_Rate_1>> groupss = getfuture.OrderBy(x => x.Effective_on).GroupBy(x => x.Effective_on).Select(grp => grp.ToList()).ToList();

                                                foreach (var group1 in groupss)
                                                {
                                                    var regioncodefuture = group1.Select(a => a.RegionCode).ToList();

                                                    var checktablefuture = MongoDB.GetCollection<Teleboss_Ratesheet_Rate_1>(TableName1).Update(Query.And(Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.RatesheetID, record.RateSheetId.ToString()), Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.EndDate, "2500-01-01 00:00:00"), Query<Teleboss_Ratesheet_Rate_1>.EQ(p => p.BatchID, batchidvalu), Query<Teleboss_Ratesheet_Rate_1>.In(p => p.RegionCode, regioncodefuture)), Update<Teleboss_Ratesheet_Rate_1>.Set(p => p.EndDate, group1[0].Effective_on).Set(p => p.expireAt, Convert.ToDateTime(Convert.ToDateTime(group[0].Effective_on).AddMinutes(time).ToString("yyyy-MM-dd HH:mm:ss"))), UpdateFlags.Multi);

                                                }
                                            }

                                        }
                                        CommonLog("Second Table Update Method Update completed..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName1);

                                        #endregion

                                        record.JobStatus = "Completed";
                                        record.HitTry = record.HitTry + 1;
                                        record.Status = "Second Table Completed";
                                        record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                        rms.SaveChanges();

                                        responsemessage.status = "true";
                                        responsemessage.Message = "success";
                                    }
                                    else
                                    {
                                        CommonLog("second Table Replace Method Insert failure..Ratesheet ID=" + record.RateSheetId + " ,Table Name=" + TableName1);
                                        record.JobStatus = "Failure";
                                        record.HitTry = record.HitTry + 1;
                                        record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                        rms.SaveChanges();

                                        responsemessage.status = "false";
                                        responsemessage.Message = "Failure";
                                    }

                                }
                                else
                                {
                                    record.JobStatus = "Failure";
                                    record.HitTry = record.HitTry + 1;
                                    record.Currency = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                    rms.SaveChanges();

                                    responsemessage.status = "false";
                                    responsemessage.Message = "Failure";
                                }

                            }
                            catch (Exception ex)
                            {
                                record.JobStatus = "Failure";
                                record.HitTry = record.HitTry + 1;
                                record.Descriptions = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                rms.SaveChanges();
                                CommonLog("Error Details Replace Ratesheetid=" + record.RateSheetId + ", Error: " + ex.Message);
                            }
                        }

                        #endregion

                    }
                }
            }
            catch (Exception ex)
            {
                CommonLog("Last Catch  Error: " + ex.Message);
            }
            return responsemessage;
        }

        public SuccessResponse UpdateRatesToDBandServer(Int32 newRateSheetId, string NewFleName2, string partitionid, Int32 jobqueueID, string ServerCsvName)
        {
            SuccessResponse responsemessage = new SuccessResponse();
            string laststatusis = "0";
            string csv_import_update = "temp" + NewFleName2;
            csv_import_update = csv_import_update.Substring(0, csv_import_update.Length - 4);
            int flag = 0;
            string dataStr = "";
            //  MySqlConnection conn = new MySqlConnection(ConfigurationManager.AppSettings["Connstring"]);
            MySqlConnection conn = new MySqlConnection(ConfigurationManager.ConnectionStrings["rmsconn"].ToString());

            try
            {
                conn.Open();
                //int n = 0;
                // int p = 3 / n;
                string sql = "drop table IF EXISTS " + csv_import_update + ";CREATE TEMPORARY TABLE " + csv_import_update + "(ID int primary key auto_increment,code varchar(20),codename varchar(255),rate varchar(20),status varchar(20),date varchar(50),startpulse varchar(20),nextpulse varchar(20),enddate varchar(50));";
                MySqlCommand cmd = new MySqlCommand(sql, conn);
                int rdr = cmd.ExecuteNonQuery();
                string query = "LOAD DATA INFILE '" + ConfigurationManager.AppSettings["tempUrl"].ToString() + NewFleName2 + "' INTO TABLE " + csv_import_update + " FIELDS TERMINATED BY ',' ENCLOSED BY '\"' LINES TERMINATED BY '\n' IGNORE 1 ROWS (code,codename,rate,status,date,startpulse,nextpulse,enddate);";
                MySqlCommand cmd22 = new MySqlCommand(query, conn);
                int rdr22 = cmd22.ExecuteNonQuery();
                if (rdr22 != -1)
                    UpdateError("UpdateRatesToDBandServer function  filename", NewFleName2 + " LOAD DATA INFILE successfully", "RatesheetLogs.txt", "", false);
                else
                    UpdateError("UpdateRatesToDBandServer function filename", NewFleName2 + "LOAD DATA INFILE fail", "RatesheetLogs.txt", "", false);


                // pasupathi added new commend
                string sqlquerydel = "delete from " + csv_import_update + " where date is null or date='';";
                MySqlCommand cmddel = new MySqlCommand(sqlquerydel, conn);
                int rdrdel = cmddel.ExecuteNonQuery();

                cmd.Connection = conn;
                cmd.CommandText = "check_regionCodeUpdateNew";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@csv_table1", csv_import_update);
                cmd.Parameters["@csv_table1"].Direction = ParameterDirection.Input;
                cmd.Parameters.AddWithValue("@partitionuserID", Convert.ToInt32(partitionid));
                cmd.Parameters["@partitionuserID"].Direction = ParameterDirection.Input;
                cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                MySqlDataReader rdr2 = cmd.ExecuteReader();
                List<testNewservice> testrt = new List<testNewservice>();
                while (rdr2.Read())
                {
                    testrt.Add(new testNewservice() { code = rdr2[0].ToString(), codename = rdr2[1].ToString() });
                }
                rdr2.Close();
                UpdateError("UpdateRatesToDBandServer function file name" + NewFleName2, "Number of new region code= " + testrt.Count, "RatesheetLogs.txt", "", false);
                if (testrt.Count > 0)
                {
                    for (int begin = 0; begin < testrt.Count; begin++)
                    {
                        string sql1 = "insert into ngt_region_code (Country_code, Area_code,description, ngt_region_code_groupId, ngt_PartitionId) values ('" + testrt[begin].code + "','','" + testrt[begin].codename.Replace("'", " ") + "','1'," + partitionid + ");"; //rdr2[0] + "','','" + rdr2[1] + "','1'," + partitionid + ");";
                        MySqlCommand cmd1 = new MySqlCommand(sql1, conn);
                        MySqlDataReader rdr1 = cmd1.ExecuteReader();
                        rdr1.Close();
                    }
                    UpdateError("UpdatesToDB function ", "New region code successfully Inserted.", "RatesheetLogs.txt", "", false);
                }
                //  cmd.Connection = conn;
                // cmd.CommandText = "insertRegionCode";
                // cmd.CommandType = CommandType.StoredProcedure;
                // cmd.Parameters.AddWithValue("@ngt_PartitionId", Convert.ToInt32(partitionid));
                //cmd.Parameters["@ngt_PartitionId"].Direction = ParameterDirection.Input;
                //  cmd.Parameters.Add("@result", SqlDbType.Int);
                //  cmd.Parameters["@result"].Direction = ParameterDirection.Output;

                string msg = "";
                try
                {
                    cmd.Connection = conn;
                    cmd.CommandText = "updatesRateNew_new";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@partitionId", Convert.ToInt32(partitionid));
                    cmd.Parameters["@partitionId"].Direction = ParameterDirection.Input;
                    cmd.Parameters.AddWithValue("@ratesheetId", Convert.ToInt32(newRateSheetId));
                    cmd.Parameters["@ratesheetId"].Direction = ParameterDirection.Input;
                    cmd.Parameters.AddWithValue("@closedate", Convert.ToDateTime(DateTime.Now).ToString("yyyy-MM-dd 00:00:00"));
                    cmd.Parameters["@closedate"].Direction = ParameterDirection.Input;
                    cmd.Parameters.AddWithValue("@csv_table", csv_import_update);
                    cmd.Parameters["@csv_table"].Direction = ParameterDirection.Input;
                    cmd.Parameters.AddWithValue("@ReqestType", "Update");
                    cmd.Parameters["@ReqestType"].Direction = ParameterDirection.Input;
                    cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                    MySqlDataReader rdr3 = cmd.ExecuteReader();
                    dataStr = "1";
                    rdr3.Close();

                    UpdateError("updatesRateNew_new SP Function ", "Sp Completed Successfully", "RatesheetLogs.txt", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff"), false);

                }
                catch (Exception ex)
                {
                    UpdateError("UpdateRatesToDBandServer exception error " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "file name " + NewFleName2, false);
                    dataStr = "";
                    msg = ex.Message;
                }
                SuccessResponse response11 = new SuccessResponse();
                if (dataStr != "")
                {
                    // response11 = UpdateRatesNew(newRateSheetId, updatedby, "true", "Update", jobqueueID);
                    response11 = UpdateRatesDB(newRateSheetId, "true", jobqueueID);

                    if (response11.status == "true")
                    {

                        laststatusis = response11.Value;
                        List<ratesheetservermap> list = new List<ratesheetservermap>();
                        list = ViewRatesheetServerMappingfunction(0, newRateSheetId);
                        if (list != null)
                        {
                            UpdateError("UpdateRatesToDBandServer View Ratesheet Server Mapping= " + list.Count, "", "RatesheetLogs.txt", "file name " + NewFleName2, false);
                            if (list.Count > 0)
                            {
                                foreach (var a in list)
                                {

                                    SuccessResponse respos = new SuccessResponse();
                                    SuccessResponse reqrespon = new SuccessResponse();
                                    //shripalrespos = PushRatesheetToServerNew(a.ID, "Automatic", "Batch", "",partitionid);
                                    //  UpdateError("UpdateRatesToDBandServer PushRatesheetToServerUpdate before process= " + a.ID, "Automatic,Batch", "RatesheetLogs.txt", "file name " + NewFleName2, false);
                                    if (a.Server_ID != Convert.ToInt16(ConfigurationManager.AppSettings["VCSDEMO"]) &&
                                             a.Server_ID != Convert.ToInt16(ConfigurationManager.AppSettings["UKJERA"])
                                        &&
                                               a.Server_ID != Convert.ToInt16(ConfigurationManager.AppSettings["USJERA"]))
                                    {
                                        using (rmsEntities rms = new rmsEntities())
                                        {
                                            var DetailsServernexge = rms.server_details.FirstOrDefault(d => d.ServerID == a.Server_ID);


                                            if (DetailsServernexge.ServerType != Convert.ToInt32(ConfigurationManager.AppSettings["NewNexgeServerTypeTest"]) && DetailsServernexge.ServerType != Convert.ToInt32(ConfigurationManager.AppSettings["NewNexgeServerType"]))
                                            {
                                                if (DetailsServernexge.ServerType != Convert.ToInt32(ConfigurationManager.AppSettings["OldNexgeType"]))
                                                    respos = PushRatesheetToServerUpdate(a.ID, "Automatic", "Batch", "", partitionid, NewFleName2, ServerCsvName, newRateSheetId);
                                                else
                                                    respos.status = "success";

                                            }
                                            else
                                                respos.status = "success";
                                        }
                                    }

                                    else
                                        respos.status = "success";

                                    if (respos.status == "success")
                                    {
                                        reqrespon = UpdateRatesToserver(newRateSheetId, a.ID, Convert.ToInt32(laststatusis), "true", jobqueueID);
                                    }
                                    else
                                    {
                                        reqrespon = UpdateRatesToserver(newRateSheetId, a.ID, Convert.ToInt32(laststatusis), "false", jobqueueID);
                                    }
                                    laststatusis = "0";
                                    if (reqrespon.status == "true")
                                        responsemessage.status = "true";
                                    responsemessage.Message = responsemessage.Message + " " + reqrespon.Message;
                                }
                            }
                            else
                            {
                                response11 = UpdateRatesDB(newRateSheetId, "notmap", jobqueueID);
                                //  laststatusis = "0";
                                responsemessage.status = "false";
                                responsemessage.Message = responsemessage.Message + " " + response11.Message;
                            }
                        }
                        else
                        {
                            UpdateError("UpdateRatesToDBandServer View Ratesheet Server Mapping= No Mapping ", "", "RatesheetLogs.txt", "file name " + NewFleName2, false);
                            response11 = UpdateRatesDB(newRateSheetId, "notmap", jobqueueID);
                            //  laststatusis = "0";
                            responsemessage.status = "false";
                            responsemessage.Message = responsemessage.Message + " " + response11.Message;
                        }
                    }
                }
                else
                {
                    response11 = UpdateRatesDB(newRateSheetId, msg, jobqueueID);
                    responsemessage.status = response11.status;
                    responsemessage.Message = response11.Message;
                }
                try
                {
                    // Pasupathi Commented

                    //FtpWebRequest request1 = (FtpWebRequest)WebRequest.Create(ConfigurationManager.AppSettings["ftpUrl"].ToString() + NewFleName2);
                    //request1.Method = WebRequestMethods.Ftp.DeleteFile;
                    //request1.Credentials = new NetworkCredential(ConfigurationManager.AppSettings["ftpUser"].ToString(), ConfigurationManager.AppSettings["ftpPassword"].ToString());
                    //FtpWebResponse response = (FtpWebResponse)request1.GetResponse();
                    //response.Close();
                }
                catch (Exception ex)
                {
                    UpdateError("UpdateRatesToDBandServer exception FTP ratesheet delete error " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "file name " + NewFleName2, false);
                }
            }
            catch (Exception ex)
            {
                UpdateError("UpdateRatesToDBandServer exception error " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "", false);
                string exceptionmessage = ex.Message;// "The timeout period elapsed prior to obtaining a connection from the pool.  This may have occurred because all pooled connections were in use and max pool size was reached";// ex.Message;

                if (exceptionmessage.Contains(ConfigurationManager.AppSettings["ErrorPool"].ToString()))
                {
                    responsemessage.status = "Delay";
                    responsemessage.Message = ex.Message;
                }
                else
                {
                    responsemessage.status = "false";
                    responsemessage.Message = ex.Message;
                }

            }
            finally
            {
                conn.Close();
            }
            return responsemessage;
        }

        public SuccessResponse UpdateRatesToserver(Int32 RatesheetID, Int32 MappingID, Int32 UpdatedID, string status, Int32 jobqueueID)
        {
            SuccessResponse responsemessage = new SuccessResponse();
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {

                    server_ratesheet_map srm = rms.server_ratesheet_map.Where(e => e.ID == MappingID).FirstOrDefault();
                    server_details sd = rms.server_details.Where(e => e.ServerID == srm.Server_ID).FirstOrDefault();
                    if (UpdatedID != 0)
                    {
                        ratesheetaddupdatestatu ratestatusold = rms.ratesheetaddupdatestatus.Where(e => e.ID == UpdatedID).FirstOrDefault();

                        ratestatusold.UpdatedDate = DateTime.Now;
                        ratestatusold.ServerID = Convert.ToInt32(srm.Server_ID);
                        ratestatusold.ServerRatesheetID = srm.ServerRatesheetID;// Convert.ToInt32(srm.ServerRatesheetID);
                        ratestatusold.ServerRatesheetName = srm.ServerRatesheetName;
                        ratestatusold.ServerName = sd.ServerName;
                        if (status == "true")
                        {
                            ratestatusold.ServerStstus = "Complete";
                            ratestatusold.CompleteStatus = "Complete";
                            responsemessage.status = "true";
                            // responsemessage.Message = "Ratesheet updated in database and Server pushed successfully";
                            responsemessage.Message = sd.ServerName + " Server pushing success";
                        }
                        else
                        {
                            ratestatusold.ServerStstus = "Failure";
                            responsemessage.status = "false";
                            responsemessage.Message = "Ratesheet updated in database but rates not pushed to server";
                            responsemessage.Message = sd.ServerName + " server pushing fail";
                        }

                        rms.SaveChanges();
                    }
                    else
                    {
                        var ratename = (from rs in rms.ngt_ratesheet where rs.RatesheetID == RatesheetID select rs.RatesheetName).FirstOrDefault();
                        var ratestatusbatchid = (from rs in rms.ratesheetaddupdatestatus where rs.JobsQueueID == jobqueueID select rs.BatchID).FirstOrDefault();

                        var raterequesttype = (from jq in rms.jobqueues where jq.ID == jobqueueID select jq.RequestType).FirstOrDefault();

                        ratesheetaddupdatestatu ratestatusnew = new ratesheetaddupdatestatu();
                        ratestatusnew.RatesheetID = RatesheetID;
                        ratestatusnew.RatesheetName = ratename;

                        ratestatusnew.RequestType = raterequesttype;// "Update";
                        ratestatusnew.BatchID = ratestatusbatchid;
                        ratestatusnew.JobsQueueID = jobqueueID;


                        ratestatusnew.UpdatedDate = DateTime.Now;
                        ratestatusnew.ServerID = Convert.ToInt32(srm.Server_ID);
                        ratestatusnew.ServerRatesheetID = srm.ServerRatesheetID;// Convert.ToInt32(srm.ServerRatesheetID);
                        ratestatusnew.ServerRatesheetName = srm.ServerRatesheetName;
                        ratestatusnew.ServerName = sd.ServerName;
                        ratestatusnew.DBstatus = "Complete";
                        if (status == "true")
                        {

                            ratestatusnew.ServerStstus = "Complete";
                            ratestatusnew.CompleteStatus = "Complete";
                            responsemessage.status = "true";
                            responsemessage.Message = sd.ServerName + " Server pushing success";
                        }
                        else
                        {
                            ratestatusnew.ServerStstus = "Failure";
                            ratestatusnew.CompleteStatus = "Pending";
                            responsemessage.status = "false";
                            responsemessage.Message = sd.ServerName + " server pushing fail";
                        }
                        rms.ratesheetaddupdatestatus.Add(ratestatusnew);
                        rms.SaveChanges();
                    }

                }

            }
            catch (Exception ex)
            {
                UpdateError("UpdateRatesToserver exception error " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "", false);
                responsemessage.status = "false";
                responsemessage.Message = ex.Message;
            }
            finally
            {

            }

            return responsemessage;
        }

        public SuccessResponse UpdateRatesToserverParellel(Int32 RatesheetID, Int32 MappingID, Int32 UpdatedID, string status, Int32 jobqueueID)
        {
            SuccessResponse responsemessage = new SuccessResponse();
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {

                    server_ratesheet_map srm = rms.server_ratesheet_map.Where(e => e.ID == MappingID).FirstOrDefault();
                    server_details sd = rms.server_details.Where(e => e.ServerID == srm.Server_ID).FirstOrDefault();
                    if (UpdatedID != 0)
                    {
                        //ratesheetaddupdatestatu ratestatusold = rms.ratesheetaddupdatestatus.Where(e => e.ID == UpdatedID).FirstOrDefault();
                        ratesheetaddupdatestatu ratestatusold = rms.ratesheetaddupdatestatus.Where(e => e.JobsQueueID == jobqueueID).FirstOrDefault();

                        ratestatusold.UpdatedDate = DateTime.Now;
                        ratestatusold.ServerID = Convert.ToInt32(srm.Server_ID);
                        ratestatusold.ServerRatesheetID = srm.ServerRatesheetID;// Convert.ToInt32(srm.ServerRatesheetID);
                        ratestatusold.ServerRatesheetName = srm.ServerRatesheetName;
                        ratestatusold.ServerName = sd.ServerName;
                        if (status == "true")
                        {
                            ratestatusold.ServerStstus = "Complete";
                            ratestatusold.CompleteStatus = "Complete";
                            responsemessage.status = "true";
                            // responsemessage.Message = "Ratesheet updated in database and Server pushed successfully";
                            responsemessage.Message = sd.ServerName + " Server pushing success";
                        }
                        else
                        {
                            ratestatusold.ServerStstus = "Failure";
                            responsemessage.status = "false";
                            responsemessage.Message = "Ratesheet updated in database but rates not pushed to server";
                            responsemessage.Message = sd.ServerName + " server pushing fail";
                        }

                        rms.SaveChanges();
                    }
                    else
                    {
                        var ratename = (from rs in rms.ngt_ratesheet where rs.RatesheetID == RatesheetID select rs.RatesheetName).FirstOrDefault();
                        var ratestatusbatchid = (from rs in rms.ratesheetaddupdatestatus where rs.JobsQueueID == jobqueueID select rs.BatchID).FirstOrDefault();

                        var raterequesttype = (from jq in rms.jobqueues where jq.ID == jobqueueID select jq.RequestType).FirstOrDefault();

                        ratesheetaddupdatestatu ratestatusnew = new ratesheetaddupdatestatu();
                        ratestatusnew.RatesheetID = RatesheetID;
                        ratestatusnew.RatesheetName = ratename;

                        ratestatusnew.RequestType = raterequesttype;// "Update";
                        ratestatusnew.BatchID = ratestatusbatchid;
                        ratestatusnew.JobsQueueID = jobqueueID;


                        ratestatusnew.UpdatedDate = DateTime.Now;
                        ratestatusnew.ServerID = Convert.ToInt32(srm.Server_ID);
                        ratestatusnew.ServerRatesheetID = srm.ServerRatesheetID;// Convert.ToInt32(srm.ServerRatesheetID);
                        ratestatusnew.ServerRatesheetName = srm.ServerRatesheetName;
                        ratestatusnew.ServerName = sd.ServerName;
                        ratestatusnew.DBstatus = "Complete";
                        if (status == "true")
                        {

                            ratestatusnew.ServerStstus = "Complete";
                            ratestatusnew.CompleteStatus = "Complete";
                            responsemessage.status = "true";
                            responsemessage.Message = sd.ServerName + " Server pushing success";
                        }
                        else
                        {
                            ratestatusnew.ServerStstus = "Failure";
                            ratestatusnew.CompleteStatus = "Pending";
                            responsemessage.status = "false";
                            responsemessage.Message = sd.ServerName + " server pushing fail";
                        }
                        rms.ratesheetaddupdatestatus.Add(ratestatusnew);
                        rms.SaveChanges();
                    }

                }

            }
            catch (Exception ex)
            {
                UpdateError("UpdateRatesToserver exception error " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "", false);
                responsemessage.status = "false";
                responsemessage.Message = ex.Message;
            }
            finally
            {

            }

            return responsemessage;
        }

        public SuccessResponse UpdateRatesToserverNew(Int32 RatesheetID, Int32 MappingID, Int32 UpdatedID, string status, Int32 jobqueueID)
        {
            SuccessResponse responsemessage = new SuccessResponse();
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {

                    server_ratesheet_map srm = rms.server_ratesheet_map.Where(e => e.ID == MappingID).FirstOrDefault();
                    server_details sd = rms.server_details.Where(e => e.ServerID == srm.Server_ID).FirstOrDefault();
                    if (UpdatedID != 0)
                    {
                        //shripal  ratesheetreplacestatu ratestatusold = rms.ratesheetreplacestatus.Where(e => e.ID == UpdatedID).FirstOrDefault();
                        ratesheetaddupdatestatu ratestatusold = rms.ratesheetaddupdatestatus.Where(e => e.ID == UpdatedID).FirstOrDefault();

                        ratestatusold.UpdatedDate = DateTime.Now;
                        ratestatusold.ServerID = Convert.ToInt32(srm.Server_ID);
                        ratestatusold.ServerRatesheetID = srm.ServerRatesheetID;// Convert.ToInt32(srm.ServerRatesheetID);
                        ratestatusold.ServerRatesheetName = srm.ServerRatesheetName;
                        ratestatusold.ServerName = sd.ServerName;
                        if (status == "true")
                        {
                            ratestatusold.ServerStstus = "Complete";
                            ratestatusold.CompleteStatus = "Complete";
                            responsemessage.status = "true";
                            // responsemessage.Message = "Ratesheet updated in database and Server pushed successfully";
                            responsemessage.Message = sd.ServerName + " Server pushing success";
                        }
                        else
                        {
                            ratestatusold.ServerStstus = "Failure";
                            responsemessage.status = "false";
                            responsemessage.Message = "Ratesheet updated in database but rates not pushed to server";
                            responsemessage.Message = sd.ServerName + " server pushing fail";
                        }

                        rms.SaveChanges();
                    }
                    else
                    {
                        var ratename = (from rs in rms.ngt_ratesheet where rs.RatesheetID == RatesheetID select rs.RatesheetName).FirstOrDefault();
                        //shripal   var ratestatusbatchid = (from rs in rms.ratesheetreplacestatus where rs.JobsQueueReplaceID == jobqueueID select rs.BatchID).FirstOrDefault();

                        var ratestatusbatchid = (from rs in rms.ratesheetaddupdatestatus where rs.JobsQueueID == jobqueueID select rs.BatchID).FirstOrDefault();

                        //shripal  var raterequesttype = (from jq in rms.jobqueuereplaces where jq.ID == jobqueueID select jq.RequestType).FirstOrDefault();
                        var raterequesttype = (from jq in rms.jobqueues where jq.ID == jobqueueID select jq.RequestType).FirstOrDefault();

                        //shripal  ratesheetreplacestatu ratestatusnew = new ratesheetreplacestatu();
                        ratesheetaddupdatestatu ratestatusnew = new ratesheetaddupdatestatu();

                        ratestatusnew.RatesheetID = RatesheetID;
                        ratestatusnew.RatesheetName = ratename;

                        ratestatusnew.RequestType = raterequesttype;// "Update";
                        ratestatusnew.BatchID = ratestatusbatchid;
                        //shripal  ratestatusnew.JobsQueueReplaceID = jobqueueID;
                        ratestatusnew.JobsQueueID = jobqueueID;


                        ratestatusnew.UpdatedDate = DateTime.Now;
                        ratestatusnew.ServerID = Convert.ToInt32(srm.Server_ID);
                        ratestatusnew.ServerRatesheetID = srm.ServerRatesheetID;// Convert.ToInt32(srm.ServerRatesheetID);
                        ratestatusnew.ServerRatesheetName = srm.ServerRatesheetName;
                        ratestatusnew.ServerName = sd.ServerName;
                        ratestatusnew.DBstatus = "Complete";
                        if (status == "true")
                        {

                            ratestatusnew.ServerStstus = "Complete";
                            ratestatusnew.CompleteStatus = "Complete";
                            responsemessage.status = "true";
                            responsemessage.Message = sd.ServerName + " Server pushing success";
                        }
                        else
                        {
                            ratestatusnew.ServerStstus = "Failure";
                            ratestatusnew.CompleteStatus = "Pending";
                            responsemessage.status = "false";
                            responsemessage.Message = sd.ServerName + " server pushing fail";
                        }
                        //shripal   rms.ratesheetreplacestatus.Add(ratestatusnew);

                        rms.ratesheetaddupdatestatus.Add(ratestatusnew);

                        rms.SaveChanges();
                    }

                }

            }
            catch (Exception ex)
            {
                UpdateError("UpdateRatesToserver exception error " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "", false);
                responsemessage.status = "false";
                responsemessage.Message = ex.Message;
            }
            finally
            {

            }

            return responsemessage;
        }
        public SuccessResponse UpdateRatesDB(Int32 RatesheetID, string status, Int32 jobqueueid)
        {
            SuccessResponse responsemessage = new SuccessResponse();
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {
                    ngt_ratesheet rate = rms.ngt_ratesheet.Where(e => e.RatesheetID == RatesheetID).SingleOrDefault();
                    var rateBatchID = (from NR in rms.ngt_rates where NR.RatesheetID == RatesheetID orderby NR.BatchID descending select NR.BatchID).FirstOrDefault();
                    ratesheetaddupdatestatu ratestatus = rms.ratesheetaddupdatestatus.Where(e => e.JobsQueueID == jobqueueid).FirstOrDefault();

                    if (status == "true")
                    {
                        ratestatus.DBstatus = "Complete";
                        ratestatus.BatchID = rateBatchID;
                        //  ratestatus.Message = "Ratesheet Updated in database successfully.";
                        //rms.ratesheetaddupdatestatus.Add(ratestatus);
                        rms.SaveChanges();
                        responsemessage.status = "true";
                        responsemessage.Message = "Ratesheet Updated";
                        responsemessage.Value = Convert.ToString(ratestatus.ID);

                    }
                    else if (status == "notmap")
                    {
                        ratestatus.DBstatus = "Complete";
                        ratestatus.ServerStstus = "Failure";
                        ratestatus.BatchID = rateBatchID;
                        ratestatus.Message = "Ratesheet Updated in database but Mapping not found.";
                        //rms.ratesheetaddupdatestatus.Add(ratestatus);
                        rms.SaveChanges();
                        responsemessage.status = "false";
                        responsemessage.Message = "Ratesheet Updated in database but Mapping not found";
                        responsemessage.Value = Convert.ToString(ratestatus.ID);
                        UpdateError("UpdateRatesDB message ", "Ratesheet Updated in database but Mapping not found", "RatesheetLogs.txt", "", false);
                    }
                    else
                    {
                        ratestatus.DBstatus = "Failure";
                        //  rms.ratesheetaddupdatestatus.Add(ratestatus);
                        ratestatus.Message = status;// "Ratesheet not Updated in database.";
                        rms.SaveChanges();
                        responsemessage.status = "false";
                        responsemessage.Message = "Ratesheet not Updated";
                        UpdateError("UpdateRatesDB message ", "Ratesheet not Updated in database.", "RatesheetLogs.txt", "", false);

                    }

                }
            }
            catch (Exception ex)
            {
                UpdateError("UpdateRatesDB exception  error " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "", false);
                responsemessage.status = "false";
                responsemessage.Message = ex.Message;
            }
            finally
            {

            }
            return responsemessage;
        }

        public SuccessResponse UpdateRatesDBNew(Int32 RatesheetID, string status, Int32 jobqueueid)
        {
            SuccessResponse responsemessage = new SuccessResponse();
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {
                    ngt_ratesheet rate = rms.ngt_ratesheet.Where(e => e.RatesheetID == RatesheetID).SingleOrDefault();
                    var rateBatchID = (from NR in rms.ngt_rates where NR.RatesheetID == RatesheetID orderby NR.BatchID descending select NR.BatchID).FirstOrDefault();
                    //shripal ratesheetreplacestatu ratestatus = rms.ratesheetreplacestatus.Where(e => e.JobsQueueReplaceID == jobqueueid).FirstOrDefault();

                    ratesheetaddupdatestatu ratestatus = rms.ratesheetaddupdatestatus.Where(e => e.JobsQueueID == jobqueueid).FirstOrDefault();

                    if (status == "true")
                    {
                        ratestatus.DBstatus = "Complete";
                        ratestatus.BatchID = rateBatchID;
                        //  ratestatus.Message = "Ratesheet Updated in database successfully.";
                        //rms.ratesheetaddupdatestatus.Add(ratestatus);
                        rms.SaveChanges();
                        responsemessage.status = "true";
                        responsemessage.Message = "Ratesheet Updated";
                        responsemessage.Value = Convert.ToString(ratestatus.ID);

                    }
                    else if (status == "notmap")
                    {
                        ratestatus.DBstatus = "Complete";
                        ratestatus.ServerStstus = "Failure";
                        ratestatus.BatchID = rateBatchID;
                        ratestatus.Message = "Ratesheet Updated in database but Mapping not found.";
                        //rms.ratesheetaddupdatestatus.Add(ratestatus);
                        rms.SaveChanges();
                        responsemessage.status = "false";
                        responsemessage.Message = "Ratesheet Updated in database but Mapping not found";
                        responsemessage.Value = Convert.ToString(ratestatus.ID);
                    }
                    else
                    {
                        ratestatus.DBstatus = "Failure";
                        //  rms.ratesheetaddupdatestatus.Add(ratestatus);
                        ratestatus.Message = "Ratesheet not Updated in database.";
                        rms.SaveChanges();
                        responsemessage.status = "false";
                        responsemessage.Message = "Ratesheet not Updated";

                    }

                }
            }
            catch (EntityException e)
            {
                UpdateError("UpdateRatesDB exception  error " + e.StackTrace, e.Message + "\n" + e.InnerException.Message + "\n" + e.InnerException.StackTrace, "RatesheetLogs.txt", "", false);
            }
            catch (Exception ex)
            {
                UpdateError("UpdateRatesDB exception  error " + ex.StackTrace, ex.Message + "\n" + ex.InnerException.Message + "\n" + ex.InnerException.StackTrace, "RatesheetLogs.txt", "", false);
                responsemessage.status = "false";
                responsemessage.Message = ex.Message;
            }


            return responsemessage;
        }
        public SuccessResponse GenerateRequestforaddupdate(string FileNameCSV, string RequestId, Int32 PartitionId, Int32 RateSheetId, string RequestType, string ServerNameCSV)
        {
            SuccessResponse responsemessage = new SuccessResponse();
            rmsEntities rms = new rmsEntities();
            rms.Configuration.ValidateOnSaveEnabled = false;

            ngt_ratesheet ratesheet = rms.ngt_ratesheet.Where(d => d.RatesheetID == RateSheetId).FirstOrDefault();
            ngt_partition partition = rms.ngt_partition.Where(e => e.Id == PartitionId).FirstOrDefault();
            jobqueue newrecord = new jobqueue();
            try
            {
                newrecord.JobStatus = "Pending";
                newrecord.FileNameCSV = FileNameCSV;
                newrecord.RequestID = RequestId;
                newrecord.PartitionID = PartitionId;
                newrecord.RateSheetId = RateSheetId;
                newrecord.RatesheetName = ratesheet.RatesheetName;
                // newrecord.RequestType="Update";
                newrecord.RequestType = RequestType;
                newrecord.ServerNameCSV = ServerNameCSV;
                newrecord.CreatedOn = DateTime.Now.ToString("yyyy-MM-dd HH:mm:00");
                newrecord.HitTry = 0;
                rms.jobqueues.Add(newrecord);
                rms.SaveChanges();

            }
            catch (EntityException e)
            {
                UpdateError("UpdateRatesDB exception  error " + e.StackTrace, e.Message + "\n" + e.InnerException.Message + "\n" + e.InnerException.StackTrace, "RatesheetLogs.txt", "", false);
            }
            catch (Exception ex)
            {
                UpdateError("GenerateRequestforaddupdate function while updating jobqueue table exception error " + ex.StackTrace, ex.Message + "\n" + ex.InnerException.Message, "RatesheetLogs.txt", "", false);
            }
            finally
            {
                UpdateError("GenerateRequestforaddupdate Request id " + RequestId + " Ratesheetid " + RateSheetId, " RequestType " + RequestType, "RatesheetLogs.txt", "", false);
            }
            try
            {
                ratesheetaddupdatestatu newrecordstatus = new ratesheetaddupdatestatu();
                // newrecordstatus.RequestType="Update";
                newrecordstatus.RequestType = RequestType;
                newrecordstatus.RatesheetID = RateSheetId;
                newrecordstatus.RatesheetName = ratesheet.RatesheetName;
                newrecordstatus.DBstatus = "Pending";
                if (RequestType == "Update" || RequestType == "Replace")
                    newrecordstatus.ServerStstus = "Pending";

                newrecordstatus.CompleteStatus = "Pending";
                newrecordstatus.UpdatedDate = DateTime.Now;
                newrecordstatus.JobsQueueID = newrecord.ID;
                newrecordstatus.UpdatedBy = partition.Name;
                rms.ratesheetaddupdatestatus.Add(newrecordstatus);
                rms.SaveChanges();

                responsemessage.status = "true";
                if (RequestType == "Update")
                    responsemessage.Message = "Updated successfully.";
                else
                    responsemessage.Message = "Added successfully.";



            }

            catch (EntityException e)
            {
                UpdateError("UpdateRatesDB exception  error " + e.StackTrace, e.Message + "\n" + e.InnerException.Message + "\n" + e.InnerException.StackTrace, "RatesheetLogs.txt", "", false);
            }
            catch (Exception ex)
            {
                UpdateError("GenerateRequestforaddupdate function while updating ratesheetaddupdatestatu table  exception error " + ex.StackTrace, ex.Message + "\n" + ex.InnerException.Message, "RatesheetLogs.txt", "", false);
                responsemessage.status = "false";
                responsemessage.Message = ex.Message;

            }
            finally
            {
                UpdateError("GenerateRequestforaddupdate Request id " + RequestId + " Ratesheetid " + RateSheetId, "RequestType" + RequestType + " Pending", "RatesheetLogs.txt", "", false);
            }
            return responsemessage;
        }

        public SuccessResponse GenerateRequestforReplace(string CloseDate, string FileNameCSV, string RequestId, Int32 PartitionId, Int32 RateSheetId, string RequestType, string ServerNameCSV)
        {
            SuccessResponse responsemessage = new SuccessResponse();
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {
                    rms.Configuration.ValidateOnSaveEnabled = false;
                    ngt_ratesheet ratesheet = rms.ngt_ratesheet.Where(d => d.RatesheetID == RateSheetId).FirstOrDefault();
                    ngt_partition partition = rms.ngt_partition.Where(e => e.Id == PartitionId).FirstOrDefault();


                    // Pasupathi added for Old Nexge ratesheet Replace  Status
                    string requesttype = ConfigurationManager.AppSettings["RequestType"].ToString();
                    int Oid = Convert.ToInt16(ConfigurationManager.AppSettings["OldNexgeType"]);
                    //  int Nid = Convert.ToInt16(ConfigurationManager.AppSettings["NewNexgeType"]);

                    //var ServerIdnum = rms.jobqueues.Where(r => r.RateSheetId == RateSheetId && r.RequestType ==
                    //                    ConfigurationManager.AppSettings["RequestType"].ToString()
                    //                  && (r.ServerId == Convert.ToInt16(ConfigurationManager.AppSettings["OldNexgeType"]) ||
                    //                  r.ServerId == Convert.ToInt16(ConfigurationManager.AppSettings["NewNexgeType"]))).FirstOrDefault();


                    var oldnexgeid = rms.server_details.Where(s => s.ServerType == Oid).FirstOrDefault();
                    // var newnexgeid = rms.server_details.Where(s => s.ServerType == Nid).FirstOrDefault();

                    //var newnexidnum = 0;
                    //if (newnexgeid != null)
                    //    newnexidnum = newnexgeid.ServerID;



                    var ServerIdnum = rms.jobqueues.Where(r => r.RateSheetId == RateSheetId && r.RequestType ==
                                       requesttype && r.ServerId == oldnexgeid.ServerID).FirstOrDefault();

                    var ServerIdnumNot = rms.jobqueues.Where(r => r.RateSheetId == RateSheetId &&
                             r.RequestType == requesttype && r.ServerId != oldnexgeid.ServerID).FirstOrDefault();

                    if (ServerIdnum != null && ServerIdnumNot == null)
                    {

                        var serverTypeNum = rms.server_details.Where(s => s.ServerID == ServerIdnum.ServerId)
                                                             .FirstOrDefault();
                        if (serverTypeNum.ServerType == Oid)
                        {
                            responsemessage.status = "wrong";
                            responsemessage.Message = "There is no replacement option For Old Nexge.";
                            return responsemessage;
                        }
                    }

                    // End of Pasupathi Method.

                    //shripal  jobqueuereplace newrecord = new jobqueuereplace();
                    jobqueue newrecord = new jobqueue();
                    newrecord.JobStatus = "Pending";
                    newrecord.FileNameCSV = FileNameCSV;
                    newrecord.RequestID = RequestId;
                    newrecord.PartitionID = PartitionId;
                    newrecord.RateSheetId = RateSheetId;
                    newrecord.EndDate = CloseDate;
                    newrecord.CreatedOn = DateTime.Now.ToString("yyyy-MM-dd HH:mm:00");
                    newrecord.ServerNameCSV = ServerNameCSV;


                    newrecord.RatesheetName = ratesheet.RatesheetName;
                    // newrecord.RequestType="Update";
                    newrecord.RequestType = RequestType;
                    newrecord.HitTry = 0;
                    //shripal  rms.jobqueuereplaces.Add(newrecord);
                    rms.jobqueues.Add(newrecord);

                    rms.SaveChanges();

                    //shripal  ratesheetreplacestatu newrecordstatus = new ratesheetreplacestatu();
                    ratesheetaddupdatestatu newrecordstatus = new ratesheetaddupdatestatu();

                    newrecordstatus.RequestType = RequestType;
                    newrecordstatus.RatesheetID = RateSheetId;
                    newrecordstatus.RatesheetName = ratesheet.RatesheetName;
                    newrecordstatus.DBstatus = "Pending";
                    if (RequestType == "Replace")
                        newrecordstatus.ServerStstus = "Pending";


                    newrecordstatus.CompleteStatus = "Pending";
                    newrecordstatus.UpdatedDate = DateTime.Now;
                    //shripal   newrecordstatus.JobsQueueReplaceID = newrecord.ID;
                    newrecordstatus.JobsQueueID = newrecord.ID;

                    newrecordstatus.UpdatedBy = partition.Name;
                    //shripal   rms.ratesheetreplacestatus.Add(newrecordstatus);
                    rms.ratesheetaddupdatestatus.Add(newrecordstatus);
                    rms.SaveChanges();

                    responsemessage.status = "true";
                    if (RequestType == "Update")
                        responsemessage.Message = "Updated successfully.";
                    else
                        responsemessage.Message = "Added successfully.";

                }

            }
            catch (Exception ex)
            {
                UpdateError("GenerateRequestforaddupdate function exception error " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "", false);
                responsemessage.status = "false";
                responsemessage.Message = ex.Message;

            }
            return responsemessage;
        }


        // Pasupathi Commented Old code For Ratesheet Template format change 02-09-2016

        //public SuccessResponse InsertRatesToDB(Int32 newRateSheetId, string NewFleName2, string partitionid, int jobqueueID)
        //{

        //    SuccessResponse responsemessage = new SuccessResponse();
        //    string csv_import_update = "temp" + NewFleName2;
        //    csv_import_update = csv_import_update.Substring(0, csv_import_update.Length - 4);
        //    int flag = 0;
        //    string dataStr = "";
        //    //  MySqlConnection conn = new MySqlConnection(ConfigurationManager.AppSettings["Connstring"]);
        //    MySqlConnection conn = new MySqlConnection(ConfigurationManager.ConnectionStrings["rmsconn"].ToString());
        //    try
        //    {
        //        conn.Open();
        //        string sql = "drop table IF EXISTS " + csv_import_update + ";CREATE TEMPORARY TABLE " + csv_import_update + "(ID int primary key auto_increment,code varchar(20),codename varchar(64),rate varchar(20),status varchar(20),date varchar(50),startpulse varchar(20),nextpulse varchar(20));";
        //        MySqlCommand cmd = new MySqlCommand(sql, conn);
        //        int rdr = cmd.ExecuteNonQuery();

        //        string query = "LOAD DATA INFILE '" + ConfigurationManager.AppSettings["tempUrl"].ToString() + NewFleName2 + "' INTO TABLE " + csv_import_update + " FIELDS TERMINATED BY ',' ENCLOSED BY '\"' LINES TERMINATED BY '\n' IGNORE 1 ROWS (code,codename,rate,status,date,startpulse,nextpulse);";
        //        MySqlCommand cmd22 = new MySqlCommand(query, conn);
        //        int rdr22 = cmd22.ExecuteNonQuery();
        //        if (rdr22 != -1)
        //            UpdateError("InsertRatesToDB function filename" + NewFleName2, "LOAD DATA INFILE successfully", "RatesheetLogs.txt", "", false);
        //        else
        //            UpdateError("InsertRatesToDB function filename" + NewFleName2, "LOAD DATA INFILE fail", "RatesheetLogs.txt", "", false);

        //        cmd.Connection = conn;
        //        cmd.CommandText = "check_regionCodeUpdateNew";
        //        cmd.CommandType = CommandType.StoredProcedure;
        //        cmd.Parameters.AddWithValue("@csv_table1", csv_import_update);
        //        cmd.Parameters["@csv_table1"].Direction = ParameterDirection.Input;
        //        cmd.Parameters.AddWithValue("@partitionuserID", Convert.ToInt32(partitionid));
        //        cmd.Parameters["@partitionuserID"].Direction = ParameterDirection.Input;
        //        MySqlDataReader rdr2 = cmd.ExecuteReader();
        //        List<testNewservice> testrt = new List<testNewservice>();

        //        while (rdr2.Read())
        //        {
        //            testrt.Add(new testNewservice() { code = rdr2[0].ToString(), codename = rdr2[1].ToString() });
        //        }
        //        rdr2.Close();
        //        UpdateError("InsertRatesToDB function filename" + NewFleName2, "Number of New region code=" + testrt.Count, "RatesheetLogs.txt", "", false);
        //        if (testrt.Count > 0)
        //        {
        //            for (int begin = 0; begin < testrt.Count; begin++)
        //            {
        //                //// New code Pasupathi Implemented

        //                //using (rmsEntities rms = new rmsEntities())
        //                //{
        //                //    ngt_region_code Region_code = new ngt_region_code();
        //                //    Region_code.Country_code = testrt[begin].code;
        //                //    Region_code.Area_code = "";
        //                //    Region_code.description = testrt[begin].codename;
        //                //    Region_code.ngt_region_code_groupId = 1;
        //                //    Region_code.ngt_PartitionId = (Convert.ToInt32(partitionid));
        //                //    rms.ngt_region_code.Add(Region_code);
        //                //    rms.SaveChanges();

        //                //}
        //                ////// Existing Code

        //                string sql1 = "insert into ngt_region_code (Country_code, Area_code,description, ngt_region_code_groupId, ngt_PartitionId) values ('" + testrt[begin].code + "','','" + testrt[begin].codename.Replace("'", " ") + "','1'," + partitionid + ");"; //rdr2[0] + "','','" + rdr2[1] + "','1'," + partitionid + ");";
        //                MySqlCommand cmd1 = new MySqlCommand(sql1, conn);
        //                MySqlDataReader rdr1 = cmd1.ExecuteReader();
        //                rdr1.Close();
        //            }
        //            UpdateError("InsertRatesToDB function ", "New region code successfully inserted.", "RatesheetLogs.txt", "", false);
        //        }
        //        //cmd.Connection = conn;
        //        //cmd.CommandText = "insertRegionCode";
        //        //cmd.CommandType = CommandType.StoredProcedure;
        //        //cmd.Parameters.AddWithValue("@ngt_PartitionId", Convert.ToInt32(partitionid));
        //        //cmd.Parameters["@ngt_PartitionId"].Direction = ParameterDirection.Input;
        //        //cmd.Parameters.Add("@result", SqlDbType.Int);
        //        //cmd.Parameters["@result"].Direction = ParameterDirection.Output;
        //        string msg = "";
        //        try
        //        {

        //            cmd.Connection = conn;
        //            cmd.CommandText = "insertsRateNew";
        //            cmd.CommandType = CommandType.StoredProcedure;
        //            cmd.Parameters.AddWithValue("@partitionId", Convert.ToInt32(partitionid));
        //            cmd.Parameters["@partitionId"].Direction = ParameterDirection.Input;
        //            cmd.Parameters.AddWithValue("@ratesheetId", Convert.ToInt32(newRateSheetId));
        //            cmd.Parameters["@ratesheetId"].Direction = ParameterDirection.Input;
        //            cmd.Parameters.AddWithValue("@csv_tablenew", csv_import_update);
        //            cmd.Parameters["@csv_tablenew"].Direction = ParameterDirection.Input;

        //            cmd.Parameters.AddWithValue("@ReqestType", "add");
        //            cmd.Parameters["@ReqestType"].Direction = ParameterDirection.Input;
        //            cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
        //            MySqlDataReader rdr3 = cmd.ExecuteReader();
        //            dataStr = "1";
        //            rdr3.Close();
        //            UpdateError("InsertRatesToDB function ", "Rates successfully inserted.", "RatesheetLogs.txt", "", false);
        //        }
        //        catch (Exception ex)
        //        {
        //            UpdateError("insertRateNew procedure error" + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "file name=" + NewFleName2, false);
        //            dataStr = "";
        //            msg = ex.Message;
        //        }

        //        SuccessResponse reqrespon = new SuccessResponse();
        //        if (dataStr != "")
        //            reqrespon = AddRatesDB(newRateSheetId, "true", jobqueueID);
        //        else
        //            reqrespon = AddRatesDB(newRateSheetId, msg, jobqueueID);
        //        try
        //        {
        //            FtpWebRequest request1 = (FtpWebRequest)WebRequest.Create(ConfigurationManager.AppSettings["ftpUrl"].ToString() + NewFleName2);
        //            request1.Method = WebRequestMethods.Ftp.DeleteFile;
        //            request1.Credentials = new NetworkCredential(ConfigurationManager.AppSettings["ftpUser"].ToString(), ConfigurationManager.AppSettings["ftpPassword"].ToString());
        //            FtpWebResponse response = (FtpWebResponse)request1.GetResponse();
        //            response.Close();
        //            UpdateError("InsertRatesToDB function ", "CSV Remove successfully.", "RatesheetLogs.txt", "", false);
        //        }
        //        catch (Exception ex)
        //        {
        //            UpdateError("InsertRatesToDB Exception Error FTP ratesheet not remove file name" + NewFleName2 + " error " + ex.Message + "\n" + ex.InnerException, ex.StackTrace + ex.Source, "RatesheetLogs.txt", "", false);
        //        }
        //        responsemessage.status = reqrespon.status;
        //        responsemessage.Message = reqrespon.Message;
        //    }
        //    catch (Exception ex)
        //    {
        //        UpdateError("InsertRatesToDB Exception Error " + ex.Message, ex.StackTrace + ex.Source + ex.InnerException, "RatesheetLogs.txt", "", false);
        //        string exceptionmessage = ex.Message;
        //        if (exceptionmessage.Contains(ConfigurationManager.AppSettings["ErrorPool"].ToString()))
        //        {
        //            responsemessage.status = "Delay";
        //            responsemessage.Message = ex.Message;
        //        }
        //        else
        //        {
        //            responsemessage.status = "false";
        //            responsemessage.Message = ex.Message;
        //        }
        //    }
        //    finally
        //    {
        //        conn.Close();
        //    }
        //    return responsemessage;
        //}

        // End comment pasupathi
        public SuccessResponse InsertRatesToDB(Int32 newRateSheetId, string NewFleName2, string partitionid, int jobqueueID)
        {
            MongoClient Client = new MongoClient(ConfigurationManager.AppSettings["MongoDbString"].ToString());
            var MongoDB = Client.GetServer().GetDatabase(ConfigurationManager.AppSettings["MongoDBDatabase"].ToString());
            SuccessResponse responsemessage = new SuccessResponse();
            string csv_import_update = "temp" + NewFleName2;
            csv_import_update = csv_import_update.Substring(0, csv_import_update.Length - 4);
            int flag = 0;
            string dataStr = "";
            //  MySqlConnection conn = new MySqlConnection(ConfigurationManager.AppSettings["Connstring"]);
            MySqlConnection conn = new MySqlConnection(ConfigurationManager.ConnectionStrings["rmsconn"].ToString());
            try
            {
                conn.Open();
                string sql = "drop table IF EXISTS " + csv_import_update + ";CREATE TEMPORARY TABLE " + csv_import_update + "(ID int primary key auto_increment,code varchar(20),codename varchar(255),rate varchar(20),status varchar(20),date varchar(50),startpulse varchar(20),nextpulse varchar(20),enddate varchar(50));";
                MySqlCommand cmd = new MySqlCommand(sql, conn);
                int rdr = cmd.ExecuteNonQuery();

                string query = "LOAD DATA INFILE '" + ConfigurationManager.AppSettings["tempUrl"].ToString() + NewFleName2 + "' INTO TABLE " + csv_import_update + " FIELDS TERMINATED BY ',' ENCLOSED BY '\"' LINES TERMINATED BY '\n' IGNORE 1 ROWS (code,codename,rate,status,date,startpulse,nextpulse,enddate);";
                MySqlCommand cmd22 = new MySqlCommand(query, conn);
                int rdr22 = cmd22.ExecuteNonQuery();
                if (rdr22 != -1)
                    UpdateError("InsertRatesToDB function filename" + NewFleName2, "LOAD DATA INFILE successfully", "RatesheetLogs.txt", "", false);
                else
                    UpdateError("InsertRatesToDB function filename" + NewFleName2, "LOAD DATA INFILE fail", "RatesheetLogs.txt", "", false);


                // pasupathi added new commend
                string sqlquerydel = "delete from " + csv_import_update + " where date is null or date='';";
                MySqlCommand cmddel = new MySqlCommand(sqlquerydel, conn);
                int rdrdel = cmddel.ExecuteNonQuery();


                cmd.Connection = conn;
                cmd.CommandText = "check_regionCodeUpdateNew";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@csv_table1", csv_import_update);
                cmd.Parameters["@csv_table1"].Direction = ParameterDirection.Input;
                cmd.Parameters.AddWithValue("@partitionuserID", Convert.ToInt32(partitionid));
                cmd.Parameters["@partitionuserID"].Direction = ParameterDirection.Input;
                cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                MySqlDataReader rdr2 = cmd.ExecuteReader();
                List<testNewservice> testrt = new List<testNewservice>();

                while (rdr2.Read())
                {
                    testrt.Add(new testNewservice() { code = rdr2[0].ToString(), codename = rdr2[1].ToString() });
                }
                rdr2.Close();
                UpdateError("InsertRatesToDB function filename" + NewFleName2, "Number of New region code=" + testrt.Count, "RatesheetLogs.txt", "", false);
                if (testrt.Count > 0)
                {
                    for (int begin = 0; begin < testrt.Count; begin++)
                    {
                        //// New code Pasupathi Implemented

                        //using (rmsEntities rms = new rmsEntities())
                        //{
                        //    ngt_region_code Region_code = new ngt_region_code();
                        //    Region_code.Country_code = testrt[begin].code;
                        //    Region_code.Area_code = "";
                        //    Region_code.description = testrt[begin].codename;
                        //    Region_code.ngt_region_code_groupId = 1;
                        //    Region_code.ngt_PartitionId = (Convert.ToInt32(partitionid));
                        //    rms.ngt_region_code.Add(Region_code);
                        //    rms.SaveChanges();

                        //}
                        ////// Existing Code

                        string sql1 = "insert into ngt_region_code (Country_code, Area_code,description, ngt_region_code_groupId, ngt_PartitionId) values ('" + testrt[begin].code + "','','" + testrt[begin].codename.Replace("'", " ") + "','1'," + partitionid + ");"; //rdr2[0] + "','','" + rdr2[1] + "','1'," + partitionid + ");";
                        MySqlCommand cmd1 = new MySqlCommand(sql1, conn);
                        MySqlDataReader rdr1 = cmd1.ExecuteReader();
                        rdr1.Close();

                        #region MongoDB insert
                        try
                        {
                            List<Teleboss_MasterRegionCode> a = new List<Teleboss_MasterRegionCode>();
                            // Insert MongoDB
                            Teleboss_MasterRegionCode d = new Teleboss_MasterRegionCode();
                            d.Country_code = testrt[begin].code;

                            d.Area_code = "";
                            d.description = testrt[begin].codename.Replace("'", " ");
                            d.ngt_region_code_groupId = 1;
                            d.ngt_PartitionId = Convert.ToInt32(partitionid);
                            d.Region_hash_code = testrt[begin].code;
                            d.starts_with = testrt[begin].code.Substring(1, 1);
                            a.Add(d);

                            // var Result = MongoDB.GetCollection<Teleboss_MasterRegionCode>("Teleboss_MasterRegionCode").Insert(d);

                            MongoDB.GetCollection<BsonElement>("Teleboss_MasterRegionCode").InsertBatch(a.Select(c => new BsonDocument{
                                    //{"Id", c.Id},
                                    { "Country_code", c.Country_code },
                                    {"Area_code", c.Area_code },
                                    {"description", c.description },
                                    {"ngt_region_code_groupId", c.ngt_region_code_groupId },
                                    {"ngt_PartitionId",c.ngt_PartitionId },
                                    {"Region_hash_code", c.Region_hash_code },
                                    {"starts_with", c.starts_with }

                                    }).ToList());


                        }
                        catch (Exception ex)
                        {

                        }

                        #endregion


                    }
                    UpdateError("InsertRatesToDB function ", "New region code successfully inserted.", "RatesheetLogs.txt", "", false);
                }
                //cmd.Connection = conn;
                //cmd.CommandText = "insertRegionCode";
                //cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.AddWithValue("@ngt_PartitionId", Convert.ToInt32(partitionid));
                //cmd.Parameters["@ngt_PartitionId"].Direction = ParameterDirection.Input;
                //cmd.Parameters.Add("@result", SqlDbType.Int);
                //cmd.Parameters["@result"].Direction = ParameterDirection.Output;
                string msg = "";
                try
                {

                    cmd.Connection = conn;
                    cmd.CommandText = "insertsRateNew_new";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@partitionId", Convert.ToInt32(partitionid));
                    cmd.Parameters["@partitionId"].Direction = ParameterDirection.Input;
                    cmd.Parameters.AddWithValue("@ratesheetId", Convert.ToInt32(newRateSheetId));
                    cmd.Parameters["@ratesheetId"].Direction = ParameterDirection.Input;
                    cmd.Parameters.AddWithValue("@csv_tablenew", csv_import_update);
                    cmd.Parameters["@csv_tablenew"].Direction = ParameterDirection.Input;

                    cmd.Parameters.AddWithValue("@ReqestType", "add");
                    cmd.Parameters["@ReqestType"].Direction = ParameterDirection.Input;
                    cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                    MySqlDataReader rdr3 = cmd.ExecuteReader();
                    dataStr = "1";
                    rdr3.Close();
                    UpdateError("InsertRatesToDB function ", "Rates successfully inserted.", "RatesheetLogs.txt", "", false);
                }
                catch (Exception ex)
                {
                    UpdateError("insertRateNew procedure error" + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "file name=" + NewFleName2, false);
                    dataStr = "";
                    msg = ex.Message;
                }

                SuccessResponse reqrespon = new SuccessResponse();
                if (dataStr != "")
                    reqrespon = AddRatesDB(newRateSheetId, "true", jobqueueID);
                else
                    reqrespon = AddRatesDB(newRateSheetId, msg, jobqueueID);
                try
                {
                    //FtpWebRequest request1 = (FtpWebRequest)WebRequest.Create(ConfigurationManager.AppSettings["ftpUrl"].ToString() + NewFleName2);
                    //request1.Method = WebRequestMethods.Ftp.DeleteFile;
                    //request1.Credentials = new NetworkCredential(ConfigurationManager.AppSettings["ftpUser"].ToString(), ConfigurationManager.AppSettings["ftpPassword"].ToString());
                    //FtpWebResponse response = (FtpWebResponse)request1.GetResponse();
                    //response.Close();

                    UpdateError("InsertRatesToDB function ", "CSV Remove successfully.", "RatesheetLogs.txt", "", false);
                }
                catch (Exception ex)
                {
                    UpdateError("InsertRatesToDB Exception Error FTP ratesheet not remove file name" + NewFleName2 + " error " + ex.Message + "\n" + ex.InnerException, ex.StackTrace + ex.Source, "RatesheetLogs.txt", "", false);
                }
                responsemessage.status = reqrespon.status;
                responsemessage.Message = reqrespon.Message;
            }
            catch (Exception ex)
            {
                UpdateError("InsertRatesToDB Exception Error " + ex.Message, ex.StackTrace + ex.Source + ex.InnerException, "RatesheetLogs.txt", "", false);
                string exceptionmessage = ex.Message;
                if (exceptionmessage.Contains(ConfigurationManager.AppSettings["ErrorPool"].ToString()))
                {
                    responsemessage.status = "Delay";
                    responsemessage.Message = ex.Message;
                }
                else
                {
                    responsemessage.status = "false";
                    responsemessage.Message = ex.Message;
                }
            }
            finally
            {
                conn.Close();
            }
            return responsemessage;
        }

        public SuccessResponse AddRatesDB(Int32 RatesheetID, string status, Int32 jobqueueid)
        {
            SuccessResponse responsemessage = new SuccessResponse();
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {
                    rms.Configuration.ValidateOnSaveEnabled = false;
                    ngt_ratesheet rate = rms.ngt_ratesheet.Where(e => e.RatesheetID == RatesheetID).SingleOrDefault();
                    var rateBatchID = (from NR in rms.ngt_rates where NR.RatesheetID == RatesheetID orderby NR.BatchID descending select NR.BatchID).FirstOrDefault();
                    ratesheetaddupdatestatu ratestatus = rms.ratesheetaddupdatestatus.Where(e => e.JobsQueueID == jobqueueid).FirstOrDefault();
                    if (status == "true")
                    {
                        ratestatus.DBstatus = "Complete";
                        ratestatus.BatchID = rateBatchID;
                        ratestatus.CompleteStatus = "Complete";
                        //ratestatus.Message = "Ratesheet added in database successfully.";
                        rms.SaveChanges();
                        responsemessage.status = "true";
                        responsemessage.Message = "Ratesheet Added";
                    }
                    else
                    {
                        ratestatus.DBstatus = "Failure";
                        ratestatus.Message = status;// "Ratesheet not added in database.";

                        rms.SaveChanges();
                        responsemessage.status = "false";
                        responsemessage.Message = "Ratesheet not Added";
                    }
                }
            }
            catch (Exception ex)
            {
                UpdateError("AddRatesDB function exception error" + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "", false);
                responsemessage.status = "false";
                responsemessage.Message = ex.Message;
            }
            finally
            {

            }
            return responsemessage;
        }
        public SuccessResponse PushRatesheetToServerNew(int MappingID, string Source, string type, string value, string partitionid)
        {
            SuccessResponse res = new SuccessResponse();
            int partitionID = 0;
            partitionID = Convert.ToInt32(partitionid);
            try
            {
                if (Source == "")
                {
                    Source = "Manual";
                }

                using (rmsEntities rms = new rmsEntities())
                {
                    var map = rms.server_ratesheet_map.SingleOrDefault(d => d.ID == MappingID);

                    if (map != null)
                    {
                        //shripal Stream stream = ShowRates(Convert.ToInt32(map.RatesheetID), type, value, "");
                        // Stream stream = ShowsRates(Convert.ToInt32(map.RatesheetID), type, value, "", partitionID);
                        ShowRecords NewResponse = ShowsRates(Convert.ToInt32(map.RatesheetID), type, value, "", partitionID);

                        //Stream stream = ShowRatesNew(Convert.ToInt32(map.RatesheetID), type, value, "");


                        //DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(ShowRatesheetRecords));
                        //ShowRatesheetRecords ContactResponse = ser.ReadObject(stream) as ShowRatesheetRecords;


                        if (NewResponse.status == "false")
                        {

                            RMSCDR.AddRmsLogs(string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now), map.Server_ID.ToString(), NewResponse.status, NewResponse.message, map.RatesheetID.ToString(), Source);


                            return new SuccessResponse() { status = "false", Message = "No Records To Push" };

                        }
                        else
                        {



                            var serverDetails = rms.server_details.SingleOrDefault(d => d.ServerID == map.Server_ID);
                            switch (serverDetails.ServerType)
                            {
                                case 1:
                                    //Old Nexge 

                                    res = OldNexege.OldNexgeUpload(serverDetails.ServerIp, serverDetails.Username, serverDetails.Password, "Update", "", map.ServerRatesheetName, map.PulseRule, map.Active, map.GracePeriod, NewResponse.records);


                                    break;
                                case 2:
                                    //Jerasoft

                                    res = JeraApi1.PushRateSheetV2(NewResponse.records, serverDetails.Username, serverDetails.Password, serverDetails.ServerIp, serverDetails.SummaryURL.Split(',')[0], map.ServerRatesheetName);
                                    UpdateError("PushRateSheetV2 function" + res.Message, res.status, "RatesheetLogs.txt", "", false);
                                    //res = NewNexgeUpload(serverDetails.Ipaddress, serverDetails.UserName, serverDetails.Password, actiontype, bpName, pulse, status, gracePeriod, useForTr, useForOr, planTypeCode, RatesheetName);
                                    break;
                                case 3:
                                    //New Nexege
                                    res = NewNexege.NewNexgeUpload(serverDetails.ServerIp, map.Description, serverDetails.Username, serverDetails.Password, "Update", map.ServerRatesheetName, map.ServerRatesheetID, map.PulseRule, map.Active, map.GracePeriod, map.CompanyType == 1 ? true : false, NewResponse.records);

                                    break;
                                case 4:
                                    //VOS
                                    // res = NewNexgeUpload(serverDetails.Ipaddress, serverDetails.UserName, serverDetails.Password, actiontype, bpName, pulse, status, gracePeriod, useForTr, useForOr, planTypeCode, RatesheetName);
                                    break;
                                case 5:
                                    //New Nexege Test
                                    res = NewNexege.NewNexgeUpload(serverDetails.ServerIp, map.Description, serverDetails.Username, serverDetails.Password, "Update", map.ServerRatesheetName, map.ServerRatesheetID, map.PulseRule, map.Active, map.GracePeriod, map.CompanyType == 1 ? true : false, NewResponse.records);


                                    break;
                                case 6:
                                    //Old Nexege Test

                                    res = OldNexege.OldNexgeUpload(serverDetails.ServerIp, serverDetails.Username, serverDetails.Password, "Update", "", map.ServerRatesheetName, map.PulseRule, map.Active, map.GracePeriod, NewResponse.records);

                                    break;
                                case 7:
                                    //Jerasoft Test



                                    res = JeraApi1.PushRateSheetV2(NewResponse.records, serverDetails.Username, serverDetails.Password, serverDetails.ServerIp, serverDetails.SummaryURL.Split(',')[0], map.ServerRatesheetName);

                                    UpdateError("PushRateSheetV2 function " + res.Message, res.status, "RatesheetLogs.txt", "", false);
                                    break;
                            }
                            RMSCDR.AddRmsLogs(string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now), map.Server_ID.ToString(), res.status, res.Message, map.RatesheetID.ToString(), Source);

                            return res;
                        }

                    }
                    else
                    {
                        return new SuccessResponse() { status = "false", Message = "Mapping Not Found" };
                    }
                }
            }
            catch (Exception ex)
            {
                UpdateError("PushRatesheetToServerNew exception " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "", false);
                return new SuccessResponse() { status = "false", Message = ex.Message };
            }
            finally
            {

            }
        }

        public SuccessResponse PushRatesheetToServerUpdate(int MappingID, string Source, string type, string value, string partitionid, string NewFleName2, string ServerCsvName, int RatesheetId)
        {
            SuccessResponse res = new SuccessResponse();
            int partitionID = 0;
            partitionID = Convert.ToInt32(partitionid);
            try
            {
                if (Source == "")
                {
                    Source = "Manual";
                }

                using (rmsEntities rms = new rmsEntities())
                {
                    var map = rms.server_ratesheet_map.SingleOrDefault(d => d.ID == MappingID);

                    if (map != null)
                    {
                        //shripal Stream stream = ShowRates(Convert.ToInt32(map.RatesheetID), type, value, "");
                        // Stream stream = ShowsRates(Convert.ToInt32(map.RatesheetID), type, value, "", partitionID);

                        ShowRecords NewResponse = ShowsRates(Convert.ToInt32(map.RatesheetID), type, value, "", partitionID);

                        //Stream stream = ShowRatesNew(Convert.ToInt32(map.RatesheetID), type, value, "");
                        UpdateError("ShowRates Function Success", "Success", "RatesheetLogs.txt", "", false);


                        //DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(ShowRatesheetRecords));
                        //ShowRatesheetRecords ContactResponse = ser.ReadObject(stream) as ShowRatesheetRecords;

                        UpdateError("ShowRates Function After Success", NewResponse.status, "RatesheetLogs.txt", "", false);

                        if (NewResponse.status == "false")
                        {

                            RMSCDR.AddRmsLogs(string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now), map.Server_ID.ToString(), NewResponse.status, NewResponse.message, map.RatesheetID.ToString(), Source);


                            return new SuccessResponse() { status = "false", Message = "No Records To Push" };

                        }
                        else
                        {
                            var serverDetails = rms.server_details.SingleOrDefault(d => d.ServerID == map.Server_ID);
                            switch (serverDetails.ServerType)
                            {
                                case 1:
                                    //Old Nexge 

                                    res = OldNexege.OldNexgeUpload(serverDetails.ServerIp, serverDetails.Username, serverDetails.Password, "Update", "", map.ServerRatesheetName, map.PulseRule, map.Active, map.GracePeriod, NewResponse.records);
                                    break;
                                case 2:
                                    //Jerasoft
                                    bool status = false;
                                    string datenow = string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now);
                                    string ServerRatesheetID = map.ServerRatesheetID;
                                    // string ServerRatesheetName = map.ServerRatesheetName;

                                    ////Old jeraupdateratesheet
                                    //FileStream fs = new FileStream(ConfigurationManager.AppSettings["ReplaceCSV_URL"].ToString() + NewFleName2, FileMode.Open, FileAccess.Read);

                                    //byte[] data = new byte[fs.Length];
                                    //fs.Read(data, 0, data.Length);
                                    //fs.Close();


                                    // status = updateRatesheetInJera(Convert.ToString(ServerRatesheetID), data, NewFleName2, Convert.ToString(datenow), serverDetails.ServerIp, serverDetails.Username, serverDetails.Password);

                                    status = Updateratesheet(NewFleName2, Convert.ToString(ServerRatesheetID), Convert.ToString(datenow), serverDetails.ServerIp, serverDetails.Username, serverDetails.Password, ServerCsvName);

                                    if (status == true)
                                        res.status = "success";
                                    else
                                        res.status = "failure";


                                    break;
                                ////res = JeraApi1.PushRateSheetV2(ContactResponse.records, serverDetails.Username, serverDetails.Password, serverDetails.ServerIp, serverDetails.SummaryURL.Split(',')[0], map.ServerRatesheetName);
                                ////UpdateError("PushRateSheetV2 function" + res.Message, res.status, "RatesheetLogs.txt", "", false);


                                ////break;
                                case 3:
                                    //New Nexege

                                    //// Old code pasupathi commented

                                    //res = NewNexege.NewNexgeUploadDelete(serverDetails.ServerIp, map.Description, serverDetails.Username, serverDetails.Password, "Update", map.ServerRatesheetName, map.ServerRatesheetID, map.PulseRule, map.Active, map.GracePeriod, map.CompanyType == 1 ? true : false, NewResponse.records, NewResponse.recordsdelete);
                                    ShowRecords NewResponsenewnexge = ShowsRatesNewNexge(Convert.ToInt32(map.RatesheetID), type, value, "", partitionID);
                                    //// new code pasupathi
                                    UpdateError("NewNexge NewNexgeUploadNew Started..", map.ServerRatesheetID.ToString(), "RatesheetLogs.txt", map.ServerRatesheetName, false);

                                    res = NewNexege.NewNexgeUploadNew(serverDetails.ServerIp, map.Description, serverDetails.Username, serverDetails.Password, "Update", map.ServerRatesheetName, map.ServerRatesheetID, map.PulseRule, map.Active, map.GracePeriod, map.CompanyType == 1 ? true : false, NewResponsenewnexge.records, RatesheetId);

                                    break;
                                case 4:
                                    //VOS
                                    // res = NewNexgeUpload(serverDetails.Ipaddress, serverDetails.UserName, serverDetails.Password, actiontype, bpName, pulse, status, gracePeriod, useForTr, useForOr, planTypeCode, RatesheetName);
                                    break;
                                case 5:
                                    //New Nexege Test

                                    // pasupathi commented old code.
                                    //res = NewNexege.NewNexgeUpload(serverDetails.ServerIp, map.Description, serverDetails.Username, serverDetails.Password, "Update", map.ServerRatesheetName, map.ServerRatesheetID, map.PulseRule, map.Active, map.GracePeriod, map.CompanyType == 1 ? true : false, NewResponse.records);

                                    //// new code pasupathi

                                    res = NewNexege.NewNexgeUploadNew(serverDetails.ServerIp, map.Description, serverDetails.Username, serverDetails.Password, "Update", map.ServerRatesheetName, map.ServerRatesheetID, map.PulseRule, map.Active, map.GracePeriod, map.CompanyType == 1 ? true : false, NewResponse.records, RatesheetId);


                                    break;
                                case 6:
                                    //Old Nexege Test

                                    res = OldNexege.OldNexgeUpload(serverDetails.ServerIp, serverDetails.Username, serverDetails.Password, "Update", "", map.ServerRatesheetName, map.PulseRule, map.Active, map.GracePeriod, NewResponse.records);

                                    break;
                                case 7:
                                    //Jerasoft Test
                                    //shripal
                                    bool status1 = false;

                                    string datenow1 = string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now);

                                    string ServerRatesheetID1 = map.ServerRatesheetID;
                                    // string ServerRatesheetName = map.ServerRatesheetName;

                                    //FileStream fs1 = new FileStream(ConfigurationManager.AppSettings["ReplaceCSV_URL"].ToString() + NewFleName2, FileMode.Open, FileAccess.Read);

                                    //byte[] data1 = new byte[fs1.Length];
                                    //fs1.Read(data1, 0, data1.Length);
                                    //fs1.Close();

                                    //UpdateError("PushRatesheetToServerNew NewFleName2 done ", "", "RatesheetLogs.txt", "", false);
                                    //status1 = updateRatesheetInJera(Convert.ToString(ServerRatesheetID1), data1, NewFleName2, Convert.ToString(datenow1), serverDetails.ServerIp, serverDetails.Username, serverDetails.Password);
                                    UpdateError("PushRatesheetToServerNewUpdate VCS-DEMO ", NewFleName2, "RatesheetLogs.txt", "Before Upload Jera Test(VCS-DEMO)", false);
                                    status1 = Updateratesheet(NewFleName2, Convert.ToString(ServerRatesheetID1), Convert.ToString(datenow1), serverDetails.ServerIp, serverDetails.Username, serverDetails.Password, ServerCsvName);
                                    UpdateError("PushRatesheetToServerNewUpdate After Execute VCS-DEMO ", status1.ToString(), "RatesheetLogs.txt", "After Execute Jera Test(VCS-DEMO)", false);

                                    if (status1 == true)
                                        res.status = "success";
                                    else
                                        res.status = "failure";
                                    break;

                                    //res = JeraApi1.PushRateSheetV2(ContactResponse.records, serverDetails.Username, serverDetails.Password, serverDetails.ServerIp, serverDetails.SummaryURL.Split(',')[0], map.ServerRatesheetName);

                                    //UpdateError("PushRateSheetV2 function " + res.Message, res.status, "RatesheetLogs.txt", "", false);
                                    //break;
                            }
                            RMSCDR.AddRmsLogs(string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now), map.Server_ID.ToString(), res.status, res.Message, map.RatesheetID.ToString(), Source);

                            return res;
                        }

                    }
                    else
                    {
                        return new SuccessResponse() { status = "false", Message = "Mapping Not Found" };
                    }
                }
            }
            catch (Exception ex)
            {
                UpdateError("PushRatesheetToServerNew exception " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "", false);
                return new SuccessResponse() { status = "false", Message = ex.Message };
            }
            finally
            {

            }
        }

        public SuccessResponse PushRatesheetToServerUpdateParellel(int MappingID, string Source, string type, string value, string partitionid, string NewFleName2, string ServerCsvName, int RatesheetId, int addminute, string createdon)
        {
            SuccessResponse res = new SuccessResponse();
            int partitionID = 0;
            partitionID = Convert.ToInt32(partitionid);
            try
            {
                if (Source == "")
                {
                    Source = "Manual";
                }
                using (rmsEntities rms = new rmsEntities())
                {
                    var map = rms.server_ratesheet_map.SingleOrDefault(d => d.ID == MappingID);
                    if (map != null)
                    {

                        var serverDetails = rms.server_details.SingleOrDefault(d => d.ServerID == map.Server_ID);
                        switch (serverDetails.ServerType)
                        {
                            case 1:
                                //Old Nexge 

                                ShowRecords NewResponse = ShowsRates(Convert.ToInt32(map.RatesheetID), type, value, "", partitionID);
                                UpdateError("ShowRates Function After Success", NewResponse.status, "RatesheetLogs.txt", "", false);
                                if (NewResponse.status == "false")
                                {

                                    RMSCDR.AddRmsLogs(string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now), map.Server_ID.ToString(), NewResponse.status, NewResponse.message, map.RatesheetID.ToString(), Source);
                                    return new SuccessResponse() { status = "false", Message = "No Records To Push" };

                                }
                                res = OldNexege.OldNexgeUpload(serverDetails.ServerIp, serverDetails.Username, serverDetails.Password, "Update", "", map.ServerRatesheetName, map.PulseRule, map.Active, map.GracePeriod, NewResponse.records);

                                break;
                            case 2:
                                //Jerasoft
                                bool status = false;
                                string datenow = string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now);
                                string ServerRatesheetID = map.ServerRatesheetID;

                                status = Updateratesheetparellel(NewFleName2, Convert.ToString(ServerRatesheetID), Convert.ToString(datenow), serverDetails.ServerIp, serverDetails.Username, serverDetails.Password, ServerCsvName, addminute, createdon);

                                if (status == true)
                                    res.status = "success";
                                else
                                    res.status = "failure";

                                break;

                            case 3:

                                //ShowRecords NewResponsenewnexge = ShowsRatesNewNexge(Convert.ToInt32(map.RatesheetID), type, value, "", partitionID);
                                ////// new code pasupathi
                                //UpdateError("NewNexge NewNexgeUploadNew Started..", map.ServerRatesheetID.ToString(), "RatesheetLogs.txt", map.ServerRatesheetName, false);

                                //res = NewNexege.NewNexgeUploadNew(serverDetails.ServerIp, map.Description, serverDetails.Username, serverDetails.Password, "Update", map.ServerRatesheetName, map.ServerRatesheetID, map.PulseRule, map.Active, map.GracePeriod, map.CompanyType == 1 ? true : false, NewResponsenewnexge.records, RatesheetId);
                                res.status = "success";
                                break;

                            case 4:

                                break;

                            case 5:
                                //New Nexege Test
                                //// new code pasupathi

                                //ShowRecords NewResponsetest = ShowsRates(Convert.ToInt32(map.RatesheetID), type, value, "", partitionID);
                                //UpdateError("ShowRates Function After Success", NewResponsetest.status, "RatesheetLogs.txt", "", false);
                                //if (NewResponsetest.status == "false")
                                //{

                                //    RMSCDR.AddRmsLogs(string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now), map.Server_ID.ToString(), NewResponsetest.status, NewResponsetest.message, map.RatesheetID.ToString(), Source);
                                //    return new SuccessResponse() { status = "false", Message = "No Records To Push" };

                                //}

                                //res = NewNexege.NewNexgeUploadNew(serverDetails.ServerIp, map.Description, serverDetails.Username, serverDetails.Password, "Update", map.ServerRatesheetName, map.ServerRatesheetID, map.PulseRule, map.Active, map.GracePeriod, map.CompanyType == 1 ? true : false, NewResponsetest.records, RatesheetId);
                                res.status = "success";
                                break;

                            case 6:
                                //Old Nexege Test

                                ShowRecords NewResponseoldtest = ShowsRates(Convert.ToInt32(map.RatesheetID), type, value, "", partitionID);
                                UpdateError("ShowRates Function After Success", NewResponseoldtest.status, "RatesheetLogs.txt", "", false);
                                if (NewResponseoldtest.status == "false")
                                {

                                    RMSCDR.AddRmsLogs(string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now), map.Server_ID.ToString(), NewResponseoldtest.status, NewResponseoldtest.message, map.RatesheetID.ToString(), Source);
                                    return new SuccessResponse() { status = "false", Message = "No Records To Push" };
                                }

                                res = OldNexege.OldNexgeUpload(serverDetails.ServerIp, serverDetails.Username, serverDetails.Password, "Update", "", map.ServerRatesheetName, map.PulseRule, map.Active, map.GracePeriod, NewResponseoldtest.records);
                                break;

                            case 7:
                                //Jerasoft Test Pasupathi

                                bool status1 = false;
                                string datenow1 = string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now);
                                string ServerRatesheetID1 = map.ServerRatesheetID;

                                UpdateError("PushRatesheetToServerNewUpdate VCS-DEMO ", NewFleName2, "RatesheetLogs.txt", "Before Upload Jera Test(VCS-DEMO)", false);
                                //  status1 = Updateratesheet(NewFleName2, Convert.ToString(ServerRatesheetID1), Convert.ToString(datenow1), serverDetails.ServerIp, serverDetails.Username, serverDetails.Password, ServerCsvName);
                                status1 = Updateratesheetparellel(NewFleName2, Convert.ToString(ServerRatesheetID1), Convert.ToString(datenow1), serverDetails.ServerIp, serverDetails.Username, serverDetails.Password, ServerCsvName, addminute, createdon);

                                UpdateError("PushRatesheetToServerNewUpdate After Execute VCS-DEMO ", status1.ToString(), "RatesheetLogs.txt", "After Execute Jera Test(VCS-DEMO)", false);

                                if (status1 == true)
                                    res.status = "success";
                                else
                                    res.status = "failure";
                                break;
                        }
                        RMSCDR.AddRmsLogs(string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now), map.Server_ID.ToString(), res.status, res.Message, map.RatesheetID.ToString(), Source);

                        return res;

                    }
                    else
                    {
                        return new SuccessResponse() { status = "false", Message = "Mapping Not Found" };
                    }
                }
            }
            catch (Exception ex)
            {
                UpdateError("PushRatesheetToServerNew exception " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "", false);
                return new SuccessResponse() { status = "false", Message = ex.Message };
            }
            finally
            {

            }
        }

        public bool Updateratesheet(string NewFleName2, string ServerRatesheetID1, string datenow1, string ip, string username, string password, string ServerCsvName)
        {

            SuccessResponse res = new SuccessResponse();
            bool status1 = false;
            try
            {
                UpdateError("UpdateRatesheetServer Update before start", NewFleName2, "RatesheetLogs.txt", "", false);

                string csv_import_updatetemp = "temp" + NewFleName2;
                csv_import_updatetemp = csv_import_updatetemp.Substring(0, csv_import_updatetemp.Length - 4);
                MySqlConnection conn = new MySqlConnection(ConfigurationManager.ConnectionStrings["rmsconn"].ToString());
                string sql = "drop table IF EXISTS " + csv_import_updatetemp + ";CREATE TEMPORARY TABLE " + csv_import_updatetemp + "(ID int primary key auto_increment,code varchar(20),codename varchar(255),rate varchar(20),status varchar(20),date varchar(50),startpulse varchar(20),nextpulse varchar(20),enddate varchar(50));";
                MySqlCommand cmd = new MySqlCommand(sql, conn);
                conn.Open();
                int rdr = cmd.ExecuteNonQuery();
                UpdateError("UpdateRatesheetServer Update After create temptable", csv_import_updatetemp, "RatesheetLogs.txt", "", false);

                string queryload = "LOAD DATA INFILE '" + ConfigurationManager.AppSettings["tempUrl"].ToString() + NewFleName2 + "' INTO TABLE " + csv_import_updatetemp + " FIELDS TERMINATED BY ',' ENCLOSED BY '\"' LINES TERMINATED BY '\n' IGNORE 1 ROWS (code,codename,rate,status,date,startpulse,nextpulse,enddate);";

                MySqlCommand cmdload = new MySqlCommand(queryload, conn);
                UpdateError("UpdateRatesheetServer Update before execute connection check temptable", queryload, "RatesheetLogs.txt", queryload, false);
                int rdr22 = 0;
                try
                {
                    rdr22 = cmdload.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    UpdateError("UpdateRatesheetServer Update After load temptable", ex.InnerException.Message, "RatesheetLogs.txt", "", false);
                }

                UpdateError("UpdateRatesheetServer Update After load temptable", rdr22.ToString(), "RatesheetLogs.txt", "", false);
                DataTable DT = new DataTable();
                DataTable DT1 = new DataTable();
                if (rdr22 > -1)
                {
                    //  string path = "~/Temp/" + "delete" + ServerCsvName + "-" + NewFleName2;
                    string path = "~/Temp/" + "delete" + NewFleName2;
                    string SCSVName = "delete" + ServerCsvName + ".csv";
                    //Delete 
                    // string selectsql = "select * from " + csv_import_updatetemp + " where status='Delete' INTO OUTFILE '" + path + "' FIELDS TERMINATED BY ',' ENCLOSED BY '\" LINES TERMINATED BY '\n';";
                    string selectsql = "select code,Replace(codename,',','') as codename,rate,status,date,startpulse,nextpulse,enddate from " + csv_import_updatetemp + " where status='Delete';";
                    MySqlDataAdapter adp = new MySqlDataAdapter(selectsql, conn);
                    adp.Fill(DT);
                    UpdateError("UpdateRatesheetServer Update TempDeletecount", DT.Rows.Count.ToString(), "RatesheetLogs.txt", "", false);
                    if (DT.Rows.Count > 0)
                    {

                        CreateCSVFile(DT, HostingEnvironment.MapPath(path));

                        // string Path = GetRatelistparelleljerafilename(HostingEnvironment.MapPath(path), y);
                        //FileStream fs1 = new FileStream(Path, FileMode.Open, FileAccess.Read);

                        FileStream fs1 = new FileStream(HostingEnvironment.MapPath(path), FileMode.Open, FileAccess.Read);
                        byte[] data = new byte[fs1.Length];
                        fs1.Read(data, 0, data.Length);
                        fs1.Close();


                        // status1 = updateRatesheetInJera(Convert.ToString(ServerRatesheetID1), data, "delete" + ServerCsvName + "-" + NewFleName2, Convert.ToString(datenow1), ip, username, password);
                        status1 = updateRatesheetInJera(Convert.ToString(ServerRatesheetID1), data, SCSVName, Convert.ToString(datenow1), ip, username, password);

                        UpdateError("UpdateRatesheetServer WithDelete Tempdelete done ", "", "RatesheetLogs.txt", "", false);
                    }

                    UpdateError("UpdateRatesheetServer Update before Nondelete", NewFleName2, "RatesheetLogs.txt", "", false);
                    //Non Delete
                    string selectnonsql = "select code,Replace(codename,',','') as codename,rate,status,date,startpulse,nextpulse from " + csv_import_updatetemp + " where status!='Delete';";
                    MySqlDataAdapter adp1 = new MySqlDataAdapter(selectnonsql, conn);
                    adp1.Fill(DT1);
                    if (DT1.Rows.Count > 0)
                    {

                        // var nondelrecord = DT1;
                        // string path1 = "~/Temp/" + ServerCsvName + "-" + NewFleName2;
                        string path1 = "~/Temp/" + NewFleName2;
                        string SerCSVName = ServerCsvName + ".csv";
                        CreateCSVFile(DT1, HostingEnvironment.MapPath(path1));
                        // File.AppendAllText(HostingEnvironment.MapPath(path1), nondelrecord.ToString());

                        // string Path1 = GetRatelistparelleljerafilename(HostingEnvironment.MapPath(path1), y);
                        //FileStream fs1 = new FileStream(Path1, FileMode.Open, FileAccess.Read);

                        FileStream fs1 = new FileStream(HostingEnvironment.MapPath(path1), FileMode.Open, FileAccess.Read);
                        byte[] data1 = new byte[fs1.Length];
                        fs1.Read(data1, 0, data1.Length);
                        fs1.Close();
                        // status1 = updateRatesheetInJera(Convert.ToString(ServerRatesheetID1), data1, ServerCsvName + "-" + NewFleName2, Convert.ToString(datenow1), ip, username, password);
                        status1 = updateRatesheetInJera(Convert.ToString(ServerRatesheetID1), data1, SerCSVName, Convert.ToString(datenow1), ip, username, password);

                        UpdateError("UpdateRatesheetServer WithoutDelete TempBlock done ", status1.ToString(), "RatesheetLogs.txt", "", false);
                    }
                    conn.Close();

                }
            }
            catch (Exception ex)
            {
                UpdateError("UpdateRatesheetServer Delete and Nondelete Failure ", ex.InnerException.Message, "RatesheetLogs.txt", "", false);
            }
            return status1;
        }

        public bool Updateratesheetparellel(string NewFleName2, string ServerRatesheetID1, string datenow1, string ip, string username, string password, string ServerCsvName, int addminute, string createdon)
        {

            SuccessResponse res = new SuccessResponse();
            bool status1 = false;
            try
            {
                UpdateError("UpdateRatesheetServer Update before start", NewFleName2, "RatesheetLogs.txt", "", false);

                string csv_import_updatetemp = "temp" + NewFleName2;
                csv_import_updatetemp = csv_import_updatetemp.Substring(0, csv_import_updatetemp.Length - 4);
                MySqlConnection conn = new MySqlConnection(ConfigurationManager.ConnectionStrings["rmsconn"].ToString());
                string sql = "drop table IF EXISTS " + csv_import_updatetemp + ";CREATE TEMPORARY TABLE " + csv_import_updatetemp + "(ID int primary key auto_increment,code varchar(20),codename varchar(255),rate varchar(20),status varchar(20),date varchar(50),startpulse varchar(20),nextpulse varchar(20),enddate varchar(50));";
                MySqlCommand cmd = new MySqlCommand(sql, conn);
                conn.Open();
                int rdr = cmd.ExecuteNonQuery();
                UpdateError("UpdateRatesheetServer Update After create temptable", csv_import_updatetemp, "RatesheetLogs.txt", "", false);

                string queryload = "LOAD DATA INFILE '" + ConfigurationManager.AppSettings["tempUrl"].ToString() + NewFleName2 + "' INTO TABLE " + csv_import_updatetemp + " FIELDS TERMINATED BY ',' ENCLOSED BY '\"' LINES TERMINATED BY '\n' IGNORE 1 ROWS (code,codename,rate,status,date,startpulse,nextpulse,enddate);";

                MySqlCommand cmdload = new MySqlCommand(queryload, conn);
                UpdateError("UpdateRatesheetServer Update before execute connection check temptable", queryload, "RatesheetLogs.txt", queryload, false);
                int rdr22 = 0;
                try
                {
                    rdr22 = cmdload.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    UpdateError("UpdateRatesheetServer Update After load temptable", ex.InnerException.Message, "RatesheetLogs.txt", "", false);
                }

                UpdateError("UpdateRatesheetServer Update After load temptable", rdr22.ToString(), "RatesheetLogs.txt", "", false);
                DataTable DT = new DataTable();
                DataTable DT1 = new DataTable();
                if (rdr22 > -1)
                {
                    //  string path = "~/Temp/" + "delete" + ServerCsvName + "-" + NewFleName2;
                    // string path = "~/Temp/" + "delete" + NewFleName2;
                    string path = "~/Temp/" + "delete" + DateTime.Now.ToString("yyyyMMddHHmmssffff") + ".csv";
                    string SCSVName = "delete" + ServerCsvName + ".csv";
                    //Delete 
                    // string selectsql = "select * from " + csv_import_updatetemp + " where status='Delete' INTO OUTFILE '" + path + "' FIELDS TERMINATED BY ',' ENCLOSED BY '\" LINES TERMINATED BY '\n';";
                    string selectsql = "select code,Replace(codename,',','') as codename,rate,status,date,startpulse,nextpulse,enddate from " + csv_import_updatetemp + " where status='Delete';";
                    MySqlDataAdapter adp = new MySqlDataAdapter(selectsql, conn);
                    adp.Fill(DT);
                    UpdateError("UpdateRatesheetServer Update TempDeletecount", DT.Rows.Count.ToString(), "RatesheetLogs.txt", "", false);
                    if (DT.Rows.Count > 0)
                    {

                        CreateCSVFile(DT, HostingEnvironment.MapPath(path));

                        string Path = GetRatelistparelleljerafilename(HostingEnvironment.MapPath(path), addminute, createdon);
                        FileStream fs1 = new FileStream(Path, FileMode.Open, FileAccess.Read);

                        //  FileStream fs1 = new FileStream(HostingEnvironment.MapPath(path), FileMode.Open, FileAccess.Read);
                        byte[] data = new byte[fs1.Length];
                        fs1.Read(data, 0, data.Length);
                        fs1.Close();


                        // status1 = updateRatesheetInJera(Convert.ToString(ServerRatesheetID1), data, "delete" + ServerCsvName + "-" + NewFleName2, Convert.ToString(datenow1), ip, username, password);
                        status1 = updateRatesheetInJera(Convert.ToString(ServerRatesheetID1), data, SCSVName, Convert.ToString(datenow1), ip, username, password);

                        UpdateError("UpdateRatesheetServer WithDelete Tempdelete done ", "", "RatesheetLogs.txt", "", false);
                    }

                    UpdateError("UpdateRatesheetServer Update before Nondelete", NewFleName2, "RatesheetLogs.txt", "", false);
                    //Non Delete
                    string selectnonsql = "select code,Replace(codename,',','') as codename,rate,status,date,startpulse,nextpulse,enddate from " + csv_import_updatetemp + " where status!='Delete';";
                    MySqlDataAdapter adp1 = new MySqlDataAdapter(selectnonsql, conn);
                    adp1.Fill(DT1);
                    if (DT1.Rows.Count > 0)
                    {

                        // var nondelrecord = DT1;
                        // string path1 = "~/Temp/" + ServerCsvName + "-" + NewFleName2;
                        // string path1 = "~/Temp/" + NewFleName2;
                        string path1 = "~/Temp/" + DateTime.Now.ToString("yyyyMMddHHmmssffff") + ".csv";
                        string SerCSVName = ServerCsvName + ".csv";
                        CreateCSVFile(DT1, HostingEnvironment.MapPath(path1));
                        // File.AppendAllText(HostingEnvironment.MapPath(path1), nondelrecord.ToString());

                        string Path1 = GetRatelistparelleljerafilename(HostingEnvironment.MapPath(path1), addminute, createdon);
                        FileStream fs1 = new FileStream(Path1, FileMode.Open, FileAccess.Read);

                        // FileStream fs1 = new FileStream(HostingEnvironment.MapPath(path1), FileMode.Open, FileAccess.Read);
                        byte[] data1 = new byte[fs1.Length];
                        fs1.Read(data1, 0, data1.Length);
                        fs1.Close();
                        // status1 = updateRatesheetInJera(Convert.ToString(ServerRatesheetID1), data1, ServerCsvName + "-" + NewFleName2, Convert.ToString(datenow1), ip, username, password);
                        status1 = updateRatesheetInJera(Convert.ToString(ServerRatesheetID1), data1, SerCSVName, Convert.ToString(datenow1), ip, username, password);

                        UpdateError("UpdateRatesheetServer WithoutDelete TempBlock done ", status1.ToString(), "RatesheetLogs.txt", "", false);
                    }
                    conn.Close();

                }
            }
            catch (Exception ex)
            {
                UpdateError("UpdateRatesheetServer Delete and Nondelete Failure ", ex.Message, "RatesheetLogs.txt", "", false);
            }
            return status1;
        }

        public string UpdateratesheetNexge(string NewFleName2, string ServerCsvName)
        {
            string path = "~/Temp/" + "Nexge" + GetTimestamp(DateTime.Now) + NewFleName2;
            SuccessResponse res = new SuccessResponse();

            try
            {
                UpdateError("UpdateRatesheetServer Update before start", NewFleName2, "ParellelRatesheetLogsy.txt", "", false);

                string csv_import_updatetemp = "tempNexge" + NewFleName2;
                csv_import_updatetemp = csv_import_updatetemp.Substring(0, csv_import_updatetemp.Length - 4);
                MySqlConnection conn = new MySqlConnection(ConfigurationManager.ConnectionStrings["rmsconn"].ToString());
                string sql = "drop table IF EXISTS " + csv_import_updatetemp + ";CREATE TEMPORARY TABLE " + csv_import_updatetemp + "(ID int primary key auto_increment,code varchar(20),codename varchar(255),rate varchar(20),status varchar(20),date varchar(50),startpulse varchar(20),nextpulse varchar(20),enddate varchar(50));";
                MySqlCommand cmd = new MySqlCommand(sql, conn);
                conn.Open();
                int rdr = cmd.ExecuteNonQuery();
                UpdateError("UpdateRatesheetServer Update After create temptable", csv_import_updatetemp, "ParellelRatesheetLogsy.txt", "", false);

                string queryload = "LOAD DATA INFILE '" + ConfigurationManager.AppSettings["tempUrl"].ToString() + NewFleName2 + "' INTO TABLE " + csv_import_updatetemp + " FIELDS TERMINATED BY ',' ENCLOSED BY '\"' LINES TERMINATED BY '\n' IGNORE 1 ROWS (code,codename,rate,status,date,startpulse,nextpulse,enddate);";

                MySqlCommand cmdload = new MySqlCommand(queryload, conn);
                UpdateError("UpdateRatesheetServer Update before execute connection check temptable", queryload, "ParellelRatesheetLogsy.txt", queryload, false);
                int rdr22 = 0;
                try
                {
                    rdr22 = cmdload.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    UpdateError("UpdateRatesheetServer Update After load temptable", ex.InnerException.Message, "ParellelRatesheetLogsy.txt", "", false);
                }

                UpdateError("UpdateRatesheetServer Update After load temptable", rdr22.ToString(), "ParellelRatesheetLogsy.txt", "", false);
                DataTable DT = new DataTable();
                DataTable DT1 = new DataTable();
                if (rdr22 > -1)
                {
                    //  string path = "~/Temp/" + "delete" + ServerCsvName + "-" + NewFleName2;
                    string updatequery = "update " + csv_import_updatetemp + " set enddate='2500-01-01 00:00:00 +0000' where code is not null ;";
                    MySqlCommand cmdupdate = new MySqlCommand(updatequery, conn);
                    rdr22 = cmdupdate.ExecuteNonQuery();

                    string SCSVName = ServerCsvName + ".csv";
                    //Delete 
                    // string selectsql = "select * from " + csv_import_updatetemp + " where status='Delete' INTO OUTFILE '" + path + "' FIELDS TERMINATED BY ',' ENCLOSED BY '\" LINES TERMINATED BY '\n';";
                    string selectsql = "select code,Replace(codename,',','') as codename,rate,status,date,startpulse,nextpulse,enddate from " + csv_import_updatetemp + ";";
                    MySqlDataAdapter adp = new MySqlDataAdapter(selectsql, conn);
                    adp.Fill(DT);
                    UpdateError("UpdateRatesheetServer Update TempDeletecount", DT.Rows.Count.ToString(), "ParellelRatesheetLogsy.txt", "", false);
                    if (DT.Rows.Count > 0)
                    {
                        CreateCSVFileNexge(DT, HostingEnvironment.MapPath(path));

                        UpdateError("UpdateRatesheetServer WithDelete Tempdelete done ", "", "ParellelRatesheetLogsy.txt", "", false);
                    }
                    conn.Close();

                }
            }
            catch (Exception ex)
            {
                UpdateError("UpdateRatesheetServer Delete and Nondelete Failure ", ex.InnerException.Message, "RatesheetLogs.txt", "", false);
            }
            return path;
        }
        public string UpdateratesheetRates(string NewFleName2, string ServerCsvName)
        {
            string path = "~/Temp/" + "Nexge" + GetTimestamp(DateTime.Now) + NewFleName2;
            SuccessResponse res = new SuccessResponse();

            try
            {
                // UpdateError("UpdateRatesheetServer Update before start", NewFleName2, "ParellelRatesheetLogsy.txt", "", false);
                CommonLog("UpdateRatesheetServer Update before start=" + NewFleName2);

                string csv_import_updatetemp = "tempNexge" + NewFleName2;
                csv_import_updatetemp = csv_import_updatetemp.Substring(0, csv_import_updatetemp.Length - 4);
                MySqlConnection conn = new MySqlConnection(ConfigurationManager.ConnectionStrings["rmsconn"].ToString());
                string sql = "drop table IF EXISTS " + csv_import_updatetemp + ";CREATE TEMPORARY TABLE " + csv_import_updatetemp + "(ID int primary key auto_increment,code varchar(20),codename varchar(255),rate varchar(20),status varchar(20),date varchar(50),startpulse varchar(20),nextpulse varchar(20),enddate varchar(50));";
                MySqlCommand cmd = new MySqlCommand(sql, conn);
                conn.Open();
                int rdr = cmd.ExecuteNonQuery();
                // UpdateError("UpdateRatesheetServer Update After create temptable", csv_import_updatetemp, "ParellelRatesheetLogsy.txt", "", false);
                CommonLog("UpdateRatesheetServer Update After create temptable:  " + csv_import_updatetemp);

                string queryload = "LOAD DATA INFILE '" + ConfigurationManager.AppSettings["tempUrl"].ToString() + NewFleName2 + "' INTO TABLE " + csv_import_updatetemp + " FIELDS TERMINATED BY ',' ENCLOSED BY '\"' LINES TERMINATED BY '\n' IGNORE 1 ROWS (code,codename,rate,status,date,startpulse,nextpulse,enddate);";

                MySqlCommand cmdload = new MySqlCommand(queryload, conn);
                // UpdateError("UpdateRatesheetServer Update before execute connection check temptable", queryload, "ParellelRatesheetLogsy.txt", queryload, false);
                CommonLog("UpdateRatesheetServer Update before execute connection check temptable:   " + queryload);

                int rdr22 = 0;
                try
                {
                    rdr22 = cmdload.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    // UpdateError("UpdateRatesheetServer Update After load temptable", ex.Message, "ParellelRatesheetLogsy.txt", "", false);
                    CommonLog("UpdateRatesheetServer Update After load temptable Error Message:    " + ex.Message);
                }

                // UpdateError("UpdateRatesheetServer Update After load temptable", rdr22.ToString(), "ParellelRatesheetLogsy.txt", "", false);
                CommonLog("UpdateRatesheetServer Update After load temptable:    " + rdr22.ToString());

                DataTable DT = new DataTable();
                DataTable DT1 = new DataTable();
                if (rdr22 > -1)
                {
                    //  string path = "~/Temp/" + "delete" + ServerCsvName + "-" + NewFleName2;
                    string updatequery = "update " + csv_import_updatetemp + " set enddate='2500-01-01 00:00:00 +0000' where code is not null ;";
                    MySqlCommand cmdupdate = new MySqlCommand(updatequery, conn);
                    rdr22 = cmdupdate.ExecuteNonQuery();

                    string SCSVName = ServerCsvName + ".csv";
                    //Delete 
                    // string selectsql = "select * from " + csv_import_updatetemp + " where status='Delete' INTO OUTFILE '" + path + "' FIELDS TERMINATED BY ',' ENCLOSED BY '\" LINES TERMINATED BY '\n';";
                    string selectsql = "select code,Replace(codename,',','') as codename,rate,status,date,startpulse,nextpulse,enddate from " + csv_import_updatetemp + ";";
                    MySqlDataAdapter adp = new MySqlDataAdapter(selectsql, conn);
                    adp.Fill(DT);
                    //  UpdateError("UpdateRatesheetServer Update TempDeletecount", DT.Rows.Count.ToString(), "ParellelRatesheetLogsy.txt", "", false);
                    CommonLog("UpdateRatesheetServer Update TempDeletecount:    " + DT.Rows.Count.ToString());
                    if (DT.Rows.Count > 0)
                    {
                        CreateCSVFileNexge(DT, HostingEnvironment.MapPath(path));

                        // UpdateError("UpdateRatesheetServer WithDelete Tempdelete done ", "", "ParellelRatesheetLogsy.txt", "", false);
                        CommonLog("UpdateRatesheetServer WithDelete Tempdelete done ");
                    }
                    conn.Close();

                }
            }
            catch (Exception ex)
            {
                UpdateError("UpdateRatesheetServer Delete and Nondelete Failure ", ex.Message, "RatesheetLogs.txt", "", false);
            }
            return path;
        }

        public string UpdateratesheetEmailsend(string NewFleName2, string ServerCsvName)
        {
            string path = "~/Temp/" + "Nexge" + GetTimestamp(DateTime.Now) + NewFleName2;
            SuccessResponse res = new SuccessResponse();

            try
            {
                // UpdateError("UpdateRatesheetServer Update before start", NewFleName2, "ParellelRatesheetLogsy.txt", "", false);

                string csv_import_updatetemp = "tempNexge" + NewFleName2;
                csv_import_updatetemp = csv_import_updatetemp.Substring(0, csv_import_updatetemp.Length - 4);
                MySqlConnection conn = new MySqlConnection(ConfigurationManager.ConnectionStrings["rmsconn"].ToString());
                string sql = "drop table IF EXISTS " + csv_import_updatetemp + ";CREATE TEMPORARY TABLE " + csv_import_updatetemp + "(ID int primary key auto_increment,code varchar(20),codename varchar(255),rate varchar(20),status varchar(20),date varchar(50),startpulse varchar(20),nextpulse varchar(20),enddate varchar(50));";
                MySqlCommand cmd = new MySqlCommand(sql, conn);
                conn.Open();
                int rdr = cmd.ExecuteNonQuery();
                //  UpdateError("UpdateRatesheetServer Update After create temptable", csv_import_updatetemp, "ParellelRatesheetLogsy.txt", "", false);

                string queryload = "LOAD DATA INFILE '" + ConfigurationManager.AppSettings["tempUrl"].ToString() + NewFleName2 + "' INTO TABLE " + csv_import_updatetemp + " FIELDS TERMINATED BY ',' ENCLOSED BY '\"' LINES TERMINATED BY '\n' IGNORE 1 ROWS (code,codename,rate,status,date,startpulse,nextpulse,enddate);";

                MySqlCommand cmdload = new MySqlCommand(queryload, conn);
                //  UpdateError("UpdateRatesheetServer Update before execute connection check temptable", queryload, "ParellelRatesheetLogsy.txt", queryload, false);
                int rdr22 = 0;
                try
                {
                    rdr22 = cmdload.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    //  UpdateError("UpdateRatesheetServer Update After load temptable", ex.InnerException.Message, "ParellelRatesheetLogsy.txt", "", false);
                }

                // UpdateError("UpdateRatesheetServer Update After load temptable", rdr22.ToString(), "ParellelRatesheetLogsy.txt", "", false);
                DataTable DT = new DataTable();
                DataTable DT1 = new DataTable();
                if (rdr22 > -1)
                {
                    //  string path = "~/Temp/" + "delete" + ServerCsvName + "-" + NewFleName2;
                    string updatequery = "update " + csv_import_updatetemp + " set enddate='2500-01-01 00:00:00 +0000' where code is not null ;";
                    MySqlCommand cmdupdate = new MySqlCommand(updatequery, conn);
                    rdr22 = cmdupdate.ExecuteNonQuery();

                    string SCSVName = ServerCsvName + ".csv";
                    //Delete 
                    // string selectsql = "select * from " + csv_import_updatetemp + " where status='Delete' INTO OUTFILE '" + path + "' FIELDS TERMINATED BY ',' ENCLOSED BY '\" LINES TERMINATED BY '\n';";
                    string selectsql = "select code,Replace(codename,',','') as codename,rate,status,date,startpulse,nextpulse,enddate from " + csv_import_updatetemp + ";";
                    MySqlDataAdapter adp = new MySqlDataAdapter(selectsql, conn);
                    adp.Fill(DT);
                    // UpdateError("UpdateRatesheetServer Update TempDeletecount", DT.Rows.Count.ToString(), "ParellelRatesheetLogsy.txt", "", false);
                    if (DT.Rows.Count > 0)
                    {
                        CreateCSVFileNexge(DT, HostingEnvironment.MapPath(path));

                        //  UpdateError("UpdateRatesheetServer WithDelete Tempdelete done ", "", "ParellelRatesheetLogsy.txt", "", false);
                    }
                    conn.Close();

                }
            }
            catch (Exception ex)
            {
                // UpdateError("UpdateRatesheetServer Delete and Nondelete Failure ", ex.InnerException.Message, "RatesheetLogs.txt", "", false);
            }
            return path;
        }

        public void CreateCSVFile(DataTable dt, string strFilePath)
        {
            UpdateError("UpdateRatesheetServer Update before createCSV", strFilePath, "RatesheetLogs.txt", "", false);

            StreamWriter sw = new StreamWriter(strFilePath, false);

            int iColCount = dt.Columns.Count;

            for (int i = 0; i < iColCount; i++)
            {
                sw.Write(dt.Columns[i]);

                if (i < iColCount - 1)
                {

                    sw.Write(",");

                }

            }

            sw.Write(sw.NewLine);

            foreach (DataRow dr in dt.Rows)
            {

                for (int i = 0; i < iColCount; i++)
                {

                    if (!Convert.IsDBNull(dr[i]))
                    {

                        sw.Write(dr[i].ToString());

                    }

                    if (i < iColCount - 1)
                    {

                        sw.Write(",");

                    }

                }
                sw.Write(sw.NewLine);
            }

            sw.Close();
        }

        public void CreateCSVFileNexge(DataTable dt, string strFilePath)
        {
            try
            {
                UpdateError("UpdateRatesheetServer Update before createCSV", strFilePath, "ParellelRatesheetLogsy.txt", "", false);

                StreamWriter sw = new StreamWriter(strFilePath, false);

                int iColCount = dt.Columns.Count;

                for (int i = 0; i < iColCount; i++)
                {
                    sw.Write(dt.Columns[i]);

                    if (i < iColCount - 1)
                    {

                        sw.Write(",");

                    }

                }

                sw.Write(sw.NewLine);

                foreach (DataRow dr in dt.Rows)
                {

                    for (int i = 0; i < iColCount; i++)
                    {

                        if (!Convert.IsDBNull(dr[i]))
                        {

                            sw.Write(dr[i].ToString());

                        }

                        if (i < iColCount - 1)
                        {

                            sw.Write(",");

                        }

                    }
                    sw.Write(sw.NewLine);
                }

                sw.Close();
            }
            catch (Exception ex)
            {
                UpdateError("UpdateRatesheetServer Update after createCSV", ex.Message, "ParellelRatesheetLogsy.txt", "  " + ex.InnerException.Message, false);
            }
        }

        public void CreateCSVFileEmail(DataTable dt, string strFilePath)
        {
            try
            {
                // UpdateError("UpdateRatesheetServer Update before createCSV", strFilePath, "ParellelRatesheetLogsy.txt", "", false);

                StreamWriter sw = new StreamWriter(strFilePath, false);

                int iColCount = dt.Columns.Count;

                for (int i = 0; i < iColCount; i++)
                {
                    sw.Write(dt.Columns[i]);

                    if (i < iColCount - 1)
                    {

                        sw.Write(",");

                    }

                }

                sw.Write(sw.NewLine);

                foreach (DataRow dr in dt.Rows)
                {

                    for (int i = 0; i < iColCount; i++)
                    {

                        if (!Convert.IsDBNull(dr[i]))
                        {

                            sw.Write(dr[i].ToString());

                        }

                        if (i < iColCount - 1)
                        {

                            sw.Write(",");

                        }

                    }
                    sw.Write(sw.NewLine);
                }

                sw.Close();
            }
            catch (Exception ex)
            {
                UpdateError("UpdateRatesheetServer Update after createCSV", ex.Message, "ParellelRatesheetLogsy.txt", "  " + ex.InnerException.Message, false);
            }
        }
        public string[] csvParser(string input, char separator, char quotechar)
        {
            List<string> tokens = new List<string>();

            StringBuilder sb = new StringBuilder();
            bool escaped = false;
            foreach (char c in input)
            {
                if (c.Equals(separator) && !escaped)
                {
                    // we have a token
                    tokens.Add(sb.ToString().Trim());
                    sb.Clear();
                }
                else if (c.Equals(separator) && escaped)
                {
                    // ignore but add to string
                    sb.Append(c);
                }
                else if (c.Equals(quotechar))
                {
                    escaped = !escaped;
                    sb.Append(c);
                }
                else
                {
                    sb.Append(c);
                }
            }
            tokens.Add(sb.ToString().Trim());

            return tokens.ToArray();
        }
        //public Stream ShowsRates(int RatesheetID, string Type, string value, string regionCode, int partitionID)
        //{
        public SuccessResponse RatesheetEmailSend()
        {

            List<ngt_rateslist> NewResponse = new List<ngt_rateslist>();
            List<ngt_rateslist> NewResponseList = new List<ngt_rateslist>();

            SuccessResponse res = new SuccessResponse();



            using (rmsEntities rms = new rmsEntities())
            {

                var Emailstatusprog = rms.ratesheetemailsendstatus.Where(a => a.Sendstatus == "Pending");

                if (Emailstatusprog.Count() <= 0)
                {

                    var Emailstatus = rms.ratesheetemailsendstatus.Where(a => a.Sendstatus == "Pending").FirstOrDefault();



                    if (Emailstatus != null)
                    {
                        //UpdateError("Ratesheet Email Send Method Emailstatus Started.. ", "Ratesheet Id & Name: " + Emailstatus.RatesheetName + "," + Emailstatus.RatesheetId, "RatesheetEmail.txt", "", false);

                        Emailstatus.Sendstatus = "Progress";
                        rms.SaveChanges();

                        if (Emailstatus.Requesttype == "Update")
                        {
                            //UpdateError("Ratesheet Email Send Method Emailstatus.Requesttype Started.. Method Name :Update ", "Ratesheet Id & Name: " + Emailstatus.RatesheetName + "," + Emailstatus.RatesheetId, "RatesheetEmail.txt", "", false);


                            string Path = UpdateratesheetEmailsend(Emailstatus.ServernameCSV, Emailstatus.RatesheetName);
                            NewResponse = GetRatelistnexge(HostingEnvironment.MapPath(Path));


                            var Regioncode = NewResponse.Select(a => a.ngt_regionName).ToList();
                            Int32 RateId = Convert.ToInt32(Emailstatus.RatesheetId);
                            List<ngt_rates_1> Ratelist = Ratelist = rms.ngt_rates_1.Where(e => e.RatesheetID == RateId && e.Active != "N" && e.ngt_PartitionId == 10 && !Regioncode.Contains(e.RegionCode)).OrderBy(e => e.ngt_region_codeId).ToList();

                            //UpdateError("Ratesheet Email Send Method Started.. Region Code Count ", "Regioncode count" + Regioncode.Count, "RatesheetEmail.txt", " Ratesheet Id & Name: " + Emailstatus.RatesheetName + "," + Emailstatus.RatesheetId, false);

                            foreach (var a in Ratelist)
                            {
                                NewResponseList.Add(new ngt_rateslist()
                                {
                                    Id = 1,
                                    Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", a.Effective_on),
                                    Call_rate = Convert.ToDecimal(a.Call_rate),
                                    Grace_period = 1,
                                    Minimal_time = 1,
                                    Resolution = 1,
                                    ngt_region_codeId = 1,
                                    ngt_regionName = a.RegionCode,
                                    Description = a.Description,
                                    Connection_charge = 1,
                                    Active = a.Active.ToUpper(),
                                    Priority = 1,
                                    Trunck = a.Trunck,
                                    BatchID = 1,
                                    CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", a.CreatedOn),
                                    StartPulse = "Same",
                                    NextPulse = "Same"
                                });
                            }

                            List<ngt_rates_1> Ratelistdata = Ratelist = rms.ngt_rates_1.Where(e => e.RatesheetID == RateId && e.Active != "N" && e.ngt_PartitionId == 10 && Regioncode.Contains(e.RegionCode)).OrderBy(e => e.ngt_region_codeId).ToList();

                            UpdateError("Ratesheet Email Send Method Ratelistdata Started.. Ratesheetlistdatacount ", "Regioncode count" + Ratelistdata.Count, "RatesheetEmail.txt", " Ratesheet Id & Name: " + Emailstatus.RatesheetName + "," + Emailstatus.RatesheetId, false);

                            foreach (var a in NewResponse)
                            {
                                var rate = Ratelistdata.Where(b => b.RegionCode == a.ngt_regionName).Select(t =>
                                t.Call_rate).FirstOrDefault();
                                if (!String.IsNullOrEmpty(rate.ToString()))
                                {


                                    NewResponseList.Add(new ngt_rateslist()
                                    {
                                        Id = 1,
                                        Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", a.Effective_on),
                                        Call_rate = Convert.ToDecimal(a.Call_rate),
                                        Grace_period = 1,
                                        Minimal_time = 1,
                                        Resolution = 1,
                                        ngt_region_codeId = 1,
                                        ngt_regionName = a.ngt_regionName,
                                        Description = a.Description,
                                        Connection_charge = 1,
                                        Active = a.Active.ToUpper(),
                                        Priority = 1,
                                        Trunck = a.Trunck,
                                        BatchID = 1,
                                        CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", a.CreatedOn),
                                        StartPulse = rate == 0 ? "Same" : rate > a.Call_rate ? "Increase" : "Decrease",
                                        NextPulse = rate == 0 ? "Same" : rate > a.Call_rate ? "Increase" : "Decrease"
                                    });
                                }
                            }

                            try
                            {
                                UpdateError("Ratesheet Email Company beforepasu.. Ratesheetlistdatacount ", "Newresponse count" + NewResponseList.Count, "RatesheetEmail.txt", "", false);
                                Int32 RatesheetIdId = Convert.ToInt32(Emailstatus.RatesheetId);


                                var companydetails = from a in rms.sales_company.ToList()
                                                     join b in rms.ngt_com.ToList() on a.Name.Trim() equals b.Webaddress.Trim()
                                                     join c in rms.nexge_com_map.ToList() on b.Id equals c.ngt_comId
                                                     join d in rms.server_ratesheet_map.ToList() on c.ServerRatesheetID equals d.ID
                                                     where c.ServerRatesheetID > 0 & c.Active == "1" &
                                                           d.RatesheetID == RatesheetIdId
                                                     select a;


                                UpdateError("Ratesheet Email Company beforepasuPasu.. RatesheetlistdatacountPASU ", "Newresponse count" + NewResponseList.Count, "RatesheetEmail.txt", "companydetails:" + companydetails, false);

                                if (companydetails != null)
                                {

                                    UpdateError("Ratesheet Email Send companydetails Started.. Method Name :Replace ", "Ratesheet Id & Name: " + Emailstatus.RatesheetName + "," + Emailstatus.RatesheetId, "RatesheetEmail.txt", " Client:" + companydetails.FirstOrDefault().Name, false);

                                    string CompanyName = companydetails.FirstOrDefault().Name;
                                    RatesheetEmail ss = new RatesheetEmail();
                                    Int32 companyid = companydetails.FirstOrDefault().ID;
                                    var Email = rms.sales_info.Where(t => t.sales_companyID == companyid).FirstOrDefault();
                                    ss.EmailRatesheet(NewResponseList, CompanyName, Email.Email);
                                    Emailstatus.Sendstatus = "Complete";
                                    rms.SaveChanges();
                                }
                                else
                                {
                                    UpdateError("Ratesheet Email Company beforepasu..Vendor ", "Newresponse count" + NewResponseList.Count, "RatesheetEmail.txt", "", false);

                                    Int32 RatesheetIdIdid = Convert.ToInt32(Emailstatus.RatesheetId);


                                    try
                                    {
                                        var companydetailsvend = from a in rms.sales_company.ToList()
                                                                 join b in rms.ngt_vendor.ToList() on a.Name.Trim() equals b.Webaddress.Trim()
                                                                 join c in rms.nexge_vendor_map.ToList() on b.Id equals c.ngt_vendorId
                                                                 join d in rms.server_ratesheet_map.ToList() on c.ServerRatesheetID equals d.ID
                                                                 where c.ServerRatesheetID > 0 & c.Active == "1" &
                                                                       d.RatesheetID == RatesheetIdIdid
                                                                 select a;

                                        UpdateError("Ratesheet Email Company beforepasu..Vendor RatesheetIdIdid ", "Newresponse count" + NewResponseList.Count, "RatesheetEmail.txt", "companydetailsvend:" + companydetailsvend, false);

                                        if (companydetailsvend != null)
                                        {

                                            //UpdateError("Ratesheet Email Send Method companydetailsvend Started Vendor.. Method Name :Update ", "Ratesheet Id & Name: " + Emailstatus.RatesheetName + "," + Emailstatus.RatesheetId, "RatesheetEmail.txt", " Vendor:" + companydetailsvend.FirstOrDefault().Name, false);


                                            string CompanyName = companydetails.FirstOrDefault().Name;
                                            RatesheetEmail ss = new RatesheetEmail();
                                            Int32 companyid = companydetails.FirstOrDefault().ID;
                                            var Email = rms.sales_info.Where(t => t.sales_companyID == companyid).FirstOrDefault();
                                            ss.EmailRatesheet(NewResponseList, CompanyName, Email.Email);
                                            //ss.EmailRatesheet(NewResponseList, CompanyName);
                                            Emailstatus.Sendstatus = "Complete";
                                            rms.SaveChanges();
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        UpdateError("Ratesheet Email Company beforepasu..Vendor RatesheetIdIdid Error ", "", "RatesheetEmail.txt", "Error:" + ex.Message, false);
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                UpdateError("Ratesheet Email Send Method Update Error.. Ratesheetlistdatacount Update ", " Error:" + ex.Message, "RatesheetEmail.txt", " Ratesheet Id & Name: " + Emailstatus.RatesheetName + "," + Emailstatus.RatesheetId, false);
                            }

                        }

                        else
                        {
                            //UpdateError("Ratesheet Email Send Method Started Intialize.. Method Name :Replace ", "Ratesheet Id & Name: " + Emailstatus.RatesheetName + "," + Emailstatus.RatesheetId, "RatesheetEmail.txt", "", false);

                            string path = ConfigurationManager.AppSettings["ReplaceCSV_URL"].ToString() + Emailstatus.ServernameCSV;
                            NewResponse = GetRatelistRatesheet(path);
                            var Regioncode = NewResponse.Select(a => a.ngt_regionName).ToList();

                            Int32 RateId = Convert.ToInt32(Emailstatus.RatesheetId);

                            List<ngt_rates_1> Ratelistdata = rms.ngt_rates_1.Where(e => e.RatesheetID == RateId && e.Active != "N" && e.ngt_PartitionId == 10 && Regioncode.Contains(e.RegionCode)).OrderBy(e => e.ngt_region_codeId).ToList();

                            //UpdateError("Ratesheet Email Send Method Started.. Method Name :Replace ", "Ratesheet Id & Name: " + Emailstatus.RatesheetName + "," + Emailstatus.RatesheetId, "RatesheetEmail.txt", "Regioncode count" + Ratelistdata.Count + "Ratelistdata, Ratelistdatacount: " + Ratelistdata.Count, false);

                            foreach (var a in NewResponse)
                            {
                                var rate = Ratelistdata.Where(b => b.RegionCode == a.ngt_regionName).Select(t =>
                                t.Call_rate).FirstOrDefault();
                                if (!String.IsNullOrEmpty(rate.ToString()))
                                {

                                    NewResponseList.Add(new ngt_rateslist()
                                    {
                                        Id = 1,
                                        Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", a.Effective_on),
                                        Call_rate = Convert.ToDecimal(a.Call_rate),
                                        Grace_period = 1,
                                        Minimal_time = 1,
                                        Resolution = 1,
                                        ngt_region_codeId = 1,
                                        ngt_regionName = a.ngt_regionName,
                                        Description = a.Description,
                                        Connection_charge = 1,
                                        Active = a.Active.ToUpper(),
                                        Priority = 1,
                                        Trunck = a.Trunck,
                                        BatchID = 1,
                                        CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", a.CreatedOn),
                                        StartPulse = rate == 0 ? "Same" : rate > a.Call_rate ? "Increase" : "Decrease",
                                        NextPulse = rate == 0 ? "Same" : rate > a.Call_rate ? "Increase" : "Decrease"
                                    });
                                }
                            }

                            try
                            {

                                UpdateError("Ratesheet Email Send beofre company companydetails.. Method Name :Replace Count:" + NewResponseList.Count, "Ratelistdata, Ratelistdatacount: completed", "RatesheetEmail.txt", "Regioncode count completed", false);

                                Int32 vendratesheetid = Convert.ToInt32(Emailstatus.RatesheetId);
                                //UpdateError("Ratesheet Email Send After company companydetails.. Method Name:Replace", "VendRatesheetCompleted", "RatesheetEmail.txt", "vendratesheetid:" + vendratesheetid, false);

                                var companydetails = from a in rms.sales_company.ToList()
                                                     join b in rms.ngt_com.ToList() on a.Name.Trim() equals b.Webaddress.Trim()
                                                     join c in rms.nexge_com_map.ToList() on b.Id equals c.ngt_comId
                                                     join d in rms.server_ratesheet_map.ToList() on c.ServerRatesheetID equals d.ID
                                                     where c.ServerRatesheetID > 0 & c.Active == "1" &
                                                           d.RatesheetID == vendratesheetid
                                                     select a;

                                UpdateError("CompanyDetails Completed", "RatesheetID" + Emailstatus.RatesheetId, "RatesheetEmail.txt", "Regioncode count completed; CompanyDetails" + companydetails, false);

                                if (companydetails != null)
                                {

                                    //UpdateError("Ratesheet Email Replace Method Started companydetails.. Method Name :Replace ", "Ratesheet Id & Name: " + Emailstatus.RatesheetName + "," + Emailstatus.RatesheetId, "RatesheetEmail.txt", " ClientName:" + companydetails.FirstOrDefault().Name, false);

                                    string CompanyName = companydetails.FirstOrDefault().Name;
                                    RatesheetEmail ss = new RatesheetEmail();
                                    Int32 companyid = companydetails.FirstOrDefault().ID;
                                    var Email = rms.sales_info.Where(t => t.sales_companyID == companyid).FirstOrDefault();
                                    ss.EmailRatesheet(NewResponseList, CompanyName, Email.Email);
                                    Emailstatus.Sendstatus = "Complete";
                                    rms.SaveChanges();
                                }
                                else
                                {
                                    UpdateError("Ratesheet Email companydetailsvend beofre company.. Vendor " + NewResponseList.Count, "Ratelistdata, Ratelistdatacount: completed", "RatesheetEmail.txt", "Regioncode count completed", false);

                                    Int32 vendratesheetidid = Convert.ToInt32(Emailstatus.RatesheetId);


                                    try
                                    {
                                        var companydetailsvend = from a in rms.sales_company.ToList()
                                                                 join b in rms.ngt_vendor.ToList() on a.Name.Trim() equals b.Webaddress.Trim()
                                                                 join c in rms.nexge_vendor_map.ToList() on b.Id equals c.ngt_vendorId
                                                                 join d in rms.server_ratesheet_map.ToList() on c.ServerRatesheetID equals d.ID
                                                                 where c.ServerRatesheetID > 0 & c.Active == "1" &
                                                                       d.RatesheetID == vendratesheetidid
                                                                 select a;
                                        UpdateError("Ratesheet Email Send beofre company.. Vendor companydetailsvend " + NewResponseList.Count, "", "RatesheetEmail.txt", "companydetailsvend" + companydetailsvend, false);

                                        if (companydetailsvend != null)
                                        {

                                            //UpdateError("Ratesheet Email Send Method Started.. Method Name :Replace ", "Ratesheet Id & Name: " + Emailstatus.RatesheetName + "," + Emailstatus.RatesheetId, "RatesheetEmail.txt", " Vendor:" + companydetailsvend.FirstOrDefault().Name, false);


                                            string CompanyName = companydetails.FirstOrDefault().Name;
                                            RatesheetEmail ss = new RatesheetEmail();
                                            Int32 companyid = companydetails.FirstOrDefault().ID;
                                            var Email = rms.sales_info.Where(t => t.sales_companyID == companyid).FirstOrDefault();
                                            ss.EmailRatesheet(NewResponseList, CompanyName, Email.Email);
                                            //ss.EmailRatesheet(NewResponseList, CompanyName);
                                            Emailstatus.Sendstatus = "Complete";
                                            rms.SaveChanges();
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        UpdateError("Ratesheet Email Send beofre company.. Vendor companydetailsvend Error " + NewResponseList.Count, "", "RatesheetEmail.txt", "Error: " + ex.Message, false);
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                //RatesheetEmail
                                UpdateError("Ratesheet Email Send Method Error Replace ", "Error= " + ex.Message, "RatesheetEmail.txt", "", false);
                            }

                        }
                    }
                }
            }
            return res;
        }

        public void EmailsendStatusUpdate(string status, string ratesheetname, string ratesheetid, string jobqueueid, string requestid, string ServerNameCSV, string requesttype)
        {
            MySqlConnection con = new MySqlConnection(ConfigurationManager.ConnectionStrings["rmsconn"].ToString());

            try
            {
                string query = "insert into ratesheetemailsendstatus(Sendstatus,Ratesheetname,Requestid,RatesheetId,JobqueueId,ServernameCSV,Requesttype) value(@status,@Ratesheetname,@Requestid,@RatesheetId,@JobqueuId,@ServerName,@Requesttype)";
                MySqlCommand command = new MySqlCommand(query, con);
                command.Parameters.AddWithValue("@status", status);
                command.Parameters.AddWithValue("@Ratesheetname", ratesheetname);
                command.Parameters.AddWithValue("@Requestid", requestid);
                command.Parameters.AddWithValue("@RatesheetId", ratesheetid);
                command.Parameters.AddWithValue("@ServerName", ServerNameCSV);
                command.Parameters.AddWithValue("@JobqueuId", jobqueueid);
                command.Parameters.AddWithValue("@Requesttype", requesttype);
                con.Open();
                command.ExecuteNonQuery();
                con.Close();
            }
            catch (Exception ex)
            {
                if (con.State == ConnectionState.Open)
                    con.Close();
            }
        }

        public void ServerPushStatusUpdate(string status, string ratesheetname, string ratesheetid, string requesttype, string serverratesheetname, string servername, string jobqueueid, string requestid)
        {
            MySqlConnection con = new MySqlConnection(ConfigurationManager.ConnectionStrings["rmsconn"].ToString());

            try
            {
                string query = "insert into serverpushstatus(Status,Ratesheetname,Requestid,Serverratesheetname,Requesttype,RatesheetId,ServerName,JobqueuId) value(@status,@Ratesheetname,@Requestid,@Serverratesheetname,@Requesttype,@RatesheetId,@ServerName,@JobqueuId)";
                MySqlCommand command = new MySqlCommand(query, con);
                command.Parameters.AddWithValue("@status", status);
                command.Parameters.AddWithValue("@Ratesheetname", ratesheetname);
                command.Parameters.AddWithValue("@Requestid", requestid);
                command.Parameters.AddWithValue("@Serverratesheetname", serverratesheetname);
                command.Parameters.AddWithValue("@Requesttype", requesttype);
                command.Parameters.AddWithValue("@RatesheetId", ratesheetid);
                command.Parameters.AddWithValue("@ServerName", servername);
                command.Parameters.AddWithValue("@JobqueuId", jobqueueid);

                con.Open();
                command.ExecuteNonQuery();
                con.Close();


            }
            catch
            {
                if (con.State == ConnectionState.Open)
                    con.Close();
            }
        }

        public ShowRecords ShowsRates(int RatesheetID, string Type, string value, string regionCode, int partitionID)
        {
            try
            {
                List<ngt_rates> Ratelist = new List<ngt_rates>();
                List<ngt_rates> RatelistDelete = new List<ngt_rates>();
                List<ngt_rateslist> Ratelist1 = new List<ngt_rateslist>();
                List<ngt_rateslist> Ratelist2 = new List<ngt_rateslist>();
                using (rmsEntities rms = new rmsEntities())
                {
                    if (Type == "effectiveon")
                    {
                        if (value == "")
                        {


                            if (regionCode == "")
                            {
                                // Existing

                                // //  Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();
                                UpdateError("ShowRates With EffectiveOn Function Started-1.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                                //pasupathi added 27/06/2016
                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active != "D" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();


                                RatelistDelete = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active == "D" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();

                                UpdateError("ShowRates With EffectiveOn Function End-1.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);

                            }
                            else
                            {
                                UpdateError("ShowRates With EffectiveOn Function Started-2.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);

                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_PartitionId == partitionID && e.ngt_region_code.Country_code == regionCode).OrderBy(e => e.ngt_region_codeId).ToList();

                                RatelistDelete = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active == "D" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();
                                UpdateError("ShowRates With EffectiveOn Function End-2.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);

                            }


                        }
                        else
                        {
                            DateTime effectiveon = Convert.ToDateTime(value);
                            if (regionCode == "")
                            {
                                //Old Query
                                //string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";
                                //New query 17-04-2015
                                //shripal string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";

                                UpdateError("ShowRates With EffectiveOn Function Started-3.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);

                                string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";
                                List<ratesresult> a = new List<ratesresult>();

                                a = rms.Database.SqlQuery<ratesresult>(ab).ToList();

                                foreach (var rate in a)
                                {
                                    if (rate.Active == "D")
                                    {
                                        if (rate.Effective_on.Date == effectiveon.Date)
                                        {
                                            Ratelist1.Add(new ngt_rateslist()
                                            {
                                                Id = rate.Id,
                                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                                Call_rate = rate.Call_rate,
                                                Grace_period = rate.Grace_period,
                                                Minimal_time = rate.Minimal_time,
                                                Resolution = rate.Resolution,
                                                ngt_region_codeId = rate.ngt_region_codeId,
                                                //shripal ngt_regionName = rate.Country_code,
                                                ngt_regionName = rate.Region_hash_code,
                                                Description = rate.description,
                                                Connection_charge = rate.Connection_charge,
                                                Active = rate.Active,
                                                Priority = rate.Priority,
                                                Trunck = rate.Trunck,
                                                BatchID = rate.BatchID,
                                                CreatedOn = rate.CreatedOn,
                                                StartPulse = rate.Start_Pulse,
                                                NextPulse = rate.Next_Pulse
                                            });
                                        }
                                    }
                                    else
                                    {
                                        Ratelist1.Add(new ngt_rateslist()
                                        {
                                            Id = rate.Id,
                                            Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                            Call_rate = rate.Call_rate,
                                            Grace_period = rate.Grace_period,
                                            Minimal_time = rate.Minimal_time,
                                            Resolution = rate.Resolution,
                                            ngt_region_codeId = rate.ngt_region_codeId,
                                            //shripal  ngt_regionName = rate.Country_code,
                                            ngt_regionName = rate.Region_hash_code,
                                            Description = rate.description,
                                            Connection_charge = rate.Connection_charge,
                                            Active = rate.Active,
                                            Priority = rate.Priority,
                                            Trunck = rate.Trunck,
                                            BatchID = rate.BatchID,
                                            CreatedOn = rate.CreatedOn,
                                            StartPulse = rate.Start_Pulse,
                                            NextPulse = rate.Next_Pulse
                                        });
                                    }
                                }
                                UpdateError("ShowRates With EffectiveOn Function End-3.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                            }
                            else
                            {
                                //shripal   string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and Country_code like '" + regionCode + "%' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";

                                UpdateError("ShowRates With EffectiveOn Function Started-4.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);

                                string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and Country_code like '" + regionCode + "%' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";
                                List<ratesresult> a = new List<ratesresult>();

                                a = rms.Database.SqlQuery<ratesresult>(ab).ToList();

                                foreach (var rate in a)
                                {
                                    if (rate.Active == "D")
                                    {
                                        if (rate.Effective_on.Date == effectiveon.Date)
                                        {
                                            Ratelist1.Add(new ngt_rateslist()
                                            {
                                                Id = rate.Id,
                                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                                Call_rate = rate.Call_rate,
                                                Grace_period = rate.Grace_period,
                                                Minimal_time = rate.Minimal_time,
                                                Resolution = rate.Resolution,
                                                ngt_region_codeId = rate.ngt_region_codeId,
                                                //shripal ngt_regionName = rate.Country_code,
                                                ngt_regionName = rate.Region_hash_code,
                                                Description = rate.description,
                                                Connection_charge = rate.Connection_charge,
                                                Active = rate.Active,
                                                Priority = rate.Priority,
                                                Trunck = rate.Trunck,
                                                BatchID = rate.BatchID,
                                                CreatedOn = rate.CreatedOn,
                                                StartPulse = rate.Start_Pulse,
                                                NextPulse = rate.Next_Pulse
                                            });
                                        }
                                    }
                                    else
                                    {
                                        Ratelist1.Add(new ngt_rateslist()
                                        {
                                            Id = rate.Id,
                                            Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                            Call_rate = rate.Call_rate,
                                            Grace_period = rate.Grace_period,
                                            Minimal_time = rate.Minimal_time,
                                            Resolution = rate.Resolution,
                                            ngt_region_codeId = rate.ngt_region_codeId,
                                            //shripal  ngt_regionName = rate.Country_code,
                                            ngt_regionName = rate.Region_hash_code,
                                            Description = rate.description,
                                            Connection_charge = rate.Connection_charge,
                                            Active = rate.Active,
                                            Priority = rate.Priority,
                                            Trunck = rate.Trunck,
                                            BatchID = rate.BatchID,
                                            CreatedOn = rate.CreatedOn,
                                            StartPulse = rate.Start_Pulse,
                                            NextPulse = rate.Next_Pulse
                                        });
                                    }
                                }
                                UpdateError("ShowRates With EffectiveOn Function End-4.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                            }
                        }
                        UpdateError("ShowRates With EffectiveOn Function Started-5.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                        foreach (var rate in Ratelist)
                        {

                            Ratelist1.Add(new ngt_rateslist()
                            {
                                Id = rate.Id,
                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                Call_rate = rate.Call_rate,
                                Grace_period = rate.Grace_period,
                                Minimal_time = rate.Minimal_time,
                                Resolution = rate.Resolution,
                                ngt_region_codeId = rate.ngt_region_codeId,
                                //shripal  ngt_regionName = rate.ngt_region_code.Country_code,
                                ngt_regionName = rate.ngt_region_code.Region_hash_code,

                                Description = rate.ngt_region_code.description,
                                Connection_charge = rate.Connection_charge,
                                Active = rate.Active,
                                Priority = rate.Priority,
                                Trunck = rate.Trunck,
                                BatchID = rate.BatchID,
                                CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.CreatedOn),
                                StartPulse = rate.Start_Pulse.ToString(),
                                NextPulse = rate.Next_Pulse.ToString()
                            });

                        }
                        UpdateError("ShowRates With EffectiveOn Function End-5.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                        //pasupathi added 27/06/2016
                        if (value == "")
                        {
                            UpdateError("ShowRates With EffectiveOn Function Started-6.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                            foreach (var rate in RatelistDelete)
                            {
                                Ratelist2.Add(new ngt_rateslist()
                                {
                                    Id = rate.Id,
                                    Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                    Call_rate = rate.Call_rate,
                                    Grace_period = rate.Grace_period,
                                    Minimal_time = rate.Minimal_time,
                                    Resolution = rate.Resolution,
                                    ngt_region_codeId = rate.ngt_region_codeId,
                                    //shripal ngt_regionName = rate.ngt_region_code.Country_code,
                                    ngt_regionName = rate.ngt_region_code.Region_hash_code,
                                    Description = rate.ngt_region_code.description,
                                    Connection_charge = rate.Connection_charge,
                                    Active = rate.Active,
                                    Priority = rate.Priority,
                                    Trunck = rate.Trunck,
                                    BatchID = rate.BatchID,
                                    CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.CreatedOn),
                                    StartPulse = rate.Start_Pulse.ToString(),
                                    NextPulse = rate.Next_Pulse.ToString(),
                                    EndDate = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.EndDate == null ? Convert.ToDateTime(DateTime.Now) : rate.EndDate)
                                });
                            }
                            UpdateError("ShowRates With EffectiveOn Function End-6.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                        }
                        UpdateError("ShowRates function call RatesheetID=" + RatesheetID + " Type=" + Type, "Total Record=" + Ratelist1.Count + ", regionCode=" + regionCode, "RatesheetLogs.txt", "", false);
                        //return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, recordsdelete = Ratelist2, totalrecords = Ratelist1.Count, totalrecordsdelete = Ratelist2.Count, message = "Records Fetched" });
                        return new ShowRecords() { status = "true", records = Ratelist1, recordsdelete = Ratelist2, totalrecords = Ratelist1.Count, totalrecordsdelete = Ratelist2.Count, message = "Records Fetched" };
                    }
                    else if (Type == "Batch")
                    {
                        if (value == "")
                        {
                            if (regionCode == "")
                            {
                                UpdateError("ShowRates With Batch Function Started-1.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                                // Old
                                // Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_PartitionId == partitionID && e.BatchID == rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();

                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active != "D" && e.ngt_PartitionId == partitionID && e.BatchID == rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();

                                // Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active != "D" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();
                                // RatelistDelete = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active == "D" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();
                                RatelistDelete = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active == "D" && e.ngt_PartitionId == partitionID && e.BatchID == rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();


                                UpdateError("ShowRates With Delete Function ", Ratelist.Count().ToString(), "RatesheetLogs.txt", RatelistDelete.Count().ToString(), false);
                            }
                            else
                            {
                                UpdateError("ShowRates With Batch Function Started-2.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                                // Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_PartitionId == partitionID && e.ngt_region_code.Country_code.Contains(regionCode) && e.BatchID == rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();


                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active != "D" && e.ngt_PartitionId == partitionID && e.ngt_region_code.Country_code.Contains(regionCode) && e.BatchID == rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();

                                // Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active != "D" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();                           
                                // RatelistDelete = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active == "D" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();
                                RatelistDelete = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active == "D" && e.ngt_PartitionId == partitionID && e.ngt_region_code.Country_code.Contains(regionCode) && e.BatchID == rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();

                                UpdateError("ShowRates With Delete Function ", Ratelist.Count().ToString(), "RatesheetLogs.txt", RatelistDelete.Count().ToString(), false);
                            }

                        }
                        else
                        {
                            UpdateError("ShowRates With Batch Function Started-3.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);

                            int Batch = Convert.ToInt32(value);
                            if (regionCode == "")
                            {
                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_PartitionId == partitionID && e.BatchID == Batch).ToList();
                                UpdateError("ShowRates With Delete Function with Region Code Empty ", Ratelist.Count().ToString(), "RatesheetLogs.txt", "", false);
                            }
                            else
                            {
                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_PartitionId == partitionID && e.ngt_region_code.Country_code.Contains(regionCode) && e.BatchID == Batch).ToList();
                                UpdateError("ShowRates With Delete Function with Region Code Empty - 1 ", Ratelist.Count().ToString(), "RatesheetLogs.txt", "", false);
                            }

                        }
                        UpdateError("ShowRates With Batch Function Started-4.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                        foreach (var rate in Ratelist)
                        {
                            Ratelist1.Add(new ngt_rateslist()
                            {
                                Id = rate.Id,
                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                Call_rate = rate.Call_rate,
                                Grace_period = rate.Grace_period,
                                Minimal_time = rate.Minimal_time,
                                Resolution = rate.Resolution,
                                ngt_region_codeId = rate.ngt_region_codeId,
                                //shripal ngt_regionName = rate.ngt_region_code.Country_code,
                                ngt_regionName = rate.ngt_region_code.Region_hash_code,
                                Description = rate.ngt_region_code.description,
                                Connection_charge = rate.Connection_charge,
                                Active = rate.Active,
                                Priority = rate.Priority,
                                Trunck = rate.Trunck,
                                BatchID = rate.BatchID,
                                CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.CreatedOn),
                                StartPulse = rate.Start_Pulse.ToString(),
                                NextPulse = rate.Next_Pulse.ToString()
                            });
                        }
                        UpdateError("ShowRates With Batch Function End-4.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                        if (value == "")
                        {
                            UpdateError("ShowRates With Batch Function Started-5.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                            foreach (var rate in RatelistDelete)
                            {
                                Ratelist2.Add(new ngt_rateslist()
                                {
                                    Id = rate.Id,
                                    Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                    Call_rate = rate.Call_rate,
                                    Grace_period = rate.Grace_period,
                                    Minimal_time = rate.Minimal_time,
                                    Resolution = rate.Resolution,
                                    ngt_region_codeId = rate.ngt_region_codeId,
                                    //shripal ngt_regionName = rate.ngt_region_code.Country_code,
                                    ngt_regionName = rate.ngt_region_code.Region_hash_code,
                                    Description = rate.ngt_region_code.description,
                                    Connection_charge = rate.Connection_charge,
                                    Active = rate.Active,
                                    Priority = rate.Priority,
                                    Trunck = rate.Trunck,
                                    BatchID = rate.BatchID,
                                    CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.CreatedOn),
                                    StartPulse = rate.Start_Pulse.ToString(),
                                    NextPulse = rate.Next_Pulse.ToString(),
                                    EndDate = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.EndDate == null ? Convert.ToDateTime(DateTime.Now) : rate.EndDate)
                                });
                            }
                            UpdateError("ShowRates With Batch Function End-5.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                        }
                        UpdateError("ShowRates function call RatesheetID - 1 =" + RatesheetID + " Type=" + Type, "Total Record=" + Ratelist1.Count + " ," + "Total Delete Record=" + Ratelist2.Count, "RatesheetLogs.txt", "", false);
                        //return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, recordsdelete = Ratelist2, totalrecords = Ratelist1.Count, totalrecordsdelete = Ratelist2.Count, message = "Records Fetched" });

                        return new ShowRecords() { status = "true", records = Ratelist1, recordsdelete = Ratelist2, totalrecords = Ratelist1.Count, totalrecordsdelete = Ratelist2.Count, message = "Records Fetched" };

                    }
                    else
                    {
                        UpdateError("ShowRates function call RatesheetID - 2 =" + RatesheetID + " Type=" + Type, "Total Record=" + Ratelist1.Count + " ," + "Total Delete Record=" + Ratelist2.Count, "RatesheetLogs.txt", "", false);
                        //return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, recordsdelete = Ratelist2, totalrecords = Ratelist1.Count, totalrecordsdelete = Ratelist2.Count, message = "Records Fetched" });
                        return new ShowRecords() { status = "true", records = Ratelist1, recordsdelete = Ratelist2, totalrecords = Ratelist1.Count, totalrecordsdelete = Ratelist2.Count, message = "Records Fetched" };
                    }

                }
            }

            catch (Exception ex)
            {
                UpdateError("ShowsRates exception " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "ratesheet id" + RatesheetID, false);
                //return RMSCDR.SerializeAndCreateMS(new Response() { status = "false", Message = ex.Message });
                return new ShowRecords() { status = "false", message = ex.Message };
            }

        }

        //by shripal


        // Pasupathi Changed
        public ShowRecords ShowsRatesNexgeNew(int RatesheetID, string Type, string value, string regionCode, int partitionID)
        {
            try
            {
                List<ngt_rates> Ratelist = new List<ngt_rates>();
                List<ngt_rates> RatelistDelete = new List<ngt_rates>();
                List<ngt_rateslist> Ratelist1 = new List<ngt_rateslist>();
                List<ngt_rateslist> Ratelist2 = new List<ngt_rateslist>();
                using (rmsEntities rms = new rmsEntities())
                {
                    if (Type == "effectiveon")
                    {
                        if (value == "")
                        {


                            if (regionCode == "")
                            {
                                // Existing

                                // //  Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();
                                UpdateError("ShowRates With EffectiveOn Function Started-1.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                                //pasupathi added 27/06/2016
                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active != "D" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();


                                RatelistDelete = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active == "D" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();

                                UpdateError("ShowRates With EffectiveOn Function End-1.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);

                            }
                            else
                            {
                                UpdateError("ShowRates With EffectiveOn Function Started-2.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);

                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_PartitionId == partitionID && e.ngt_region_code.Country_code == regionCode).OrderBy(e => e.ngt_region_codeId).ToList();

                                RatelistDelete = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active == "D" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();
                                UpdateError("ShowRates With EffectiveOn Function End-2.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);

                            }


                        }
                        else
                        {
                            DateTime effectiveon = Convert.ToDateTime(value);
                            if (regionCode == "")
                            {
                                //Old Query
                                //string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";
                                //New query 17-04-2015
                                //shripal string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";

                                UpdateError("ShowRates With EffectiveOn Function Started-3.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);

                                string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,ncr.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";
                                List<ratesresult> a = new List<ratesresult>();

                                a = rms.Database.SqlQuery<ratesresult>(ab).ToList();

                                foreach (var rate in a)
                                {
                                    if (rate.Active == "D")
                                    {
                                        if (rate.Effective_on.Date == effectiveon.Date)
                                        {
                                            Ratelist1.Add(new ngt_rateslist()
                                            {
                                                Id = rate.Id,
                                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                                Call_rate = rate.Call_rate,
                                                Grace_period = rate.Grace_period,
                                                Minimal_time = rate.Minimal_time,
                                                Resolution = rate.Resolution,
                                                ngt_region_codeId = rate.ngt_region_codeId,
                                                //shripal ngt_regionName = rate.Country_code,
                                                ngt_regionName = rate.Region_hash_code,
                                                Description = rate.description,
                                                Connection_charge = rate.Connection_charge,
                                                Active = rate.Active,
                                                Priority = rate.Priority,
                                                Trunck = rate.Trunck,
                                                BatchID = rate.BatchID,
                                                CreatedOn = rate.CreatedOn,
                                                StartPulse = rate.Start_Pulse,
                                                NextPulse = rate.Next_Pulse
                                            });
                                        }
                                    }
                                    else
                                    {
                                        Ratelist1.Add(new ngt_rateslist()
                                        {
                                            Id = rate.Id,
                                            Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                            Call_rate = rate.Call_rate,
                                            Grace_period = rate.Grace_period,
                                            Minimal_time = rate.Minimal_time,
                                            Resolution = rate.Resolution,
                                            ngt_region_codeId = rate.ngt_region_codeId,
                                            //shripal  ngt_regionName = rate.Country_code,
                                            ngt_regionName = rate.Region_hash_code,
                                            Description = rate.description,
                                            Connection_charge = rate.Connection_charge,
                                            Active = rate.Active,
                                            Priority = rate.Priority,
                                            Trunck = rate.Trunck,
                                            BatchID = rate.BatchID,
                                            CreatedOn = rate.CreatedOn,
                                            StartPulse = rate.Start_Pulse,
                                            NextPulse = rate.Next_Pulse
                                        });
                                    }
                                }
                                UpdateError("ShowRates With EffectiveOn Function End-3.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                            }
                            else
                            {
                                //shripal   string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and Country_code like '" + regionCode + "%' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";

                                UpdateError("ShowRates With EffectiveOn Function Started-4.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);

                                string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,ncr.description,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and Country_code like '" + regionCode + "%' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";
                                List<ratesresult> a = new List<ratesresult>();

                                a = rms.Database.SqlQuery<ratesresult>(ab).ToList();

                                foreach (var rate in a)
                                {
                                    if (rate.Active == "D")
                                    {
                                        if (rate.Effective_on.Date == effectiveon.Date)
                                        {
                                            Ratelist1.Add(new ngt_rateslist()
                                            {
                                                Id = rate.Id,
                                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                                Call_rate = rate.Call_rate,
                                                Grace_period = rate.Grace_period,
                                                Minimal_time = rate.Minimal_time,
                                                Resolution = rate.Resolution,
                                                ngt_region_codeId = rate.ngt_region_codeId,
                                                //shripal ngt_regionName = rate.Country_code,
                                                ngt_regionName = rate.Region_hash_code,
                                                Description = rate.description,
                                                Connection_charge = rate.Connection_charge,
                                                Active = rate.Active,
                                                Priority = rate.Priority,
                                                Trunck = rate.Trunck,
                                                BatchID = rate.BatchID,
                                                CreatedOn = rate.CreatedOn,
                                                StartPulse = rate.Start_Pulse,
                                                NextPulse = rate.Next_Pulse
                                            });
                                        }
                                    }
                                    else
                                    {
                                        Ratelist1.Add(new ngt_rateslist()
                                        {
                                            Id = rate.Id,
                                            Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                            Call_rate = rate.Call_rate,
                                            Grace_period = rate.Grace_period,
                                            Minimal_time = rate.Minimal_time,
                                            Resolution = rate.Resolution,
                                            ngt_region_codeId = rate.ngt_region_codeId,
                                            //shripal  ngt_regionName = rate.Country_code,
                                            ngt_regionName = rate.Region_hash_code,
                                            Description = rate.description,
                                            Connection_charge = rate.Connection_charge,
                                            Active = rate.Active,
                                            Priority = rate.Priority,
                                            Trunck = rate.Trunck,
                                            BatchID = rate.BatchID,
                                            CreatedOn = rate.CreatedOn,
                                            StartPulse = rate.Start_Pulse,
                                            NextPulse = rate.Next_Pulse
                                        });
                                    }
                                }
                                UpdateError("ShowRates With EffectiveOn Function End-4.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                            }
                        }
                        UpdateError("ShowRates With EffectiveOn Function Started-5.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                        foreach (var rate in Ratelist)
                        {

                            Ratelist1.Add(new ngt_rateslist()
                            {
                                Id = rate.Id,
                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                Call_rate = rate.Call_rate,
                                Grace_period = rate.Grace_period,
                                Minimal_time = rate.Minimal_time,
                                Resolution = rate.Resolution,
                                ngt_region_codeId = rate.ngt_region_codeId,
                                //shripal  ngt_regionName = rate.ngt_region_code.Country_code,
                                ngt_regionName = rate.ngt_region_code.Region_hash_code,

                                // Description = rate.ngt_region_code.description,
                                Description = rate.Description,
                                Connection_charge = rate.Connection_charge,
                                Active = rate.Active,
                                Priority = rate.Priority,
                                Trunck = rate.Trunck,
                                BatchID = rate.BatchID,
                                CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.CreatedOn),
                                StartPulse = rate.Start_Pulse.ToString(),
                                NextPulse = rate.Next_Pulse.ToString()
                            });

                        }
                        UpdateError("ShowRates With EffectiveOn Function End-5.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                        //pasupathi added 27/06/2016
                        if (value == "")
                        {
                            UpdateError("ShowRates With EffectiveOn Function Started-6.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                            foreach (var rate in RatelistDelete)
                            {
                                Ratelist2.Add(new ngt_rateslist()
                                {
                                    Id = rate.Id,
                                    Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                    Call_rate = rate.Call_rate,
                                    Grace_period = rate.Grace_period,
                                    Minimal_time = rate.Minimal_time,
                                    Resolution = rate.Resolution,
                                    ngt_region_codeId = rate.ngt_region_codeId,
                                    //shripal ngt_regionName = rate.ngt_region_code.Country_code,
                                    ngt_regionName = rate.ngt_region_code.Region_hash_code,
                                    // Description = rate.ngt_region_code.description,
                                    Description = rate.Description,
                                    Connection_charge = rate.Connection_charge,
                                    Active = rate.Active,
                                    Priority = rate.Priority,
                                    Trunck = rate.Trunck,
                                    BatchID = rate.BatchID,
                                    CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.CreatedOn),
                                    StartPulse = rate.Start_Pulse.ToString(),
                                    NextPulse = rate.Next_Pulse.ToString(),
                                    EndDate = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.EndDate == null ? Convert.ToDateTime(DateTime.Now) : rate.EndDate)
                                });
                            }
                            UpdateError("ShowRates With EffectiveOn Function End-6.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                        }
                        UpdateError("ShowRates function call RatesheetID=" + RatesheetID + " Type=" + Type, "Total Record=" + Ratelist1.Count + ", regionCode=" + regionCode, "RatesheetLogs.txt", "", false);
                        //return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, recordsdelete = Ratelist2, totalrecords = Ratelist1.Count, totalrecordsdelete = Ratelist2.Count, message = "Records Fetched" });
                        return new ShowRecords() { status = "true", records = Ratelist1, recordsdelete = Ratelist2, totalrecords = Ratelist1.Count, totalrecordsdelete = Ratelist2.Count, message = "Records Fetched" };
                    }
                    else if (Type == "Batch")
                    {
                        if (value == "")
                        {
                            if (regionCode == "")
                            {
                                UpdateError("ShowRates With Batch Function Started-1.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                                // Old
                                // Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_PartitionId == partitionID && e.BatchID == rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();

                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active != "D" && e.ngt_PartitionId == partitionID && e.BatchID == rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();

                                // Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active != "D" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();
                                // RatelistDelete = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active == "D" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();
                                RatelistDelete = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active == "D" && e.ngt_PartitionId == partitionID && e.BatchID == rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();


                                UpdateError("ShowRates With Delete Function ", Ratelist.Count().ToString(), "RatesheetLogs.txt", RatelistDelete.Count().ToString(), false);
                            }
                            else
                            {
                                UpdateError("ShowRates With Batch Function Started-2.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                                // Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_PartitionId == partitionID && e.ngt_region_code.Country_code.Contains(regionCode) && e.BatchID == rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();


                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active != "D" && e.ngt_PartitionId == partitionID && e.ngt_region_code.Country_code.Contains(regionCode) && e.BatchID == rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();

                                // Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active != "D" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();                           
                                // RatelistDelete = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active == "D" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();
                                RatelistDelete = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active == "D" && e.ngt_PartitionId == partitionID && e.ngt_region_code.Country_code.Contains(regionCode) && e.BatchID == rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();

                                UpdateError("ShowRates With Delete Function ", Ratelist.Count().ToString(), "RatesheetLogs.txt", RatelistDelete.Count().ToString(), false);
                            }

                        }
                        else
                        {
                            UpdateError("ShowRates With Batch Function Started-3.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);

                            int Batch = Convert.ToInt32(value);
                            if (regionCode == "")
                            {
                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_PartitionId == partitionID && e.BatchID == Batch).ToList();
                                UpdateError("ShowRates With Delete Function with Region Code Empty ", Ratelist.Count().ToString(), "RatesheetLogs.txt", "", false);
                            }
                            else
                            {
                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_PartitionId == partitionID && e.ngt_region_code.Country_code.Contains(regionCode) && e.BatchID == Batch).ToList();
                                UpdateError("ShowRates With Delete Function with Region Code Empty - 1 ", Ratelist.Count().ToString(), "RatesheetLogs.txt", "", false);
                            }

                        }
                        UpdateError("ShowRates With Batch Function Started-4.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                        foreach (var rate in Ratelist)
                        {
                            Ratelist1.Add(new ngt_rateslist()
                            {
                                Id = rate.Id,
                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                Call_rate = rate.Call_rate,
                                Grace_period = rate.Grace_period,
                                Minimal_time = rate.Minimal_time,
                                Resolution = rate.Resolution,
                                ngt_region_codeId = rate.ngt_region_codeId,
                                //shripal ngt_regionName = rate.ngt_region_code.Country_code,
                                ngt_regionName = rate.ngt_region_code.Region_hash_code,
                                // Description = rate.ngt_region_code.description,
                                Description = rate.Description,
                                Connection_charge = rate.Connection_charge,
                                Active = rate.Active,
                                Priority = rate.Priority,
                                Trunck = rate.Trunck,
                                BatchID = rate.BatchID,
                                CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.CreatedOn),
                                StartPulse = rate.Start_Pulse.ToString(),
                                NextPulse = rate.Next_Pulse.ToString()
                            });
                        }
                        UpdateError("ShowRates With Batch Function End-4.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                        if (value == "")
                        {
                            UpdateError("ShowRates With Batch Function Started-5.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                            foreach (var rate in RatelistDelete)
                            {
                                Ratelist2.Add(new ngt_rateslist()
                                {
                                    Id = rate.Id,
                                    Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                    Call_rate = rate.Call_rate,
                                    Grace_period = rate.Grace_period,
                                    Minimal_time = rate.Minimal_time,
                                    Resolution = rate.Resolution,
                                    ngt_region_codeId = rate.ngt_region_codeId,
                                    //shripal ngt_regionName = rate.ngt_region_code.Country_code,
                                    ngt_regionName = rate.ngt_region_code.Region_hash_code,
                                    // Description = rate.ngt_region_code.description,
                                    Description = rate.Description,
                                    Connection_charge = rate.Connection_charge,
                                    Active = rate.Active,
                                    Priority = rate.Priority,
                                    Trunck = rate.Trunck,
                                    BatchID = rate.BatchID,
                                    CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.CreatedOn),
                                    StartPulse = rate.Start_Pulse.ToString(),
                                    NextPulse = rate.Next_Pulse.ToString(),
                                    EndDate = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.EndDate == null ? Convert.ToDateTime(DateTime.Now) : rate.EndDate)
                                });
                            }
                            UpdateError("ShowRates With Batch Function End-5.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                        }
                        UpdateError("ShowRates function call RatesheetID - 1 =" + RatesheetID + " Type=" + Type, "Total Record=" + Ratelist1.Count + " ," + "Total Delete Record=" + Ratelist2.Count, "RatesheetLogs.txt", "", false);
                        //return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, recordsdelete = Ratelist2, totalrecords = Ratelist1.Count, totalrecordsdelete = Ratelist2.Count, message = "Records Fetched" });

                        return new ShowRecords() { status = "true", records = Ratelist1, recordsdelete = Ratelist2, totalrecords = Ratelist1.Count, totalrecordsdelete = Ratelist2.Count, message = "Records Fetched" };

                    }
                    else
                    {
                        UpdateError("ShowRates function call RatesheetID - 2 =" + RatesheetID + " Type=" + Type, "Total Record=" + Ratelist1.Count + " ," + "Total Delete Record=" + Ratelist2.Count, "RatesheetLogs.txt", "", false);
                        //return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, recordsdelete = Ratelist2, totalrecords = Ratelist1.Count, totalrecordsdelete = Ratelist2.Count, message = "Records Fetched" });
                        return new ShowRecords() { status = "true", records = Ratelist1, recordsdelete = Ratelist2, totalrecords = Ratelist1.Count, totalrecordsdelete = Ratelist2.Count, message = "Records Fetched" };
                    }

                }
            }

            catch (Exception ex)
            {
                UpdateError("ShowsRates exception " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "ratesheet id" + RatesheetID, false);
                //return RMSCDR.SerializeAndCreateMS(new Response() { status = "false", Message = ex.Message });
                return new ShowRecords() { status = "false", message = ex.Message };
            }

        }

        public ShowRecords ShowsRatesNewNexge(int RatesheetID, string Type, string value, string regionCode, int partitionID)
        {
            try
            {
                List<ngt_rates> Ratelist = new List<ngt_rates>();
                List<ngt_rates> RatelistDelete = new List<ngt_rates>();
                List<ngt_rateslist> Ratelist1 = new List<ngt_rateslist>();
                List<ngt_rateslist> Ratelist2 = new List<ngt_rateslist>();
                using (rmsEntities rms = new rmsEntities())
                {
                    if (Type == "effectiveon")
                    {
                        if (value == "")
                        {


                            if (regionCode == "")
                            {
                                // Existing

                                // //  Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();
                                UpdateError("ShowRates With EffectiveOn Function Started-1.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                                //pasupathi added 27/06/2016

                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active != "D" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();


                                RatelistDelete = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active == "D" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();

                                UpdateError("ShowRates With EffectiveOn Function End-1.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);

                            }
                            else
                            {
                                UpdateError("ShowRates With EffectiveOn Function Started-2.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);

                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_PartitionId == partitionID && e.ngt_region_code.Country_code == regionCode).OrderBy(e => e.ngt_region_codeId).ToList();

                                RatelistDelete = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active == "D" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();
                                UpdateError("ShowRates With EffectiveOn Function End-2.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);

                            }


                        }
                        else
                        {
                            DateTime effectiveon = Convert.ToDateTime(value);
                            if (regionCode == "")
                            {
                                //Old Query
                                //string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";
                                //New query 17-04-2015
                                //shripal string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";

                                UpdateError("ShowRates With EffectiveOn Function Started-3.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);

                                //// Old code commented by pasupathi 20/02/2017 for new nexge ngt_rates regioncode,name implementation

                                //string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";

                                // New code implemented by pasupathi 20/02/2017

                                string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,ncr.RegionName as description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";

                                List<ratesresult> a = new List<ratesresult>();

                                a = rms.Database.SqlQuery<ratesresult>(ab).ToList();

                                foreach (var rate in a)
                                {
                                    if (rate.Active == "D")
                                    {
                                        if (rate.Effective_on.Date == effectiveon.Date)
                                        {
                                            Ratelist1.Add(new ngt_rateslist()
                                            {
                                                Id = rate.Id,
                                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                                Call_rate = rate.Call_rate,
                                                Grace_period = rate.Grace_period,
                                                Minimal_time = rate.Minimal_time,
                                                Resolution = rate.Resolution,
                                                ngt_region_codeId = rate.ngt_region_codeId,
                                                //shripal ngt_regionName = rate.Country_code,
                                                ngt_regionName = rate.Region_hash_code,
                                                Description = rate.description,
                                                Connection_charge = rate.Connection_charge,
                                                Active = rate.Active,
                                                Priority = rate.Priority,
                                                Trunck = rate.Trunck,
                                                BatchID = rate.BatchID,
                                                CreatedOn = rate.CreatedOn,
                                                StartPulse = rate.Start_Pulse,
                                                NextPulse = rate.Next_Pulse
                                            });
                                        }
                                    }
                                    else
                                    {
                                        Ratelist1.Add(new ngt_rateslist()
                                        {
                                            Id = rate.Id,
                                            Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                            Call_rate = rate.Call_rate,
                                            Grace_period = rate.Grace_period,
                                            Minimal_time = rate.Minimal_time,
                                            Resolution = rate.Resolution,
                                            ngt_region_codeId = rate.ngt_region_codeId,
                                            //shripal  ngt_regionName = rate.Country_code,
                                            ngt_regionName = rate.Region_hash_code,
                                            Description = rate.description,
                                            Connection_charge = rate.Connection_charge,
                                            Active = rate.Active,
                                            Priority = rate.Priority,
                                            Trunck = rate.Trunck,
                                            BatchID = rate.BatchID,
                                            CreatedOn = rate.CreatedOn,
                                            StartPulse = rate.Start_Pulse,
                                            NextPulse = rate.Next_Pulse
                                        });
                                    }
                                }
                                UpdateError("ShowRates With EffectiveOn Function End-3.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                            }
                            else
                            {
                                //shripal   string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and Country_code like '" + regionCode + "%' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";

                                UpdateError("ShowRates With EffectiveOn Function Started-4.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);


                                //// Old code commented by pasupathi 20/02/2017 for new nexge ngt_rates regioncode,name implementation

                                //string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and Country_code like '" + regionCode + "%' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";

                                //// New code implemented by pasupathi 

                                string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,ncr.RegionName as description,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and Country_code like '" + regionCode + "%' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";

                                List<ratesresult> a = new List<ratesresult>();

                                a = rms.Database.SqlQuery<ratesresult>(ab).ToList();

                                foreach (var rate in a)
                                {
                                    if (rate.Active == "D")
                                    {
                                        if (rate.Effective_on.Date == effectiveon.Date)
                                        {
                                            Ratelist1.Add(new ngt_rateslist()
                                            {
                                                Id = rate.Id,
                                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                                Call_rate = rate.Call_rate,
                                                Grace_period = rate.Grace_period,
                                                Minimal_time = rate.Minimal_time,
                                                Resolution = rate.Resolution,
                                                ngt_region_codeId = rate.ngt_region_codeId,
                                                //shripal ngt_regionName = rate.Country_code,
                                                ngt_regionName = rate.Region_hash_code,
                                                Description = rate.description,
                                                Connection_charge = rate.Connection_charge,
                                                Active = rate.Active,
                                                Priority = rate.Priority,
                                                Trunck = rate.Trunck,
                                                BatchID = rate.BatchID,
                                                CreatedOn = rate.CreatedOn,
                                                StartPulse = rate.Start_Pulse,
                                                NextPulse = rate.Next_Pulse
                                            });
                                        }
                                    }
                                    else
                                    {
                                        Ratelist1.Add(new ngt_rateslist()
                                        {
                                            Id = rate.Id,
                                            Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                            Call_rate = rate.Call_rate,
                                            Grace_period = rate.Grace_period,
                                            Minimal_time = rate.Minimal_time,
                                            Resolution = rate.Resolution,
                                            ngt_region_codeId = rate.ngt_region_codeId,
                                            //shripal  ngt_regionName = rate.Country_code,
                                            ngt_regionName = rate.Region_hash_code,
                                            Description = rate.description,
                                            Connection_charge = rate.Connection_charge,
                                            Active = rate.Active,
                                            Priority = rate.Priority,
                                            Trunck = rate.Trunck,
                                            BatchID = rate.BatchID,
                                            CreatedOn = rate.CreatedOn,
                                            StartPulse = rate.Start_Pulse,
                                            NextPulse = rate.Next_Pulse
                                        });
                                    }
                                }
                                UpdateError("ShowRates With EffectiveOn Function End-4.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                            }
                        }
                        UpdateError("ShowRates With EffectiveOn Function Started-5.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                        foreach (var rate in Ratelist)
                        {

                            Ratelist1.Add(new ngt_rateslist()
                            {
                                Id = rate.Id,
                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                Call_rate = rate.Call_rate,
                                Grace_period = rate.Grace_period,
                                Minimal_time = rate.Minimal_time,
                                Resolution = rate.Resolution,
                                ngt_region_codeId = rate.ngt_region_codeId,
                                //shripal  ngt_regionName = rate.ngt_region_code.Country_code,
                                ngt_regionName = rate.ngt_region_code.Region_hash_code,
                                // Description = rate.ngt_region_code.description,
                                Description = rate.RegionName,
                                Connection_charge = rate.Connection_charge,
                                Active = rate.Active,
                                Priority = rate.Priority,
                                Trunck = rate.Trunck,
                                BatchID = rate.BatchID,
                                CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.CreatedOn),
                                StartPulse = rate.Start_Pulse.ToString(),
                                NextPulse = rate.Next_Pulse.ToString()
                            });

                        }
                        UpdateError("ShowRates With EffectiveOn Function End-5.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                        //pasupathi added 27/06/2016
                        if (value == "")
                        {
                            UpdateError("ShowRates With EffectiveOn Function Started-6.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                            foreach (var rate in RatelistDelete)
                            {
                                Ratelist2.Add(new ngt_rateslist()
                                {
                                    Id = rate.Id,
                                    Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                    Call_rate = rate.Call_rate,
                                    Grace_period = rate.Grace_period,
                                    Minimal_time = rate.Minimal_time,
                                    Resolution = rate.Resolution,
                                    ngt_region_codeId = rate.ngt_region_codeId,
                                    //shripal ngt_regionName = rate.ngt_region_code.Country_code,
                                    ngt_regionName = rate.ngt_region_code.Region_hash_code,
                                    // Description = rate.ngt_region_code.description,
                                    Description = rate.RegionName,
                                    Connection_charge = rate.Connection_charge,
                                    Active = rate.Active,
                                    Priority = rate.Priority,
                                    Trunck = rate.Trunck,
                                    BatchID = rate.BatchID,
                                    CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.CreatedOn),
                                    StartPulse = rate.Start_Pulse.ToString(),
                                    NextPulse = rate.Next_Pulse.ToString(),
                                    EndDate = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.EndDate == null ? Convert.ToDateTime(DateTime.Now) : rate.EndDate)
                                });
                            }
                            UpdateError("ShowRates With EffectiveOn Function End-6.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                        }
                        UpdateError("ShowRates function call RatesheetID=" + RatesheetID + " Type=" + Type, "Total Record=" + Ratelist1.Count + ", regionCode=" + regionCode, "RatesheetLogs.txt", "", false);
                        //return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, recordsdelete = Ratelist2, totalrecords = Ratelist1.Count, totalrecordsdelete = Ratelist2.Count, message = "Records Fetched" });
                        return new ShowRecords() { status = "true", records = Ratelist1, recordsdelete = Ratelist2, totalrecords = Ratelist1.Count, totalrecordsdelete = Ratelist2.Count, message = "Records Fetched" };
                    }
                    else if (Type == "Batch")
                    {
                        if (value == "")
                        {
                            if (regionCode == "")
                            {
                                UpdateError("ShowRates With Batch Function Started-1.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                                // Old
                                // Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_PartitionId == partitionID && e.BatchID == rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();

                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active != "D" && e.ngt_PartitionId == partitionID && e.BatchID == rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();

                                // Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active != "D" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();
                                // RatelistDelete = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active == "D" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();
                                RatelistDelete = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active == "D" && e.ngt_PartitionId == partitionID && e.BatchID == rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();


                                UpdateError("ShowRates With Delete Function ", Ratelist.Count().ToString(), "RatesheetLogs.txt", RatelistDelete.Count().ToString(), false);
                            }
                            else
                            {
                                UpdateError("ShowRates With Batch Function Started-2.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                                // Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_PartitionId == partitionID && e.ngt_region_code.Country_code.Contains(regionCode) && e.BatchID == rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();


                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active != "D" && e.ngt_PartitionId == partitionID && e.ngt_region_code.Country_code.Contains(regionCode) && e.BatchID == rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();

                                // Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active != "D" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();                           
                                // RatelistDelete = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active == "D" && e.ngt_PartitionId == partitionID).OrderBy(e => e.ngt_region_codeId).ToList();
                                RatelistDelete = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.Active == "D" && e.ngt_PartitionId == partitionID && e.ngt_region_code.Country_code.Contains(regionCode) && e.BatchID == rms.ngt_rates.Where(d => d.RatesheetID == RatesheetID).OrderByDescending(o => o.BatchID).FirstOrDefault().BatchID).ToList();

                                UpdateError("ShowRates With Delete Function ", Ratelist.Count().ToString(), "RatesheetLogs.txt", RatelistDelete.Count().ToString(), false);
                            }

                        }
                        else
                        {
                            UpdateError("ShowRates With Batch Function Started-3.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);

                            int Batch = Convert.ToInt32(value);
                            if (regionCode == "")
                            {
                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_PartitionId == partitionID && e.BatchID == Batch).ToList();
                                UpdateError("ShowRates With Delete Function with Region Code Empty ", Ratelist.Count().ToString(), "RatesheetLogs.txt", "", false);
                            }
                            else
                            {
                                Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_PartitionId == partitionID && e.ngt_region_code.Country_code.Contains(regionCode) && e.BatchID == Batch).ToList();
                                UpdateError("ShowRates With Delete Function with Region Code Empty - 1 ", Ratelist.Count().ToString(), "RatesheetLogs.txt", "", false);
                            }

                        }
                        UpdateError("ShowRates With Batch Function Started-4.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                        foreach (var rate in Ratelist)
                        {
                            Ratelist1.Add(new ngt_rateslist()
                            {
                                Id = rate.Id,
                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                Call_rate = rate.Call_rate,
                                Grace_period = rate.Grace_period,
                                Minimal_time = rate.Minimal_time,
                                Resolution = rate.Resolution,
                                ngt_region_codeId = rate.ngt_region_codeId,
                                //shripal ngt_regionName = rate.ngt_region_code.Country_code,
                                ngt_regionName = rate.ngt_region_code.Region_hash_code,
                                // Description = rate.ngt_region_code.description,
                                Description = rate.RegionName,
                                Connection_charge = rate.Connection_charge,
                                Active = rate.Active,
                                Priority = rate.Priority,
                                Trunck = rate.Trunck,
                                BatchID = rate.BatchID,
                                CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.CreatedOn),
                                StartPulse = rate.Start_Pulse.ToString(),
                                NextPulse = rate.Next_Pulse.ToString()
                            });
                        }
                        UpdateError("ShowRates With Batch Function End-4.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                        if (value == "")
                        {
                            UpdateError("ShowRates With Batch Function Started-5.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                            foreach (var rate in RatelistDelete)
                            {
                                Ratelist2.Add(new ngt_rateslist()
                                {
                                    Id = rate.Id,
                                    Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                    Call_rate = rate.Call_rate,
                                    Grace_period = rate.Grace_period,
                                    Minimal_time = rate.Minimal_time,
                                    Resolution = rate.Resolution,
                                    ngt_region_codeId = rate.ngt_region_codeId,
                                    //shripal ngt_regionName = rate.ngt_region_code.Country_code,
                                    ngt_regionName = rate.ngt_region_code.Region_hash_code,
                                    // Description = rate.ngt_region_code.description,
                                    Description = rate.RegionName,
                                    Connection_charge = rate.Connection_charge,
                                    Active = rate.Active,
                                    Priority = rate.Priority,
                                    Trunck = rate.Trunck,
                                    BatchID = rate.BatchID,
                                    CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.CreatedOn),
                                    StartPulse = rate.Start_Pulse.ToString(),
                                    NextPulse = rate.Next_Pulse.ToString(),
                                    EndDate = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.EndDate == null ? Convert.ToDateTime(DateTime.Now) : rate.EndDate)
                                });
                            }
                            UpdateError("ShowRates With Batch Function End-5.. ", "regionCode=" + regionCode, "RatesheetLogs.txt", "value=" + value, false);
                        }
                        UpdateError("ShowRates function call RatesheetID - 1 =" + RatesheetID + " Type=" + Type, "Total Record=" + Ratelist1.Count + " ," + "Total Delete Record=" + Ratelist2.Count, "RatesheetLogs.txt", "", false);
                        //return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, recordsdelete = Ratelist2, totalrecords = Ratelist1.Count, totalrecordsdelete = Ratelist2.Count, message = "Records Fetched" });

                        return new ShowRecords() { status = "true", records = Ratelist1, recordsdelete = Ratelist2, totalrecords = Ratelist1.Count, totalrecordsdelete = Ratelist2.Count, message = "Records Fetched" };

                    }
                    else
                    {
                        UpdateError("ShowRates function call RatesheetID - 2 =" + RatesheetID + " Type=" + Type, "Total Record=" + Ratelist1.Count + " ," + "Total Delete Record=" + Ratelist2.Count, "RatesheetLogs.txt", "", false);
                        //return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, recordsdelete = Ratelist2, totalrecords = Ratelist1.Count, totalrecordsdelete = Ratelist2.Count, message = "Records Fetched" });
                        return new ShowRecords() { status = "true", records = Ratelist1, recordsdelete = Ratelist2, totalrecords = Ratelist1.Count, totalrecordsdelete = Ratelist2.Count, message = "Records Fetched" };
                    }

                }
            }

            catch (Exception ex)
            {
                UpdateError("ShowsRates exception " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "ratesheet id" + RatesheetID, false);
                //return RMSCDR.SerializeAndCreateMS(new Response() { status = "false", Message = ex.Message });
                return new ShowRecords() { status = "false", message = ex.Message };
            }

        }

        public Stream ShowRatesNew2(int RatesheetID, string Type, string value, string regionCode)
        {
            MySqlConnection con = new MySqlConnection(ConfigurationManager.ConnectionStrings["rmsconn"].ToString());
            try
            {
                List<ngt_rates> Ratelist = new List<ngt_rates>();
                List<ngt_rateslist> Ratelist1 = new List<ngt_rateslist>();
                List<ratesresult> ratesresultList = new List<ratesresult>();

                MySqlCommand cmd = new MySqlCommand();
                // MySqlConnection con = new MySqlConnection(ConfigurationManager.AppSettings["Connstring"].ToString());

                con.Open();
                MySqlDataReader dr;


                using (rmsEntities rms = new rmsEntities())
                {

                    string cntrlQuery = "select * from ngt_rates_controller;";
                    cmd.CommandText = cntrlQuery;
                    cmd.Connection = con;
                    cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                    MySqlDataReader cntrlrdr = cmd.ExecuteReader();

                    int tableid = 1;
                    string tablename = "";
                    while (cntrlrdr.Read())
                    {
                        tableid = Convert.ToInt32(cntrlrdr["cntrl"]);
                    }
                    cntrlrdr.Close();
                    if (tableid == 1)
                    {
                        tablename = "ngt_rates_1";
                    }
                    else
                    {
                        tablename = "ngt_rates_2";
                    }

                    if (Type == "CurrentRate")
                    {
                        if (value == "")
                        {
                            string ab = "";
                            if (regionCode == "")
                            {
                                ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from " + tablename + " ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' order by nrc.country_code asc";
                                //  ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                            }
                            else
                            {
                                ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from " + tablename + " ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and nrc.Country_code like'" + regionCode + "' order by nrc.country_code asc";
                                // ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                            }

                            cmd.CommandText = ab;
                            cmd.Connection = con;
                            cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                            MySqlDataReader rdr = cmd.ExecuteReader();
                            //   List<testNewservice> testrt = new List<testNewservice>();
                            while (rdr.Read())
                            {
                                ratesresultList.Add(new ratesresult() { Id = Convert.ToInt32(rdr["Id"]), Effective_on = Convert.ToDateTime(rdr["Effective_on"].ToString()), Call_rate = Convert.ToDecimal(rdr["Call_rate"]), Grace_period = Convert.ToInt32(rdr["Grace_period"]), Minimal_time = Convert.ToInt32(rdr["Minimal_time"]), Resolution = Convert.ToInt32(rdr["Resolution"]), ngt_region_codeId = Convert.ToInt32(rdr["ngt_region_codeId"]), Country_code = Convert.ToString(rdr["Country_code"]), description = Convert.ToString(rdr["description"]), Connection_charge = Convert.ToDecimal(rdr["Connection_charge"]), Active = Convert.ToString(rdr["Active"]), Priority = Convert.ToInt32(rdr["Priority"]), Trunck = Convert.ToString(rdr["Trunck"]), BatchID = Convert.ToInt32(rdr["BatchID"]), CreatedOn = Convert.ToString(rdr["CreatedOn"]), Start_Pulse = Convert.ToString(rdr["Start_Pulse"]), Next_Pulse = Convert.ToString(rdr["Next_Pulse"]), Region_hash_code = Convert.ToString(rdr["Region_hash_code"]) });
                            }
                            rdr.Close();

                            foreach (var rate in ratesresultList)
                            {

                                Ratelist1.Add(new ngt_rateslist()
                                {
                                    Id = rate.Id,
                                    Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                    Call_rate = rate.Call_rate,
                                    Grace_period = rate.Grace_period,
                                    Minimal_time = rate.Minimal_time,
                                    Resolution = rate.Resolution,
                                    ngt_region_codeId = rate.ngt_region_codeId,
                                    ngt_regionName = rate.Region_hash_code,
                                    Description = rate.description,
                                    Connection_charge = rate.Connection_charge,
                                    Active = rate.Active,
                                    Priority = rate.Priority,
                                    Trunck = rate.Trunck,
                                    BatchID = rate.BatchID,
                                    CreatedOn = rate.CreatedOn,
                                    StartPulse = rate.Start_Pulse,
                                    NextPulse = rate.Next_Pulse
                                });

                            }
                        }



                        return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, totalrecords = Ratelist1.Count, message = "Records Fetched" });
                    }

                    else if (Type == "effectiveon")
                    {
                        if (value == "")
                        {
                            string ab = "";
                            if (regionCode == "")
                            {
                                ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' order by nrc.country_code asc";
                                //  ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                            }
                            else
                            {
                                ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and nrc.Country_code like'" + regionCode + "' order by nrc.country_code asc";
                                // ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                            }

                            cmd.CommandText = ab;
                            cmd.Connection = con;
                            cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                            MySqlDataReader rdr = cmd.ExecuteReader();
                            //   List<testNewservice> testrt = new List<testNewservice>();
                            while (rdr.Read())
                            {
                                ratesresultList.Add(new ratesresult() { Id = Convert.ToInt32(rdr["Id"]), Effective_on = Convert.ToDateTime(rdr["Effective_on"].ToString()), Call_rate = Convert.ToDecimal(rdr["Call_rate"]), Grace_period = Convert.ToInt32(rdr["Grace_period"]), Minimal_time = Convert.ToInt32(rdr["Minimal_time"]), Resolution = Convert.ToInt32(rdr["Resolution"]), ngt_region_codeId = Convert.ToInt32(rdr["ngt_region_codeId"]), Country_code = Convert.ToString(rdr["Country_code"]), description = Convert.ToString(rdr["description"]), Connection_charge = Convert.ToDecimal(rdr["Connection_charge"]), Active = Convert.ToString(rdr["Active"]), Priority = Convert.ToInt32(rdr["Priority"]), Trunck = Convert.ToString(rdr["Trunck"]), BatchID = Convert.ToInt32(rdr["BatchID"]), CreatedOn = Convert.ToString(rdr["CreatedOn"]), Start_Pulse = Convert.ToString(rdr["Start_Pulse"]), Next_Pulse = Convert.ToString(rdr["Next_Pulse"]), Region_hash_code = Convert.ToString(rdr["Region_hash_code"]) });
                            }
                            rdr.Close();

                            foreach (var rate in ratesresultList)
                            {

                                Ratelist1.Add(new ngt_rateslist()
                                {
                                    Id = rate.Id,
                                    Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                    Call_rate = rate.Call_rate,
                                    Grace_period = rate.Grace_period,
                                    Minimal_time = rate.Minimal_time,
                                    Resolution = rate.Resolution,
                                    ngt_region_codeId = rate.ngt_region_codeId,
                                    ngt_regionName = rate.Region_hash_code,
                                    Description = rate.description,
                                    Connection_charge = rate.Connection_charge,
                                    Active = rate.Active,
                                    Priority = rate.Priority,
                                    Trunck = rate.Trunck,
                                    BatchID = rate.BatchID,
                                    CreatedOn = rate.CreatedOn,
                                    StartPulse = rate.Start_Pulse,
                                    NextPulse = rate.Next_Pulse
                                });

                            }
                        }
                        else
                        {
                            DateTime effectiveon = Convert.ToDateTime(value);
                            if (regionCode == "")
                            {
                                string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";

                                cmd.CommandText = ab;
                                cmd.Connection = con;
                                cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                                MySqlDataReader rdr = cmd.ExecuteReader();
                                //   List<testNewservice> testrt = new List<testNewservice>();
                                while (rdr.Read())
                                {
                                    ratesresultList.Add(new ratesresult() { Id = Convert.ToInt32(rdr["Id"]), Effective_on = Convert.ToDateTime(rdr["Effective_on"].ToString()), Call_rate = Convert.ToDecimal(rdr["Call_rate"]), Grace_period = Convert.ToInt32(rdr["Grace_period"]), Minimal_time = Convert.ToInt32(rdr["Minimal_time"]), Resolution = Convert.ToInt32(rdr["Resolution"]), ngt_region_codeId = Convert.ToInt32(rdr["ngt_region_codeId"]), Country_code = Convert.ToString(rdr["Country_code"]), description = Convert.ToString(rdr["description"]), Connection_charge = Convert.ToDecimal(rdr["Connection_charge"]), Active = Convert.ToString(rdr["Active"]), Priority = Convert.ToInt32(rdr["Priority"]), Trunck = Convert.ToString(rdr["Trunck"]), BatchID = Convert.ToInt32(rdr["BatchID"]), CreatedOn = Convert.ToString(rdr["CreatedOn"]), Start_Pulse = Convert.ToString(rdr["Start_Pulse"]), Next_Pulse = Convert.ToString(rdr["Next_Pulse"]), Region_hash_code = Convert.ToString(rdr["Region_hash_code"]) });
                                }
                                rdr.Close();




                                // var a = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                                foreach (var rate in ratesresultList)
                                {
                                    if (rate.Active == "D")
                                    {
                                        if (rate.Effective_on.Date == effectiveon.Date)
                                        {
                                            Ratelist1.Add(new ngt_rateslist()
                                            {
                                                Id = rate.Id,
                                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                                Call_rate = rate.Call_rate,
                                                Grace_period = rate.Grace_period,
                                                Minimal_time = rate.Minimal_time,
                                                Resolution = rate.Resolution,
                                                ngt_region_codeId = rate.ngt_region_codeId,
                                                ngt_regionName = rate.Region_hash_code,
                                                Description = rate.description,
                                                Connection_charge = rate.Connection_charge,
                                                Active = rate.Active,
                                                Priority = rate.Priority,
                                                Trunck = rate.Trunck,
                                                BatchID = rate.BatchID,
                                                CreatedOn = rate.CreatedOn,
                                                StartPulse = rate.Start_Pulse,
                                                NextPulse = rate.Next_Pulse
                                            });
                                        }
                                    }
                                    else
                                    {
                                        Ratelist1.Add(new ngt_rateslist()
                                        {
                                            Id = rate.Id,
                                            Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                            Call_rate = rate.Call_rate,
                                            Grace_period = rate.Grace_period,
                                            Minimal_time = rate.Minimal_time,
                                            Resolution = rate.Resolution,
                                            ngt_region_codeId = rate.ngt_region_codeId,
                                            ngt_regionName = rate.Region_hash_code,
                                            Description = rate.description,
                                            Connection_charge = rate.Connection_charge,
                                            Active = rate.Active,
                                            Priority = rate.Priority,
                                            Trunck = rate.Trunck,
                                            BatchID = rate.BatchID,
                                            CreatedOn = rate.CreatedOn,
                                            StartPulse = rate.Start_Pulse,
                                            NextPulse = rate.Next_Pulse
                                        });
                                    }
                                }
                            }
                            else
                            {
                                string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and Country_code like '" + regionCode + "%' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";
                                // var a = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                                cmd.CommandText = ab;
                                cmd.Connection = con;
                                cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                                MySqlDataReader rdr = cmd.ExecuteReader();
                                //   List<testNewservice> testrt = new List<testNewservice>();
                                while (rdr.Read())
                                {
                                    ratesresultList.Add(new ratesresult() { Id = Convert.ToInt32(rdr["Id"]), Effective_on = Convert.ToDateTime(rdr["Effective_on"].ToString()), Call_rate = Convert.ToDecimal(rdr["Call_rate"]), Grace_period = Convert.ToInt32(rdr["Grace_period"]), Minimal_time = Convert.ToInt32(rdr["Minimal_time"]), Resolution = Convert.ToInt32(rdr["Resolution"]), ngt_region_codeId = Convert.ToInt32(rdr["ngt_region_codeId"]), Country_code = Convert.ToString(rdr["Country_code"]), description = Convert.ToString(rdr["description"]), Connection_charge = Convert.ToDecimal(rdr["Connection_charge"]), Active = Convert.ToString(rdr["Active"]), Priority = Convert.ToInt32(rdr["Priority"]), Trunck = Convert.ToString(rdr["Trunck"]), BatchID = Convert.ToInt32(rdr["BatchID"]), CreatedOn = Convert.ToString(rdr["CreatedOn"]), Start_Pulse = Convert.ToString(rdr["Start_Pulse"]), Next_Pulse = Convert.ToString(rdr["Next_Pulse"]), Region_hash_code = Convert.ToString(rdr["Region_hash_code"]) });
                                }
                                rdr.Close();

                                foreach (var rate in ratesresultList)
                                {
                                    if (rate.Active == "D")
                                    {
                                        if (rate.Effective_on.Date == effectiveon.Date)
                                        {
                                            Ratelist1.Add(new ngt_rateslist()
                                            {
                                                Id = rate.Id,
                                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                                Call_rate = rate.Call_rate,
                                                Grace_period = rate.Grace_period,
                                                Minimal_time = rate.Minimal_time,
                                                Resolution = rate.Resolution,
                                                ngt_region_codeId = rate.ngt_region_codeId,
                                                ngt_regionName = rate.Region_hash_code,
                                                Description = rate.description,
                                                Connection_charge = rate.Connection_charge,
                                                Active = rate.Active,
                                                Priority = rate.Priority,
                                                Trunck = rate.Trunck,
                                                BatchID = rate.BatchID,
                                                CreatedOn = rate.CreatedOn,
                                                StartPulse = rate.Start_Pulse,
                                                NextPulse = rate.Next_Pulse
                                            });
                                        }
                                    }
                                    else
                                    {
                                        Ratelist1.Add(new ngt_rateslist()
                                        {
                                            Id = rate.Id,
                                            Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                            Call_rate = rate.Call_rate,
                                            Grace_period = rate.Grace_period,
                                            Minimal_time = rate.Minimal_time,
                                            Resolution = rate.Resolution,
                                            ngt_region_codeId = rate.ngt_region_codeId,
                                            ngt_regionName = rate.Region_hash_code,
                                            Description = rate.description,
                                            Connection_charge = rate.Connection_charge,
                                            Active = rate.Active,
                                            Priority = rate.Priority,
                                            Trunck = rate.Trunck,
                                            BatchID = rate.BatchID,
                                            CreatedOn = rate.CreatedOn,
                                            StartPulse = rate.Start_Pulse,
                                            NextPulse = rate.Next_Pulse
                                        });
                                    }
                                }
                            }
                        }

                        return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, totalrecords = Ratelist1.Count, message = "Records Fetched" });
                    }
                    else if (Type == "Batch")
                    {
                        string ab = "";
                        if (value == "")
                        {

                            if (regionCode == "")
                            {
                                ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' order by nrc.country_code asc";
                                // ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                            }
                            else
                            {
                                ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and nrc.Country_code like'" + regionCode + "' order by nrc.country_code asc";
                                // ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                            }



                        }
                        else
                        {
                            int Batch = Convert.ToInt32(value);
                            if (regionCode == "")
                            {
                                ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.BatchID=" + Batch + " and ncr.Active!='N' order by nrc.country_code asc";
                                // ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                            }
                            else
                            {
                                ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.BatchID=" + Batch + " and ncr.Active!='N' and nrc.Country_code like'" + regionCode + " ' order by nrc.country_code asc";
                                // ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                            }

                        }
                        cmd.CommandText = ab;
                        cmd.Connection = con;
                        cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                        MySqlDataReader rdr = cmd.ExecuteReader();
                        //   List<testNewservice> testrt = new List<testNewservice>();
                        while (rdr.Read())
                        {
                            ratesresultList.Add(new ratesresult() { Id = Convert.ToInt32(rdr["Id"]), Effective_on = Convert.ToDateTime(rdr["Effective_on"].ToString()), Call_rate = Convert.ToDecimal(rdr["Call_rate"]), Grace_period = Convert.ToInt32(rdr["Grace_period"]), Minimal_time = Convert.ToInt32(rdr["Minimal_time"]), Resolution = Convert.ToInt32(rdr["Resolution"]), ngt_region_codeId = Convert.ToInt32(rdr["ngt_region_codeId"]), Country_code = Convert.ToString(rdr["Country_code"]), description = Convert.ToString(rdr["description"]), Connection_charge = Convert.ToDecimal(rdr["Connection_charge"]), Active = Convert.ToString(rdr["Active"]), Priority = Convert.ToInt32(rdr["Priority"]), Trunck = Convert.ToString(rdr["Trunck"]), BatchID = Convert.ToInt32(rdr["BatchID"]), CreatedOn = Convert.ToString(rdr["CreatedOn"]), Start_Pulse = Convert.ToString(rdr["Start_Pulse"]), Next_Pulse = Convert.ToString(rdr["Next_Pulse"]), Region_hash_code = Convert.ToString(rdr["Region_hash_code"]) });
                        }
                        rdr.Close();

                        foreach (var rate in ratesresultList)
                        {
                            Ratelist1.Add(new ngt_rateslist()
                            {
                                Id = rate.Id,
                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                Call_rate = rate.Call_rate,
                                Grace_period = rate.Grace_period,
                                Minimal_time = rate.Minimal_time,
                                Resolution = rate.Resolution,
                                ngt_region_codeId = rate.ngt_region_codeId,
                                ngt_regionName = rate.Region_hash_code,
                                Description = rate.description,
                                Connection_charge = rate.Connection_charge,
                                Active = rate.Active,
                                Priority = rate.Priority,
                                Trunck = rate.Trunck,
                                BatchID = rate.BatchID,
                                CreatedOn = rate.CreatedOn,
                                StartPulse = rate.Start_Pulse,
                                NextPulse = rate.Next_Pulse
                            });
                        }
                        return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, totalrecords = Ratelist1.Count, message = "Records Fetched" });
                    }
                    else
                    {
                        return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "false", records = null, totalrecords = Ratelist1.Count, message = "Type should be effectiveon or Batch" });
                    }
                }
                con.Close();
            }
            catch (Exception ex)
            {
                return RMSCDR.SerializeAndCreateMS(new Response() { status = "false", Message = ex.Message });
            }
            finally
            {
                con.Close();
            }
        }
        public SuccessResponse GenerateRequestIdforserverMapping(int RateSheetId, string RequestId, string Description, string RequestType, string ServerRatesheetNmae, string PulseRule, int ServerId, int GracePeriod, bool Active, int CompanyType, int UpdatedBy)
        {
            SuccessResponse responsemessage = new SuccessResponse();
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {
                    rms.Configuration.ValidateOnSaveEnabled = false;
                    ngt_ratesheet ratesheet = rms.ngt_ratesheet.Where(d => d.RatesheetID == RateSheetId).FirstOrDefault();
                    server_details serdetls = rms.server_details.Where(e => e.ServerID == ServerId).FirstOrDefault();
                    // ngt_rates ratebatchid = rms.ngt_rates.Where(e => e.RatesheetID == RateSheetId).OrderByDescending(r => r.BatchID).FirstOrDefault();
                    var ratebatchid = rms.ngt_rates.Where(k => k.RatesheetID == RateSheetId).Max(t => t.BatchID);

                    ngt_partition partition = rms.ngt_partition.Where(e => e.Id == UpdatedBy).FirstOrDefault();

                    var Servercsvname = rms.jobqueues.Where(a => a.RateSheetId == RateSheetId && a.RequestType == "New").Select(a => a.ServerNameCSV).FirstOrDefault();

                    jobqueue newrecord = new jobqueue();
                    newrecord.JobStatus = "Pending";
                    newrecord.FileNameCSV = "-----";// FileNameCSV;
                    newrecord.RequestID = RequestId;
                    newrecord.PartitionID = UpdatedBy;
                    newrecord.RateSheetId = RateSheetId;
                    newrecord.RatesheetName = ratesheet.RatesheetName;
                    // newrecord.RequestType="Update";
                    newrecord.RequestType = RequestType;
                    newrecord.HitTry = 0;

                    newrecord.Descriptions = Description;
                    newrecord.ServerRatesheetNmae = ServerRatesheetNmae;
                    newrecord.PulseRule = PulseRule;
                    newrecord.ServerId = ServerId;
                    newrecord.GracePeriod = GracePeriod;
                    newrecord.Active = Active;
                    newrecord.CompanyType = CompanyType;
                    newrecord.ServerNameCSV = Servercsvname;
                    newrecord.CreatedOn = DateTime.Now.ToString("yyyy-MM-dd HH:mm:00");
                    newrecord.UpdatedBy = UpdatedBy;

                    rms.jobqueues.Add(newrecord);
                    rms.SaveChanges();

                    ratesheetaddupdatestatu newrecordstatus = new ratesheetaddupdatestatu();
                    // newrecordstatus.RequestType="Update";
                    newrecordstatus.RequestType = RequestType;
                    newrecordstatus.RatesheetID = RateSheetId;
                    newrecordstatus.RatesheetName = ratesheet.RatesheetName;
                    newrecordstatus.DBstatus = "Complete";
                    // newrecordstatus.BatchID = ratebatchid.BatchID;
                    newrecordstatus.BatchID = ratebatchid;
                    //if (RequestType == "Update")
                    newrecordstatus.ServerStstus = "Pending";
                    // else
                    //  {
                    // newrecordstatus.ServerStstus = "--";
                    newrecordstatus.ServerID = ServerId;
                    newrecordstatus.ServerName = serdetls.ServerName;
                    newrecordstatus.ServerRatesheetName = ServerRatesheetNmae;
                    // }
                    newrecordstatus.CompleteStatus = "Pending";
                    newrecordstatus.UpdatedDate = DateTime.Now;
                    newrecordstatus.JobsQueueID = newrecord.ID;
                    newrecordstatus.UpdatedBy = partition.Name;
                    rms.ratesheetaddupdatestatus.Add(newrecordstatus);
                    rms.SaveChanges();

                    responsemessage.status = "true";
                    // if (RequestType == "Update")
                    responsemessage.Message = "Pushing successfully.";
                    // else
                    //   responsemessage.Message = "Added successfully.";

                }

            }
            catch (Exception ex)
            {
                UpdateError("GenerateRequestIdforserverMapping function exception error " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "", false);
                responsemessage.status = "false";
                responsemessage.Message = ex.Message;

            }
            return responsemessage;
        }


        //updated by shripal for mapping time pushing
        public SuccessResponse ServerPushingwithMapping(int RatesheetID, int ServerID, string PulseRule, int GracePeriod, string ServerRatesheetName, string Description, bool Active, int CompanyType, int UpdatedBy, int jobqueueID, string ServerCsvName, string createdon)
        {
            SuccessResponse response = new SuccessResponse();
            Response resp = new Response();
            try
            {
                using (rmsEntities rms = new rmsEntities())
                {
                    rms.Configuration.ValidateOnSaveEnabled = false;
                    var record = rms.ratesheetaddupdatestatus.Where(e => e.JobsQueueID == jobqueueID).FirstOrDefault();

                    resp = AddRatesheetServerMapping(RatesheetID, ServerID, PulseRule, GracePeriod, ServerRatesheetName, Description, Active, CompanyType, UpdatedBy, ServerCsvName, createdon);


                    if (resp.status == "true" || resp.status == "success")
                    {
                        record.ServerStstus = "Complete";
                        record.CompleteStatus = "Complete";
                        resp.Message = "Server Mapping successfully.";
                        response.status = "true";
                        response.Message = resp.Message;
                    }
                    else
                    {
                        record.ServerStstus = "Failure";
                        response.status = "false";
                        resp.Message = "Server not Mapped.";
                        response.Message = resp.Message;
                    }
                    rms.SaveChanges();

                }

            }
            catch (Exception ex)
            {

                response.status = "false";
                response.Message = ex.Message;
            }
            return response;
        }

        //ByShinil
        public SuccessResponse ReplaceRatesToDBandServerNew(Int32 newRateSheetId, string NewFleName2, string partitionid, int jobqueueID, string CloseDate, string ServerCsvName)
        {
            SuccessResponse responsemessage = new SuccessResponse();
            int rateBatchID = 0;
            string laststatusis = "0";
            string csv_import_update = "temp" + NewFleName2;
            csv_import_update = csv_import_update.Substring(0, csv_import_update.Length - 4);
            int flag = 0;
            string dataStr = "";
            // MySqlConnection conn = new MySqlConnection(ConfigurationManager.AppSettings["Connstring"]);
            MySqlConnection conn = new MySqlConnection(ConfigurationManager.ConnectionStrings["rmsconn"].ToString());
            try
            {
                conn.Open();
                using (rmsEntities rms = new rmsEntities())
                {
                    // rateBatchID = (from NR in rms.ngt_rates where NR.RatesheetID == newRateSheetId orderby NR.BatchID descending select NR.BatchID).FirstOrDefault();

                    rateBatchID = rms.ngt_rates.Where(NR => NR.RatesheetID == newRateSheetId).Max(NR => NR.BatchID);
                }
                string tempRateTable = "Tempp" + GetTimestamp(DateTime.Now);
                string sql = "drop table IF EXISTS " + csv_import_update + ";CREATE TEMPORARY TABLE " + csv_import_update + "(ID int primary key auto_increment,code varchar(20),codename varchar(255),rate varchar(20),status varchar(20),date varchar(50),startpulse varchar(20),nextpulse varchar(20),enddate varchar(50));";
                MySqlCommand cmd = new MySqlCommand(sql, conn);
                int rdr = cmd.ExecuteNonQuery();

                //string tempquery = "CREATE TABLE IF NOT EXISTS " + tempRateTable + " AS SELECT *  FROM ngt_rates where RatesheetID=" + newRateSheetId + " and Effective_on>'" + CloseDate + "' and Active='A';";


                // Pasupathi changed Query 20/03/2017


                #region Old code commented 21/03/2017


                //string tempquery = "CREATE TABLE IF NOT EXISTS " + tempRateTable + " AS SELECT *  FROM ngt_rates where RatesheetID=" + newRateSheetId + " and (EndDate >='" + DateTime.Now + "' or EndDate is null) and Active='A';";

                //MySqlCommand tempquerycmd = new MySqlCommand(tempquery, conn);
                //int tempquerycmddr = tempquerycmd.ExecuteNonQuery();
                //if (tempquerycmddr != 0)
                //{

                //    //string updatequery = "update " + tempRateTable + " set Effective_on='" + CloseDate + "',batchid=" + (rateBatchID + 1) + ",Active='D'" + " where RatesheetID=" + newRateSheetId;

                //    // Pasupathi changed Query 20/03/2017

                //    string updatequery = "update " + tempRateTable + " set EndDate='" + CloseDate + "' where RatesheetID=" + newRateSheetId;

                //    MySqlCommand updatequerycmd = new MySqlCommand(updatequery, conn);
                //    int updatequerycmddr = updatequerycmd.ExecuteNonQuery();
                //    if (updatequerycmddr != 0)
                //    {

                //        string insertrateequery = " INSERT INTO ngt_rates(Effective_on, Call_rate, From_day, To_day, From_hour, To_hour, Grace_period, Minimal_time, Resolution, ngt_region_codeId, RatesheetID, Description, Connection_charge, Active, ngt_PartitionId, Priority, Trunck, BatchID, CreatedOn, Start_Pulse, Next_Pulse,EndDate) SELECT Effective_on, Call_rate, From_day, To_day, From_hour, To_hour, Grace_period, Minimal_time, Resolution, ngt_region_codeId, RatesheetID, Description, Connection_charge, Active, ngt_PartitionId, Priority, Trunck, BatchID, CreatedOn,Start_Pulse, Next_Pulse,EndDate FROM " + tempRateTable;
                //        MySqlCommand insertrateequerycmd = new MySqlCommand(insertrateequery, conn);
                //        int insertrateequerycmddr = insertrateequerycmd.ExecuteNonQuery();
                //        if (insertrateequerycmddr != 0)
                //        {
                //            string dropquery = "drop table " + tempRateTable;
                //            MySqlCommand dropquerycmd = new MySqlCommand(dropquery, conn);
                //            int dropquerycmddr = dropquerycmd.ExecuteNonQuery();
                //        }
                //    }
                //}

                #endregion


                //// pasupathi commented  28/03/2017


                //UpdateError("Before Update Enddate Ngt_Rates Table Started ", "", "RatesheetLogs.txt", "file name " + NewFleName2, false);

                //#region new code Update Enddate pasupathi 21/03/2017

                //string updatequeryEnddate = "update ngt_rates set EndDate='" + CloseDate + "' where RatesheetID=" + newRateSheetId + " and (EndDate >= '" + CloseDate + "' or EndDate is null) and Active = 'A'";

                //MySqlCommand updatequerycmdend = new MySqlCommand(updatequeryEnddate, conn);
                //int updatequerycmddrend = updatequerycmdend.ExecuteNonQuery();
                //if (updatequerycmddrend != 0)

                //    UpdateError("Update Enddate Ngt_Rates Table ", " Count=" + updatequerycmddrend + " , BatchId:-" + rateBatchID, "RatesheetLogs.txt", "file name " + NewFleName2 + " ,Query:-" + updatequeryEnddate, false);

                //else
                //    UpdateError("Update Enddate Ngt_Rates Table Else", NewFleName2 + "Count=" + updatequerycmddrend, "RatesheetLogs.txt", "Query:-" + updatequeryEnddate + " , BatchId:-" + rateBatchID, false);

                //#endregion


                string query = "LOAD DATA  INFILE '" + ConfigurationManager.AppSettings["tempUrl"].ToString() + NewFleName2 + "' INTO TABLE " + csv_import_update + " FIELDS TERMINATED BY ',' ENCLOSED BY '\"' LINES TERMINATED BY '\n' IGNORE 1 ROWS (code,codename,rate,status,date,startpulse,nextpulse,enddate);";
                MySqlCommand cmd22 = new MySqlCommand(query, conn);
                int rdr22 = cmd22.ExecuteNonQuery();
                if (rdr22 != -1)
                    UpdateError("ReplaceRatesToDBandServer function  filename", NewFleName2 + " LOAD DATA INFILE successfully", "RatesheetLogs.txt", "", false);
                else
                    UpdateError("ReplaceRatesToDBandServer function filename", NewFleName2 + "LOAD DATA INFILE fail", "RatesheetLogs.txt", "", false);


                // pasupathi added new commend
                string sqlquerydel = "delete from " + csv_import_update + " where date is null or date='';";
                MySqlCommand cmddel = new MySqlCommand(sqlquerydel, conn);
                int rdrdel = cmddel.ExecuteNonQuery();


                cmd.Connection = conn;
                cmd.CommandText = "check_regionCodeUpdateNew";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@csv_table1", csv_import_update);
                cmd.Parameters["@csv_table1"].Direction = ParameterDirection.Input;
                cmd.Parameters.AddWithValue("@partitionuserID", Convert.ToInt32(partitionid));
                cmd.Parameters["@partitionuserID"].Direction = ParameterDirection.Input;
                cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                MySqlDataReader rdr2 = cmd.ExecuteReader();
                List<testNewservice> testrt = new List<testNewservice>();
                while (rdr2.Read())
                {
                    testrt.Add(new testNewservice() { code = rdr2[0].ToString(), codename = rdr2[1].ToString() });
                }
                rdr2.Close();
                UpdateError("ReplaceRatesToDBandServer function file name" + NewFleName2, "Number of new region code= " + testrt.Count, "RatesheetLogs.txt", "", false);
                if (testrt.Count > 0)
                {
                    string sql1 = "";
                    try
                    {
                        sql1 = "insert into ngt_region_code (Country_code, Area_code,description, ngt_region_code_groupId, ngt_PartitionId) values";
                        for (int begin = 0; begin < testrt.Count; begin++)
                        {
                            sql1 = sql1 + "('" + testrt[begin].code + "','','" + testrt[begin].codename + "','1'," + partitionid + "),";

                        }
                        sql1 = sql1.TrimEnd(',');
                        sql1 = sql1 + ";";
                        MySqlCommand cmd1 = new MySqlCommand(sql1, conn);
                        MySqlDataReader rdr1 = cmd1.ExecuteReader();
                        rdr1.Close();
                    }
                    catch (Exception ex)
                    {
                        UpdateError("Insert ngt_region_code Error" + NewFleName2, " Query" + sql1, "RatesheetLogs.txt", "  Error:" + ex.Message, false);
                    }
                }
                string msg = "";
                try
                {
                    cmd.Connection = conn;
                    cmd.CommandText = "updatesRateNew_new";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@partitionId", Convert.ToInt32(partitionid));
                    cmd.Parameters["@partitionId"].Direction = ParameterDirection.Input;
                    cmd.Parameters.AddWithValue("@ratesheetId", Convert.ToInt32(newRateSheetId));
                    cmd.Parameters["@ratesheetId"].Direction = ParameterDirection.Input;
                    cmd.Parameters.AddWithValue("@closedate", Convert.ToDateTime(CloseDate).ToString("yyyy-MM-dd 00:00:00"));
                    cmd.Parameters["@closedate"].Direction = ParameterDirection.Input;
                    cmd.Parameters.AddWithValue("@csv_table", csv_import_update);
                    cmd.Parameters["@csv_table"].Direction = ParameterDirection.Input;
                    cmd.Parameters.AddWithValue("@ReqestType", "Replace");
                    cmd.Parameters["@ReqestType"].Direction = ParameterDirection.Input;
                    cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                    MySqlDataReader rdr3 = cmd.ExecuteReader();
                    dataStr = "1";
                    rdr3.Close();
                }
                catch (Exception ex)
                {

                    UpdateError("ReplaceRatesToDBandServer SP updatesRateNew exception error " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "file name " + NewFleName2, false);
                    dataStr = "";
                }
                SuccessResponse response11 = new SuccessResponse();
                if (dataStr != "")
                {
                    // response11 = UpdateRatesDBNew(newRateSheetId, "true", jobqueueID);
                    response11 = UpdateRatesDB(newRateSheetId, "true", jobqueueID);

                    if (response11.status == "true")
                    {
                        laststatusis = response11.Value;

                        List<ratesheetservermap> list = new List<ratesheetservermap>();
                        list = ViewRatesheetServerMappingfunction(0, newRateSheetId);
                        if (list == null)
                            UpdateError("ReplaceRatesToDBandServer View Ratesheet Server Mapping= No Mapping ", "", "RatesheetLogs.txt", "file name " + NewFleName2, false);
                        if (list != null)
                        {
                            UpdateError("ReplaceRatesToDBandServer View Ratesheet Server Mapping= " + list.Count, "", "RatesheetLogs.txt", "file name " + NewFleName2, false);

                            FileStream fs = new FileStream(ConfigurationManager.AppSettings["ReplaceCSV_URL"].ToString() + NewFleName2, FileMode.Open, FileAccess.Read);

                            byte[] data = new byte[fs.Length];
                            fs.Read(data, 0, data.Length);
                            fs.Close();


                            if (list.Count > 0)
                            {

                                foreach (var a in list)
                                {
                                    bool status = false;




                                    // Pasupathi added

                                    int Oid = Convert.ToInt16(ConfigurationManager.AppSettings["OldNexgeType"]);

                                    server_details kk;
                                    using (rmsEntities rms = new rmsEntities())
                                    {
                                        kk = rms.server_details.Where(t => t.ServerID == a.Server_ID).FirstOrDefault();

                                        if (kk.ServerType == Oid)
                                        {
                                            status = true;
                                        }
                                    }

                                    SuccessResponse respos = new SuccessResponse();
                                    SuccessResponse reqrespon = new SuccessResponse();
                                    // pasupathi updated

                                    // if (a.Server_ID == 9 || a.Server_ID == 1 || a.Server_ID == 19 || a.Server_ID == 28 || a.Server_ID == 23)
                                    // if (a.Server_ID == 9 || a.Server_ID == 1 || a.Server_ID == 19)
                                    // this configuration server id database server_setails table master id (vcs_demo, Ukjera & us jera id's)

                                    if (a.Server_ID == Convert.ToInt16(ConfigurationManager.AppSettings["VCSDEMO"]) ||
                                             a.Server_ID == Convert.ToInt16(ConfigurationManager.AppSettings["UKJERA"]) ||
                                               a.Server_ID == Convert.ToInt16(ConfigurationManager.AppSettings["USJERA"]))
                                    {
                                        //server_details k;
                                        //using (rmsEntities rms = new rmsEntities())
                                        //{
                                        //    k = rms.server_details.Where(t => t.ServerID == a.Server_ID).FirstOrDefault();
                                        //}
                                        //string ServerCSVName = ServerCsvName + ".csv";
                                        //// status = replaceRatesheetInJera(a.ServerRatesheetID, data, ServerCsvName + "-" + NewFleName2, CloseDate, k.ServerIp, k.Username, k.Password);
                                        //status = replaceRatesheetInJera(a.ServerRatesheetID, data, ServerCSVName, CloseDate, k.ServerIp, k.Username, k.Password);
                                        status = true;

                                    }
                                    using (rmsEntities rms = new rmsEntities())
                                    {
                                        var DetailsServer = rms.server_details.FirstOrDefault(d => d.ServerID == a.Server_ID);
                                        if (DetailsServer.ServerType == Convert.ToInt32(ConfigurationManager.AppSettings["NewNexgeServerTypeTest"]) || DetailsServer.ServerType == Convert.ToInt32(ConfigurationManager.AppSettings["NewNexgeServerType"]))
                                        {
                                            //var map = rms.server_ratesheet_map.SingleOrDefault(d => d.RatesheetID == newRateSheetId);


                                            //string path = ConfigurationManager.AppSettings["ReplaceCSV_URL"].ToString() + NewFleName2;


                                            //SuccessResponse res = new SuccessResponse();

                                            //dynamic NewResponse = GetRatelist(path);
                                            //res = NewNexege.NewNexgeReplaceNew(DetailsServer.ServerIp, map.Description, DetailsServer.Username, DetailsServer.Password, "Replace", map.ServerRatesheetName, map.ServerRatesheetID, map.PulseRule, map.Active, map.GracePeriod, map.CompanyType == 1 ? true : false, NewResponse);

                                            //status = res.status == "success" ? true : false;

                                            status = true;
                                        }
                                        else if (DetailsServer.ServerType == Convert.ToInt32(ConfigurationManager.AppSettings["OldNexgeType"]))
                                        {
                                            //string path = ConfigurationManager.AppSettings["ReplaceCSV_URL"].ToString() + NewFleName2;

                                            //SuccessResponse res = new SuccessResponse();
                                            //dynamic NewResponse = GetRatelistnexge(path);

                                            status = true;

                                        }
                                    }


                                    // respos = PushRatesheetToServerNew(a.ID, "Automatic", "Batch", "", partitionid);
                                    if (status == true)
                                    {
                                        UpdateError("ReplaceStatusSuccessUpdateServer ", status.ToString(), "RatesheetLogs.txt", "", false);

                                        reqrespon = UpdateRatesToserverNew(newRateSheetId, a.ID, Convert.ToInt32(laststatusis), "true", jobqueueID);
                                    }
                                    else
                                    {
                                        reqrespon = UpdateRatesToserverNew(newRateSheetId, a.ID, Convert.ToInt32(laststatusis), "false", jobqueueID);
                                        responsemessage.status = "false";
                                    }
                                    laststatusis = "0";
                                    if (reqrespon.status == "true")
                                        responsemessage.status = "true";
                                    responsemessage.Message = responsemessage.Message + " " + reqrespon.Message;
                                }
                            }
                        }
                        else
                        {
                            response11 = UpdateRatesDB(newRateSheetId, "notmap", jobqueueID);

                            responsemessage.status = "false";
                            responsemessage.Message = responsemessage.Message + " " + response11.Message;
                        }
                    }
                }
                else
                {
                    response11 = UpdateRatesDB(newRateSheetId, msg, jobqueueID);
                    responsemessage.status = response11.status;
                    responsemessage.Message = response11.Message;
                }
                try
                {
                    // Pasupathi Commented.
                    //FtpWebRequest request1 = (FtpWebRequest)WebRequest.Create(ConfigurationManager.AppSettings["ftpUrl"].ToString() + NewFleName2);
                    //request1.Method = WebRequestMethods.Ftp.DeleteFile;
                    //request1.Credentials = new NetworkCredential(ConfigurationManager.AppSettings["ftpUser"].ToString(), ConfigurationManager.AppSettings["ftpPassword"].ToString());
                    //FtpWebResponse response = (FtpWebResponse)request1.GetResponse();
                    //response.Close();
                }
                catch (Exception ex)
                {
                    UpdateError("ReplaceRatesToDBandServer exception FTP ratesheet delete error " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "file name " + NewFleName2, false);
                }
            }
            catch (Exception ex)
            {
                UpdateError("ReplaceRatesToDBandServer exception error " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "", false);
                string exceptionmessage = ex.Message;
                if (exceptionmessage.Contains(ConfigurationManager.AppSettings["ErrorPool"].ToString()))
                {
                    responsemessage.status = "Delay";
                    responsemessage.Message = ex.Message;
                }
                else
                {
                    responsemessage.status = "false";
                    responsemessage.Message = ex.Message;
                }
            }
            finally
            {
                conn.Close();
            }
            return responsemessage;
        }

        public dynamic GetRatelist(string path)
        {
            List<ngt_rateslist> RatesheetData = new List<ngt_rateslist>();

            int nCounter = 0;
            string country = null;
            int nColumn = 0;
            string[] arrContent = null;
            StreamReader sr = new StreamReader(path);
            using (CsvReader reader = new CsvReader(path))
            {
                foreach (string[] RowsEnumeratorvalues in reader.RowEnumerator)
                {
                    nCounter++;
                    country = "";

                    arrContent = RowsEnumeratorvalues;
                    int len = RowsEnumeratorvalues.Length;
                    if (len != 8)
                    {

                        return RatesheetData;
                    }
                    arrContent[1] = Regex.Replace(arrContent[1], "[^0-9a-zA-Z]+", " ");

                    //Checking all rows in file have same number of column
                    if (arrContent.Length < nColumn)
                    {
                        sr.Close();

                        return RatesheetData;//new RatesheetResponse { status = "false", Message = "Error at Line No. " + nCounter };
                    }
                    else
                    {
                        //Checking ratesheet is valid data or not
                        if (nCounter > 1)
                        {
                            if (!string.IsNullOrEmpty(arrContent[3].ToString())
                               && !string.IsNullOrEmpty(arrContent[0].ToString()) && !string.IsNullOrEmpty(arrContent[2].ToString()))

                            {
                                if (string.IsNullOrEmpty(arrContent[4].ToString()) && !string.IsNullOrEmpty(arrContent[3].ToString()))
                                {


                                    return RatesheetData;
                                }
                                try
                                {

                                    DateTime effectiveDate = Convert.ToDateTime(arrContent[4]);
                                    DateTime Enddate = Convert.ToDateTime(arrContent[7] == "" ? null : arrContent[7]);
                                    double ratess = Convert.ToDouble(arrContent[2]);
                                    string regionCodeName = arrContent[1].Replace('#', ' ').Replace(';', ' ').Replace('?', ' ').Replace('\\', ' ').Replace('/', ' ').Replace('^', ' ').Replace(')', ' ').Replace('(', ' ').Replace('_', ' ').Replace('&', ' ').Replace('"', ' ');
                                    string regionCode = arrContent[0];
                                    if (arrContent[3] == "Allowed" || arrContent[3] == "Blocked" || arrContent[3] == "Delete")
                                    {
                                        if (arrContent[3] == "Delete")
                                        {
                                            if (effectiveDate > Enddate && Enddate != Convert.ToDateTime(null))
                                            {

                                                return RatesheetData;
                                            }
                                            if (Enddate == Convert.ToDateTime(null))
                                            {

                                                return RatesheetData;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sr.Close();


                                        return RatesheetData;
                                    }

                                }
                                catch (Exception ex)
                                {
                                    sr.Close();


                                    return RatesheetData;
                                }


                                //AllRegionCode.Add(new TestNew2() { code = arrContent[0], codeName = arrContent[1], effectiveDate = arrContent[4], nextPulse = arrContent[6], rate = arrContent[2], startPulse = arrContent[5], status = arrContent[3], endddate = arrContent[7] });

                                RatesheetData.Add(new ngt_rateslist
                                {
                                    Id = 1,
                                    Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", arrContent[4]),
                                    Call_rate = Convert.ToDecimal(arrContent[2]),
                                    Grace_period = 1,
                                    Minimal_time = 1,
                                    Resolution = 1,
                                    ngt_region_codeId = Convert.ToInt32(arrContent[0]),
                                    //shripal ngt_regionName = rate.Country_code,
                                    ngt_regionName = arrContent[0],
                                    Description = arrContent[1],
                                    Connection_charge = 1,
                                    Active = arrContent[3],
                                    Priority = 1,
                                    Trunck = "CLI",
                                    BatchID = 1,
                                    CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now),
                                    StartPulse = "1",
                                    NextPulse = "1"

                                });

                            }

                        }

                    }
                }
            }
            return RatesheetData;
        }

        public dynamic GetRatelistnexge(string path)
        {

            UpdateError("UpdateRatesheetServer before GetRatelistnexge ", path, "ParellelRatesheetLogsy.txt", "", false);
            List<ngt_rateslist> RatesheetData = new List<ngt_rateslist>();

            try
            {


                int nCounter = 0;
                string country = null;
                int nColumn = 0;
                string[] arrContent = null;
                StreamReader sr = new StreamReader(path);
                using (CsvReader reader = new CsvReader(path))
                {
                    foreach (string[] RowsEnumeratorvalues in reader.RowEnumerator)
                    {
                        nCounter++;
                        country = "";

                        arrContent = RowsEnumeratorvalues;
                        int len = RowsEnumeratorvalues.Length;
                        if (len != 8)
                        {
                            UpdateError("UpdateRatesheetServer GetRatelistnexge len ", len.ToString(), "ParellelRatesheetLogsy.txt", "", false);

                            return RatesheetData;
                        }
                        arrContent[1] = Regex.Replace(arrContent[1], "[^0-9a-zA-Z]+", " ");

                        //Checking all rows in file have same number of column
                        if (arrContent.Length < nColumn)
                        {
                            sr.Close();
                            UpdateError("UpdateRatesheetServer GetRatelistnexge  arrContent.Length < nColumn  ", arrContent.Length.ToString(), "ParellelRatesheetLogsy.txt", nColumn.ToString(), false);

                            return RatesheetData;//new RatesheetResponse { status = "false", Message = "Error at Line No. " + nCounter };
                        }
                        else
                        {
                            //Checking ratesheet is valid data or not
                            if (nCounter > 1)
                            {
                                if (!string.IsNullOrEmpty(arrContent[3].ToString())
                                   && !string.IsNullOrEmpty(arrContent[0].ToString()) && !string.IsNullOrEmpty(arrContent[2].ToString()))

                                {
                                    if (string.IsNullOrEmpty(arrContent[4].ToString()) && !string.IsNullOrEmpty(arrContent[3].ToString()))
                                    {
                                        UpdateError("UpdateRatesheetServer GetRatelistnexge  string.IsNullOrEmpty(arrContent[4].ToString()) && !string.IsNullOrEmpty(arrContent[3].ToString())  ", arrContent[4].ToString(), "ParellelRatesheetLogsy.txt", arrContent[3].ToString(), false);

                                        return RatesheetData;
                                    }



                                    RatesheetData.Add(new ngt_rateslist
                                    {
                                        Id = 1,
                                        Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", arrContent[4]),
                                        Call_rate = Convert.ToDecimal(arrContent[2]),
                                        Grace_period = 1,
                                        Minimal_time = 1,
                                        Resolution = 1,
                                        ngt_region_codeId = 1,

                                        ngt_regionName = arrContent[0],
                                        Description = arrContent[1],
                                        Connection_charge = 1,
                                        Active = arrContent[3].ToString().ToUpper() == "ALLOWED" ? "A" : "B",
                                        Priority = 1,
                                        Trunck = "CLI",
                                        BatchID = 1,
                                        CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now),
                                        StartPulse = "1",
                                        NextPulse = "1"

                                    });

                                }

                            }

                        }
                    }
                }
            }
            catch (Exception ex)
            {
                UpdateError("UpdateRatesheetServer GetRatelistnexge  exception ", ex.Message, "ParellelRatesheetLogsy.txt", "", false);
            }
            UpdateError("UpdateRatesheetServer after GetRatelistnexge ", "", "ParellelRatesheetLogsy.txt", "RatesheetData Count:" + RatesheetData.Count, false);

            return RatesheetData;
        }

        public dynamic GetRatelistparelleljera(string path, int addminute)
        {

            UpdateError("UpdateRatesheetServer before GetRatelistnexge ", path, "ParellelRatesheetLogsy.txt", "", false);
            List<ngt_rateslist> RatesheetData = new List<ngt_rateslist>();

            try
            {


                int nCounter = 0;
                string country = null;
                int nColumn = 0;
                string[] arrContent = null;
                StreamReader sr = new StreamReader(path);
                using (CsvReader reader = new CsvReader(path))
                {
                    foreach (string[] RowsEnumeratorvalues in reader.RowEnumerator)
                    {
                        nCounter++;
                        country = "";

                        arrContent = RowsEnumeratorvalues;
                        int len = RowsEnumeratorvalues.Length;
                        if (len != 8)
                        {
                            UpdateError("UpdateRatesheetServer GetRatelistnexge len ", len.ToString(), "ParellelRatesheetLogsy.txt", "", false);

                            return RatesheetData;
                        }
                        arrContent[1] = Regex.Replace(arrContent[1], "[^0-9a-zA-Z]+", " ");

                        //Checking all rows in file have same number of column
                        if (arrContent.Length < nColumn)
                        {
                            sr.Close();
                            UpdateError("UpdateRatesheetServer GetRatelistnexge  arrContent.Length < nColumn  ", arrContent.Length.ToString(), "ParellelRatesheetLogsy.txt", nColumn.ToString(), false);

                            return RatesheetData;//new RatesheetResponse { status = "false", Message = "Error at Line No. " + nCounter };
                        }
                        else
                        {
                            //Checking ratesheet is valid data or not
                            if (nCounter > 1)
                            {
                                if (!string.IsNullOrEmpty(arrContent[3].ToString())
                                   && !string.IsNullOrEmpty(arrContent[0].ToString()) && !string.IsNullOrEmpty(arrContent[2].ToString()))

                                {
                                    if (string.IsNullOrEmpty(arrContent[4].ToString()) && !string.IsNullOrEmpty(arrContent[3].ToString()))
                                    {
                                        UpdateError("UpdateRatesheetServer GetRatelistnexge  string.IsNullOrEmpty(arrContent[4].ToString()) && !string.IsNullOrEmpty(arrContent[3].ToString())  ", arrContent[4].ToString(), "ParellelRatesheetLogsy.txt", arrContent[3].ToString(), false);

                                        return RatesheetData;
                                    }

                                    string effectiveon = Convert.ToDateTime(arrContent[4]).ToString("yyyy-MM-dd 00:00:00");
                                    if (Convert.ToDateTime(arrContent[4]).ToString("yyyy-MM-dd 00:00:00") != DateTime.Now.ToString("yyyy-MM-dd 00:00:00"))
                                        effectiveon = Convert.ToDateTime(arrContent[4]).ToString("yyyy-MM-dd 00:00:00");
                                    else
                                        effectiveon = Convert.ToDateTime(arrContent[4]).AddMinutes(addminute).ToString("yyyy-MM-dd HH:mm:ss");

                                    RatesheetData.Add(new ngt_rateslist
                                    {
                                        Id = 1,
                                        // Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", arrContent[4]),
                                        Effective_on = effectiveon,
                                        Call_rate = Convert.ToDecimal(arrContent[2]),
                                        Grace_period = 1,
                                        Minimal_time = 1,
                                        Resolution = 1,
                                        ngt_region_codeId = 1,

                                        ngt_regionName = arrContent[0],
                                        Description = arrContent[1],
                                        Connection_charge = 1,
                                        Active = arrContent[3].ToString().ToUpper() == "ALLOWED" ? "A" : "B",
                                        Priority = 1,
                                        Trunck = "CLI",
                                        BatchID = 1,
                                        CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now),
                                        StartPulse = "1",
                                        NextPulse = "1"

                                    });

                                }

                            }

                        }
                    }
                }
            }
            catch (Exception ex)
            {
                UpdateError("UpdateRatesheetServer GetRatelistnexge  exception ", ex.Message, "ParellelRatesheetLogsy.txt", "", false);
            }
            UpdateError("UpdateRatesheetServer after GetRatelistnexge ", "", "ParellelRatesheetLogsy.txt", "RatesheetData Count:" + RatesheetData.Count, false);

            return RatesheetData;
        }

        public string GetRatelistparelleljerafilename(string path, int addminute, string createdon)
        {

            UpdateError("UpdateRatesheetServer before GetRatelistnexge ", path, "ParellelRatesheetLogsy.txt", "", false);
            List<Telebossratesheet> RatesheetData = new List<Telebossratesheet>();

            string OriginalName = DateTime.Now.ToString("yyyyMMddHHmmssffff") + ".csv";
            string files = "~/ReplaceRatesheet/" + OriginalName;
            string filename = HostingEnvironment.MapPath(files);



            try
            {
                int nCounter = 0;
                string country = null;
                int nColumn = 0;
                string[] arrContent = null;
                StreamReader sr = new StreamReader(path);
                using (CsvReader reader = new CsvReader(path))
                {
                    foreach (string[] RowsEnumeratorvalues in reader.RowEnumerator)
                    {
                        nCounter++;
                        country = "";

                        arrContent = RowsEnumeratorvalues;
                        int len = RowsEnumeratorvalues.Length;

                        if (len == 8)
                        {
                            arrContent[1] = Regex.Replace(arrContent[1], "[^0-9a-zA-Z]+", " ");

                            //Checking ratesheet is valid data or not
                            if (nCounter > 1)
                            {
                                if (!string.IsNullOrEmpty(arrContent[3].ToString())
                                   && !string.IsNullOrEmpty(arrContent[0].ToString()) && !string.IsNullOrEmpty(arrContent[2].ToString()))

                                {

                                    string effectiveon = Convert.ToDateTime(arrContent[4]).ToString("yyyy-MM-dd 00:00:00") + " +000";
                                    if (Convert.ToDateTime(arrContent[4]).ToString("yyyy-MM-dd 00:00:00") != DateTime.Now.ToString("yyyy-MM-dd 00:00:00"))
                                        effectiveon = Convert.ToDateTime(arrContent[4]).ToString("yyyy-MM-dd HH:mm:ss") + " +000";
                                    else
                                        effectiveon = Convert.ToDateTime(createdon).AddMinutes(addminute).ToString("yyyy-MM-dd HH:mm:ss") + " +000";

                                    RatesheetData.Add(new Telebossratesheet
                                    {
                                        Effective_on = effectiveon,
                                        Rate = arrContent[2],
                                        Regioncode = arrContent[0],
                                        Regionname = arrContent[1],
                                        Status = arrContent[3].ToString(),
                                        StartPulse = arrContent[5].ToString(),
                                        NextPulse = arrContent[6].ToString(),
                                        Enddate = arrContent[7].ToString()

                                    });

                                }


                            }
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                UpdateError("UpdateRatesheetServer GetRatelistnexge  exception ", ex.Message, "ParellelRatesheetLogsy.txt", "", false);
            }
            UpdateError("UpdateRatesheetServer after GetRatelistnexge ", "", "ParellelRatesheetLogsy.txt", "RatesheetData Count:" + RatesheetData.Count, false);

            CommonFunctions.ToCSVJera(RatesheetData.ToList(), filename);
            return filename;
        }
        public dynamic GetRatelistfuturenexge(string path)
        {

            UpdateError("UpdateRatesheetServer before GetRatelistnexge ", path, "ParellelRatesheetLogsy.txt", "", false);
            List<ngt_rateslist> RatesheetData = new List<ngt_rateslist>();

            try
            {


                int nCounter = 0;
                string country = null;
                int nColumn = 0;
                string[] arrContent = null;
                StreamReader sr = new StreamReader(path);
                using (CsvReader reader = new CsvReader(path))
                {
                    foreach (string[] RowsEnumeratorvalues in reader.RowEnumerator)
                    {
                        nCounter++;
                        country = "";

                        arrContent = RowsEnumeratorvalues;
                        int len = RowsEnumeratorvalues.Length;
                        arrContent[1] = Regex.Replace(arrContent[1], "[^0-9a-zA-Z]+", " ");

                        //Checking all rows in file have same number of column
                        if (arrContent.Length < nColumn)
                        {
                            sr.Close();
                            UpdateError("UpdateRatesheetServer GetRatelistnexge  arrContent.Length < nColumn  ", arrContent.Length.ToString(), "ParellelRatesheetLogsy.txt", nColumn.ToString(), false);

                            return RatesheetData;
                        }
                        else
                        {
                            //Checking ratesheet is valid data or not
                            if (nCounter > 1)
                            {

                                RatesheetData.Add(new ngt_rateslist
                                {
                                    Id = 1,
                                    Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now),
                                    Call_rate = Convert.ToDecimal(arrContent[2]),
                                    Grace_period = 1,
                                    Minimal_time = 1,
                                    Resolution = 1,
                                    ngt_region_codeId = 1,
                                    //shripal ngt_regionName = rate.Country_code,
                                    ngt_regionName = arrContent[0],
                                    Description = arrContent[1],
                                    Connection_charge = 1,
                                    Active = arrContent[3].ToString().ToUpper() == "FALSE" ? "A" : "B",
                                    Priority = 1,
                                    Trunck = "CLI",
                                    BatchID = 1,
                                    CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now),
                                    StartPulse = "1",
                                    NextPulse = "1"

                                });

                            }

                        }

                    }

                }
            }
            catch (Exception ex)
            {
                UpdateError("UpdateRatesheetServer GetRatelistnexge  exception ", ex.Message, "ParellelRatesheetLogsy.txt", "", false);
            }

            return RatesheetData;
        }

        public List<ngt_rateslist> GetRatelistRatesheet(string path)
        {

            UpdateError("UpdateRatesheetServer before GetRatelistnexge ", path, "ParellelRatesheetLogsy.txt", "", false);
            List<ngt_rateslist> RatesheetData = new List<ngt_rateslist>();

            try
            {


                int nCounter = 0;
                string country = null;
                int nColumn = 0;
                string[] arrContent = null;
                StreamReader sr = new StreamReader(path);
                using (CsvReader reader = new CsvReader(path))
                {
                    foreach (string[] RowsEnumeratorvalues in reader.RowEnumerator)
                    {
                        nCounter++;
                        country = "";

                        arrContent = RowsEnumeratorvalues;
                        int len = RowsEnumeratorvalues.Length;
                        if (len != 8)
                        {
                            UpdateError("UpdateRatesheetServer GetRatelistnexge len ", len.ToString(), "ParellelRatesheetLogsy.txt", "", false);

                            return RatesheetData;
                        }
                        arrContent[1] = Regex.Replace(arrContent[1], "[^0-9a-zA-Z]+", " ");

                        //Checking all rows in file have same number of column
                        if (arrContent.Length < nColumn)
                        {
                            sr.Close();
                            UpdateError("UpdateRatesheetServer GetRatelistnexge  arrContent.Length < nColumn  ", arrContent.Length.ToString(), "ParellelRatesheetLogsy.txt", nColumn.ToString(), false);

                            return RatesheetData;//new RatesheetResponse { status = "false", Message = "Error at Line No. " + nCounter };
                        }
                        else
                        {
                            //Checking ratesheet is valid data or not
                            if (nCounter > 1)
                            {
                                if (!string.IsNullOrEmpty(arrContent[3].ToString())
                                   && !string.IsNullOrEmpty(arrContent[0].ToString()) && !string.IsNullOrEmpty(arrContent[2].ToString()))

                                {
                                    if (string.IsNullOrEmpty(arrContent[4].ToString()) && !string.IsNullOrEmpty(arrContent[3].ToString()))
                                    {
                                        UpdateError("UpdateRatesheetServer GetRatelistnexge  string.IsNullOrEmpty(arrContent[4].ToString()) && !string.IsNullOrEmpty(arrContent[3].ToString())  ", arrContent[4].ToString(), "ParellelRatesheetLogsy.txt", arrContent[3].ToString(), false);

                                        return RatesheetData;
                                    }
                                    //try
                                    //{

                                    //    DateTime effectiveDate = Convert.ToDateTime(arrContent[4]);
                                    //    DateTime Enddate = Convert.ToDateTime(arrContent[7] == "" ? null : arrContent[7]);
                                    //    double ratess = Convert.ToDouble(arrContent[2]);
                                    //    string regionCodeName = arrContent[1].Replace('#', ' ').Replace(';', ' ').Replace('?', ' ').Replace('\\', ' ').Replace('/', ' ').Replace('^', ' ').Replace(')', ' ').Replace('(', ' ').Replace('_', ' ').Replace('&', ' ').Replace('"', ' ');
                                    //    string regionCode = arrContent[0];
                                    //    if (arrContent[3] == "Allowed" || arrContent[3] == "Blocked" || arrContent[3] == "Delete")
                                    //    {
                                    //        if (arrContent[3] == "Delete")
                                    //        {
                                    //            if (effectiveDate > Enddate && Enddate != Convert.ToDateTime(null))
                                    //            {

                                    //                return RatesheetData;
                                    //            }
                                    //            if (Enddate == Convert.ToDateTime(null))
                                    //            {

                                    //                return RatesheetData;
                                    //            }
                                    //        }
                                    //    }
                                    //    else
                                    //    {
                                    //        sr.Close();


                                    //        return RatesheetData;
                                    //    }

                                    //}
                                    //catch (Exception ex)
                                    //{
                                    //    sr.Close();


                                    //    return RatesheetData;
                                    //}


                                    //AllRegionCode.Add(new TestNew2() { code = arrContent[0], codeName = arrContent[1], effectiveDate = arrContent[4], nextPulse = arrContent[6], rate = arrContent[2], startPulse = arrContent[5], status = arrContent[3], endddate = arrContent[7] });

                                    RatesheetData.Add(new ngt_rateslist
                                    {
                                        Id = 1,
                                        Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", arrContent[4]),
                                        Call_rate = Convert.ToDecimal(arrContent[2]),
                                        Grace_period = 1,
                                        Minimal_time = 1,
                                        Resolution = 1,
                                        ngt_region_codeId = 1,
                                        //shripal ngt_regionName = rate.Country_code,
                                        ngt_regionName = arrContent[0],
                                        Description = arrContent[1],
                                        Connection_charge = 1,
                                        Active = arrContent[3].ToString().ToUpper() == "ALLOWED" ? "A" : "B",
                                        Priority = 1,
                                        Trunck = "CLI",
                                        BatchID = 1,
                                        CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now),
                                        StartPulse = "1",
                                        NextPulse = "1"

                                    });

                                }

                            }

                        }
                    }
                }
            }
            catch (Exception ex)
            {
                UpdateError("UpdateRatesheetServer GetRatelistnexge  exception ", ex.Message, "ParellelRatesheetLogsy.txt", "", false);
            }
            UpdateError("UpdateRatesheetServer after GetRatelistnexge ", "", "ParellelRatesheetLogsy.txt", "RatesheetData Count:" + RatesheetData.Count, false);

            return RatesheetData;
        }

        public List<Teleboss_Ratesheet_Rate_1> GetRatelistrates(string path, string RatesheetID, string batchid, string CreatedOn, int addminute)
        {

            // UpdateError("UpdateRatesheetServer before GetRatelistnexge ", path, "ParellelRatesheetLogsy.txt", "", false);
            CommonLog("UpdateRatesheetServer before GetRatelistnexge:   " + path);
            List<Teleboss_Ratesheet_Rate_1> RatesheetData = new List<Teleboss_Ratesheet_Rate_1>();

            try
            {

                int Id = 1;
                int nCounter = 0;
                string country = null;
                int nColumn = 0;
                string[] arrContent = null;
                StreamReader sr = new StreamReader(path);
                using (CsvReader reader = new CsvReader(path))
                {
                    foreach (string[] RowsEnumeratorvalues in reader.RowEnumerator)
                    {
                        nCounter++;
                        country = "";


                        arrContent = RowsEnumeratorvalues;
                        int len = RowsEnumeratorvalues.Length;
                        if (len != 8)
                        {
                            // UpdateError("UpdateRatesheetServer GetRatelistnexge len ", len.ToString(), "ParellelRatesheetLogsy.txt", "", false);
                            CommonLog("UpdateRatesheetServer GetRatelistnexge len:    " + len.ToString());

                            return RatesheetData;
                        }
                        arrContent[1] = Regex.Replace(arrContent[1], "[^0-9a-zA-Z]+", " ");

                        //Checking all rows in file have same number of column
                        if (arrContent.Length < nColumn)
                        {
                            sr.Close();
                            //  UpdateError("UpdateRatesheetServer GetRatelistnexge  arrContent.Length < nColumn  ", arrContent.Length.ToString(), "ParellelRatesheetLogsy.txt", nColumn.ToString(), false);
                            CommonLog("UpdateRatesheetServer GetRatelistnexge  arrContent.Length < nColumn:     " + arrContent.Length.ToString() + "   NColumn Count:   " + nColumn.ToString());

                            return RatesheetData;//new RatesheetResponse { status = "false", Message = "Error at Line No. " + nCounter };
                        }
                        else
                        {
                            //Checking ratesheet is valid data or not
                            if (nCounter > 1)
                            {
                                if (!string.IsNullOrEmpty(arrContent[3].ToString())
                                   && !string.IsNullOrEmpty(arrContent[0].ToString()) && !string.IsNullOrEmpty(arrContent[2].ToString()))

                                {
                                    if (string.IsNullOrEmpty(arrContent[4].ToString()) && !string.IsNullOrEmpty(arrContent[3].ToString()))
                                    {
                                        // UpdateError("UpdateRatesheetServer GetRatelistnexge  string.IsNullOrEmpty(arrContent[4].ToString()) && !string.IsNullOrEmpty(arrContent[3].ToString())  ", arrContent[4].ToString(), "ParellelRatesheetLogsy.txt", arrContent[3].ToString(), false);
                                        CommonLog("UpdateRatesheetServer GetRatelistnexge  string.IsNullOrEmpty(arrContent[4].ToString()) && !string.IsNullOrEmpty(arrContent[3].ToString()):    " + arrContent[4].ToString() + "Arrcontent[3]:     " + arrContent[3].ToString());


                                        return RatesheetData;
                                    }


                                    string effectiveon = Convert.ToDateTime(arrContent[4]).ToString("yyyy-MM-dd 00:00:00");
                                    if (Convert.ToDateTime(arrContent[4]).ToString("yyyy-MM-dd 00:00:00") != DateTime.Now.ToString("yyyy-MM-dd 00:00:00"))
                                        effectiveon = Convert.ToDateTime(arrContent[4]).ToString("yyyy-MM-dd HH:mm:ss");
                                    else
                                        effectiveon = Convert.ToDateTime(CreatedOn).AddMinutes(addminute).ToString("yyyy-MM-dd HH:mm:ss");

                                    RatesheetData.Add(new Teleboss_Ratesheet_Rate_1
                                    {
                                        Effective_on = effectiveon,
                                        Call_rate = arrContent[2].ToString(),
                                        From_day = "0",
                                        To_day = "0",
                                        From_hour = "0",
                                        To_hour = "0",
                                        //shripal ngt_regionName = rate.Country_code,
                                        Grace_period = "1",
                                        Minimal_time = "1",
                                        Resolution = "1",
                                        ngt_region_codeId = arrContent[0].ToString(),
                                        RatesheetID = RatesheetID,
                                        Description = arrContent[1].ToString(),
                                        Connection_charge = "1",
                                        Active = arrContent[3].ToString().ToUpper() == "ALLOWED" ? "A" : "B",
                                        ngt_PartitionId = "10",
                                        Priority = "1",
                                        Trunck = "CLI",
                                        BatchID = batchid,
                                        CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now),
                                        Start_Pulse = arrContent[5].ToString(),
                                        Next_Pulse = arrContent[6].ToString(),
                                        EndDate = arrContent[7].ToString().Trim() == "" ? "2500-01-01 00:00:00" : Convert.ToDateTime(arrContent[7]).ToString("yyyy-MM-dd 00:00:00"),
                                        RegionCode = arrContent[0],
                                        RegionName = arrContent[1],
                                        expireAt = arrContent[7].ToString().Trim() == "" ? Convert.ToDateTime(Convert.ToDateTime(arrContent[4]).ToString("2500-01-01 00:10:00")) : Convert.ToDateTime(Convert.ToDateTime(arrContent[7]).ToString("yyyy-MM-dd 00:10:00")).AddHours(-5).AddMinutes(-30)

                                    });

                                }

                            }

                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // UpdateError("UpdateRatesheetServer GetRatelistnexge  exception ", ex.Message, "ParellelRatesheetLogsy.txt", "", false);
                CommonLog("UpdateRatesheetServer GetRatelistnexge  exception:   " + ex.Message);

            }
            // UpdateError("UpdateRatesheetServer after GetRatelistnexge ", "", "ParellelRatesheetLogsy.txt", "RatesheetData Count:" + RatesheetData.Count, false);
            CommonLog("UpdateRatesheetServer after GetRatelistnexge:    " + RatesheetData.Count);

            return RatesheetData;
        }
        // Pasupathi Added For change Template sssss

        public sealed class CsvReader : System.IDisposable
        {
            public CsvReader(string fileName) : this(new FileStream(fileName, FileMode.Open, FileAccess.Read))
            {
            }

            public CsvReader(Stream stream)
            {
                __reader = new StreamReader(stream);
            }

            public System.Collections.IEnumerable RowEnumerator
            {
                get
                {
                    if (null == __reader)
                        throw new System.ApplicationException("I can't start reading without CSV input.");

                    __rowno = 0;
                    string sLine;
                    string sNextLine;

                    while (null != (sLine = __reader.ReadLine()))
                    {
                        while (rexRunOnLine.IsMatch(sLine) && null != (sNextLine = __reader.ReadLine()))
                            sLine += "\n" + sNextLine;

                        __rowno++;
                        string[] values = rexCsvSplitter.Split(sLine);

                        for (int i = 0; i < values.Length; i++)
                            values[i] = Csv.Unescape(values[i]);

                        yield return values;
                    }

                    __reader.Close();
                }
            }

            public long RowIndex { get { return __rowno; } }

            public void Dispose()
            {
                if (null != __reader) __reader.Dispose();
            }

            //============================================


            private long __rowno = 0;
            private TextReader __reader;
            private static Regex rexCsvSplitter = new Regex(@",(?=(?:[^""]*""[^""]*"")*(?![^""]*""))");
            private static Regex rexRunOnLine = new Regex(@"^[^""]*(?:""[^""]*""[^""]*)*""[^""]*$");
        }
        public static class Csv
        {
            public static string Escape(string s)
            {
                if (s.Contains(QUOTE))
                    s = s.Replace(QUOTE, ESCAPED_QUOTE);

                if (s.IndexOfAny(CHARACTERS_THAT_MUST_BE_QUOTED) > -1)
                    s = QUOTE + s + QUOTE;

                return s;
            }

            public static string Unescape(string s)
            {
                if (s.StartsWith(QUOTE) && s.EndsWith(QUOTE))
                {
                    s = s.Substring(1, s.Length - 2);

                    if (s.Contains(ESCAPED_QUOTE))
                        s = s.Replace(ESCAPED_QUOTE, QUOTE);
                }

                return s;
            }


            private const string QUOTE = "\"";
            private const string ESCAPED_QUOTE = "\"\"";
            private static char[] CHARACTERS_THAT_MUST_BE_QUOTED = { ',', '"', '\n' };
        }


        // End With pasupathi Code

        public bool replaceRatesheetInJera(string RatesheetId, byte[] RateFile, string RateSheetName, string azdate, string ServerIp, string UserName, string Password)
        {
            bool check = RateSheetName.Contains("delete");
            //   DateTime newazdate = Convert.ToDateTime(azdate);
            //   newazdate = newazdate.AddDays(-1);
            RateSheetName.Contains("delete");

            // azdate = string.Format("{0:yyyy-MM-dd HH:mm:ss}", newazdate);
            try
            {
                Password = Common.Decrypt(Password);
                RestClient restClient1 = new RestClient("https://" + ServerIp);
                restClient1.CookieContainer = new System.Net.CookieContainer();
                string URI = "/admin/";
                UpdateError("RatesheetPush Initialize", URI, "RatesheetLogs.txt", "", false);
                RestRequest wc = new RestRequest(URI, Method.POST);

                //  wc.Timeout = 90000000;
                // pasupathi addedd and commented previous line
                wc.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["WcTimeout"]);

                wc.AddHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
                wc.AddHeader("Accept-Encoding", "gzip, deflate");
                wc.AddHeader("Accept-Language", "en-us,en;q=0.5");
                wc.AddHeader("Host", ServerIp);
                wc.AddHeader("Referer", "https://" + ServerIp + "/admin/");
                wc.AddHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.3; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0");

                // wc.AddHeader("Connection","keep-alive");
                wc.AddHeader("Content-Length", "64");
                wc.AddParameter("auth[locale]", "en");
                wc.AddParameter("auth[login]", UserName);
                wc.AddParameter("auth[password]", Password);

                ServicePointManager.ServerCertificateValidationCallback =
        delegate (object s, X509Certificate certificate,
               X509Chain chain, SslPolicyErrors sslPolicyErrors)
        { return true; };

                // restClient1.Timeout = -1;
                // pasupathi addedd and commented previous line
                restClient1.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["RcTimeout"]);

                IRestResponse response1 = restClient1.Execute(wc);


                string URI1 = "/admin/rate_tables/importForm?id=" + RatesheetId;


                wc = new RestRequest(URI1, Method.POST);

                // wc.Timeout = 90000000;
                // pasupathi addedd and commented previous line
                wc.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["WcTimeout"]);

                wc.AddHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
                wc.AddHeader("Accept-Encoding", "gzip, deflate");
                wc.AddHeader("Accept-Language", "en-us,en;q=0.5");
                wc.AddHeader("Host", ServerIp);
                wc.AddHeader("Referer", "https://" + ServerIp + "/admin/");
                wc.AddHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.3; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0");

                wc.AddParameter("ids[0]", RatesheetId);
                wc.AddParameter("stage", "0");
                wc.AddParameter("delimiter", "auto");
                wc.AddParameter("id_templates_import", "10");
                wc.AddParameter("id_code_deck", "1");
                wc.AddParameter("duplicates", "update");
                wc.AddParameter("error_mode", "commit");
                wc.AddParameter("az_import", "1");
                wc.AddParameter("az_import_close", azdate + "+0000");
                wc.AddFile("file", RateFile, RateSheetName);


                ServicePointManager.ServerCertificateValidationCallback =
        delegate (object s, X509Certificate certificate,
               X509Chain chain, SslPolicyErrors sslPolicyErrors)
        { return true; };

                // restClient1.Timeout = -1;
                // pasupathi addedd and commented previous line
                restClient1.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["RcTimeout"]);

                IRestResponse response = restClient1.Execute(wc);
                response.Content.ToString();
                string temp = response.Content.ToString();
                string filename = getBetween(temp, "value=" + '"' + "ratesimport_", ".csv" + '"');
                filename = "ratesimport_" + filename + ".csv";
                URI1 = "/admin/rate_tables/importForm?id=" + RatesheetId;
                wc = new RestRequest(URI1, Method.POST);

                // wc.Timeout = 90000000;
                // pasupathi addedd and commented previous line
                wc.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["WcTimeout"]);

                wc.AddHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
                wc.AddHeader("Accept-Encoding", "gzip, deflate");
                wc.AddHeader("Accept-Language", "en-us,en;q=0.5");
                wc.AddHeader("Host", ServerIp);
                wc.AddHeader("Referer", "https://" + ServerIp + "/admin/");
                wc.AddHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.3; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0");


                wc.AddParameter("stage", "1");
                wc.AddParameter("id_code_decks", "1");
                wc.AddParameter("duplicates", "update");
                wc.AddParameter("error_mode", "commit");
                wc.AddParameter("az_import", "1");
                wc.AddParameter("az_import_close", azdate + "+0000");
                wc.AddParameter("action", "import");

                wc.AddParameter("id_time_profiles", "1");
                wc.AddParameter("grace_time", "0");
                wc.AddParameter("pay_setup", "0");
                wc.AddParameter("ids[0]", RatesheetId);

                wc.AddParameter("delimiter", "auto");
                wc.AddParameter("tmp_file", filename);
                wc.AddParameter("tmp_filepath", "/usr/local/vcs/tmp/" + filename);
                wc.AddParameter("tmp_filename", RateSheetName);
                wc.AddParameter("tmp_extension", "csv");
                wc.AddParameter("columns[0]", "code");
                wc.AddParameter("columns[1]", "code_name");
                wc.AddParameter("columns[2]", "rate_per_min");
                wc.AddParameter("columns[3]", "notes");

                if (check == true)
                {
                    wc.AddParameter("columns[4]", "effective_from");
                    wc.AddParameter("columns[7]", "end_date");
                }
                else
                    wc.AddParameter("columns[4]", "effective_from");

                wc.AddParameter("columns[5]", "min_time");
                wc.AddParameter("columns[6]", "pay_interval");
                wc.AddParameter("skip_rows[0]", "1");

                ServicePointManager.ServerCertificateValidationCallback =
        delegate (object s, X509Certificate certificate,
               X509Chain chain, SslPolicyErrors sslPolicyErrors)
        { return true; };

                // restClient1.Timeout = -1;
                // pasupathi addedd and commented previous line
                restClient1.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["RcTimeout"]);

                response = restClient1.Execute(wc);
                UpdateError("replaceRatesheetInJera function rates pushed ", "Message:" + response.ErrorMessage + ":", "RatesheetLogs.txt", "", false);
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    //  UpdateError("replaceRatesheetInJera function After rates pushed Success  ", response.StatusCode.ToString() + ":" + HttpStatusCode.OK.ToString(), "RatesheetLogs.txt", "", false);

                    return true;
                }
                else
                {
                    if (response.ErrorMessage.Contains("The operation has timed out."))
                    // && response.Server.Contains("Server Apache/2.2.15 (CentOS)"))
                    {
                        UpdateError("replaceRatesheetInJera function rates push :  Server Ratesheet id " + RatesheetId, response.Content.ToString() + " ErrorException " + response.ErrorException + " ErrorMessage " + response.ErrorMessage + " ResponseStatus " + response.ResponseStatus + " StatusDescription " + response.StatusDescription + " Server " + response.Server, "RatesheetLogs.txt", "", false);

                        return true;
                    }
                    UpdateError("replaceRatesheetInJera function rates push :  Server Ratesheet id " + RatesheetId, response.Content.ToString() + " ErrorException " + response.ErrorException + " ErrorMessage " + response.ErrorMessage + " ResponseStatus " + response.ResponseStatus + " StatusDescription " + response.StatusDescription + " Server " + response.Server, "RatesheetLogs.txt", "", false);
                    return false;
                }
            }
            catch (Exception ex)
            {
                UpdateError("replaceRatesheetInJera exception :  ", ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "", false);
                return false;
            }

        }



        public SuccessResponse CheckingCSVdownloadInJera(string ServerIp, string UserName, string Password)
        {

            //   DateTime newazdate = Convert.ToDateTime(azdate);
            //   newazdate = newazdate.AddDays(-1);

            SuccessResponse m = new SuccessResponse();
            // azdate = string.Format("{0:yyyy-MM-dd HH:mm:ss}", newazdate);
            try
            {

                RestClient restClient1 = new RestClient("https://" + ServerIp);
                restClient1.CookieContainer = new System.Net.CookieContainer();


                string URI = "/admin/";
                RestRequest wc = new RestRequest(URI, Method.POST);

                wc.AddHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
                wc.AddHeader("Accept-Encoding", "gzip, deflate");
                wc.AddHeader("Accept-Language", "en-us,en;q=0.5");
                wc.AddHeader("Host", "" + ServerIp);
                wc.AddHeader("Referer", "https://" + ServerIp + "/admin/");
                wc.AddHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.3; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0");

                // wc.AddHeader("Connection","keep-alive");
                wc.AddHeader("Content-Length", "64");
                wc.AddParameter("auth[locale]", "en");
                wc.AddParameter("auth[login]", UserName);
                wc.AddParameter("auth[password]", Password);

                ServicePointManager.ServerCertificateValidationCallback =
        delegate (object s, X509Certificate certificate,
               X509Chain chain, SslPolicyErrors sslPolicyErrors)
        { return true; };
                restClient1.Timeout = 3600000;
                IRestResponse response1 = restClient1.Execute(wc);

                string URI1 = "/admin/stats_origterm/process?query[process]=2&query[orderby]=&query[smartPeriod]=curDay&query[start_date]=2016-04-06&query[start_time]=00%3A00%3A00&query[stop_date]=2016-04-06&query[stop_time]=23%3A59%3A59&query[tz]=UTC&query[group_by_date]=&query[id_code_decks]=&query[id_currencies]=26&query[orig_id_companies]=&query[orig_id_groups]=&query[term_id_companies]=&query[term_id_groups]=&query[session_time_gte]=&query[session_time_lte]=&query[profit_percents_gte]=&query[profit_percents_lte]=&query[asr_cur_gte]=&query[asr_cur_lte]=&query[calls_notzero_gte]=&query[calls_notzero_lte]=&query[calls_total_gte]=&query[calls_total_lte]=&query[acd_cur_gte]=&query[acd_cur_lte]=&query[output]=csv&query[group_by][0]=&query[group_by][1]=&query[group_by][2]=&query[group_by][3]=&query[group_by][4]=&query[group_by][5]=&search[_q]=";


                wc = new RestRequest(URI1);
                string attachment = "attachment; filename=MyCsvLol.csv";
                wc.AddHeader("content-disposition", attachment);
                wc.AddHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
                wc.AddHeader("Accept-Encoding", "gzip, deflate");
                wc.AddHeader("Accept-Language", "en-us,en;q=0.5");
                wc.AddHeader("Host", "" + ServerIp);
                wc.AddHeader("Referer", "https://" + ServerIp + "/admin/");
                wc.AddHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.3; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0");

                wc.AddParameter("query[id_currencies]", "26");
                wc.AddParameter("query[output]", "csv");
                wc.AddParameter("query[smartPeriod]", "curDay");
                wc.AddParameter("query[start_date]", "2016-04-06");
                wc.AddParameter("query[start_time]", "00:00:00");
                wc.AddParameter("query[stop_date]", "2016-04-06");
                wc.AddParameter("query[stop_time]", "23:59:59");
                wc.AddParameter("query[tz]", "UTC");

                ServicePointManager.ServerCertificateValidationCallback =
        delegate (object s, X509Certificate certificate,
               X509Chain chain, SslPolicyErrors sslPolicyErrors)
        { return true; };

                restClient1.Timeout = 3600000;

                IRestResponse response = restClient1.Execute(wc);

                File.AppendAllText(HostingEnvironment.MapPath("~/Temp/B.csv"), response.Content.ToString());


            }
            catch (Exception ex)
            {
                UpdateError("replaceRatesheetInJera exception :  ", ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "", false);
                return m;
            }
            return m;

        }

        public bool updateRatesheetInJera(string RatesheetId, byte[] RateFile, string RateSheetName, string azdate, string ServerIp, string UserName, string Password)
        {
            try
            {

                bool check = RateSheetName.Contains("delete");
                Password = Common.Decrypt(Password);
                RestClient restClient1 = new RestClient("https://" + ServerIp);
                restClient1.CookieContainer = new System.Net.CookieContainer();
                string URI = "/admin/";
                RestRequest wc = new RestRequest(URI, Method.POST);

                //  wc.Timeout = 90000000;
                // pasupathi addedd and commented previous line
                wc.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["WcTimeout"]);

                wc.AddHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
                wc.AddHeader("Accept-Encoding", "gzip, deflate");
                wc.AddHeader("Accept-Language", "en-us,en;q=0.5");
                wc.AddHeader("Host", ServerIp);
                wc.AddHeader("Referer", "https://" + ServerIp + "/admin/");
                wc.AddHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.3; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0");

                // wc.AddHeader("Connection","keep-alive");
                wc.AddHeader("Content-Length", "64");
                wc.AddParameter("auth[locale]", "en");
                wc.AddParameter("auth[login]", UserName);
                wc.AddParameter("auth[password]", Password);

                ServicePointManager.ServerCertificateValidationCallback =
        delegate (object s, X509Certificate certificate,
               X509Chain chain, SslPolicyErrors sslPolicyErrors)
        { return true; };
                // restClient1.Timeout = 90000000;
                // restClient1.Timeout = -1;
                // pasupathi addedd and commented previous line
                restClient1.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["RcTimeout"]);

                IRestResponse response1 = restClient1.Execute(wc);


                string URI1 = "/admin/rate_tables/importForm?id=" + RatesheetId;


                wc = new RestRequest(URI1, Method.POST);

                // wc.Timeout = 90000000;
                // pasupathi addedd and commented previous line
                wc.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["WcTimeout"]);

                wc.AddHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
                wc.AddHeader("Accept-Encoding", "gzip, deflate");
                wc.AddHeader("Accept-Language", "en-us,en;q=0.5");
                wc.AddHeader("Host", ServerIp);
                wc.AddHeader("Referer", "https://" + ServerIp + "/admin/");
                wc.AddHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.3; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0");

                wc.AddParameter("ids[0]", RatesheetId);
                wc.AddParameter("stage", "0");
                wc.AddParameter("delimiter", "auto");
                wc.AddParameter("id_templates_import", "10");
                wc.AddParameter("id_code_deck", "1");
                wc.AddParameter("duplicates", "update");
                wc.AddParameter("error_mode", "commit");
                //  wc.AddParameter("az_import", "1");
                wc.AddParameter("az_import_close", azdate + "+0000");


                wc.AddFile("file", RateFile, RateSheetName);
                //wc.AddFile("file", ConfigurationManager.AppSettings["tempUrl"].ToString() + RateSheetName);

                //shripal


                ServicePointManager.ServerCertificateValidationCallback =
        delegate (object s, X509Certificate certificate,
               X509Chain chain, SslPolicyErrors sslPolicyErrors)
        { return true; };

                // restClient1.Timeout = 90000000;
                // restClient1.Timeout = -1;
                // pasupathi addedd and commented previous line
                restClient1.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["RcTimeout"]);

                IRestResponse response = restClient1.Execute(wc);
                response.Content.ToString();
                string temp = response.Content.ToString();
                // UpdateError("updateRatesheetInJera function CSV file attached :  ", response.Content.ToString(), "RatesheetLogs.txt", "", false);
                string filename = getBetween(temp, "value=" + '"' + "ratesimport_", ".csv" + '"');
                filename = "ratesimport_" + filename + ".csv";

                URI1 = "/admin/rate_tables/importForm?id=" + RatesheetId;


                wc = new RestRequest(URI1, Method.POST);

                // wc.Timeout = 90000000;
                // pasupathi addedd and commented previous line
                wc.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["WcTimeout"]);

                wc.AddHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
                wc.AddHeader("Accept-Encoding", "gzip, deflate");
                wc.AddHeader("Accept-Language", "en-us,en;q=0.5");
                wc.AddHeader("Host", ServerIp);
                wc.AddHeader("Referer", "https://" + ServerIp + "/admin/");
                wc.AddHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.3; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0");


                wc.AddParameter("stage", "1");
                wc.AddParameter("id_code_decks", "1");
                wc.AddParameter("duplicates", "update");
                wc.AddParameter("error_mode", "commit");
                // wc.AddParameter("az_import", "1");
                wc.AddParameter("az_import_close", azdate + "+0000");
                wc.AddParameter("action", "import");
                wc.AddParameter("id_templates_import", "10");
                wc.AddParameter("id_time_profiles", "1");
                wc.AddParameter("grace_time", "0");
                wc.AddParameter("pay_setup", "0");
                wc.AddParameter("ids[0]", RatesheetId);
                wc.AddParameter("stage", "1");
                wc.AddParameter("delimiter", "auto");
                wc.AddParameter("tmp_file", filename);
                wc.AddParameter("tmp_filepath", "/usr/local/vcs/tmp/" + filename);
                wc.AddParameter("tmp_filename", RateSheetName);
                wc.AddParameter("tmp_extension", "csv");
                wc.AddParameter("columns[0]", "code");
                wc.AddParameter("columns[1]", "code_name");
                wc.AddParameter("columns[2]", "rate_per_min");
                wc.AddParameter("columns[3]", "notes");


                if (check == true)
                {
                    wc.AddParameter("columns[7]", "end_date");
                    wc.AddParameter("columns[4]", "effective_from");
                }
                else
                    wc.AddParameter("columns[4]", "effective_from");

                wc.AddParameter("columns[5]", "min_time");
                wc.AddParameter("columns[6]", "pay_interval");
                wc.AddParameter("skip_rows[0]", "1");
                wc.AddParameter("tpl_name", "VCS Demo Template");
                // wc.AddParameter("import_result", '{'+'"'+"54"+'"'+":7}");



                ServicePointManager.ServerCertificateValidationCallback =
        delegate (object s, X509Certificate certificate,
               X509Chain chain, SslPolicyErrors sslPolicyErrors)
        { return true; };

                // restClient1.Timeout = 90000000;
                // restClient1.Timeout = -1;
                // pasupathi addedd and commented previous line
                restClient1.Timeout = Convert.ToInt32(ConfigurationManager.AppSettings["RcTimeout"]);

                response = restClient1.Execute(wc);
                UpdateError("updateRatesheetInJera function rates pushed   ", "", "RatesheetLogs.txt", "", false);
                if (response.StatusCode == HttpStatusCode.OK)
                {
                    return true;
                }
                else
                {
                    UpdateError("updateRatesheetInJera function rates push   ", response.Content.ToString(), "RatesheetLogs.txt", "", false);
                    return false;
                }
            }
            catch (Exception ex)
            {
                UpdateError("updateRatesheetInJera exception :  ", ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "", false);
                return false;
            }

        }
        public static string getBetween(string strSource, string strStart, string strEnd)
        {
            int Start, End;
            if (strSource.Contains(strStart) && strSource.Contains(strEnd))
            {
                Start = strSource.IndexOf(strStart, 0) + strStart.Length;
                End = strSource.IndexOf(strEnd, Start);
                return strSource.Substring(Start, End - Start);
            }
            else
            {
                return "";
            }
        }
        public SuccessResponse ReplaceRatesToDBandServer(Int32 newRateSheetId, string NewFleName2, string partitionid, int jobqueueID)
        {
            SuccessResponse responsemessage = new SuccessResponse();
            // try
            //  {

            //  string responsemessage = "";
            string laststatusis = "0";
            string csv_import_update = "temp" + NewFleName2;
            csv_import_update = csv_import_update.Substring(0, csv_import_update.Length - 4);
            int flag = 0; string dataStr = "";

            //  try
            //{
            // MySqlConnection conn = new MySqlConnection(ConfigurationManager.AppSettings["Connstring"]);
            MySqlConnection conn = new MySqlConnection(ConfigurationManager.ConnectionStrings["rmsconn"].ToString());
            try
            {
                conn.Open();

                //Replace code

                List<ratesheetservermap> listreplace = new List<ratesheetservermap>();
                listreplace = ViewRatesheetServerMappingfunction(0, newRateSheetId);
                if (listreplace == null)
                    UpdateError("ReplaceRatesToDBandServer View Ratesheet Server Mapping= No Mapping ", "", "RatesheetLogs.txt", "file name " + NewFleName2, false);
                if (listreplace != null)
                {
                    UpdateError("ReplaceRatesToDBandServer View Ratesheet Server Mapping= " + listreplace.Count, "", "RatesheetLogs.txt", "file name " + NewFleName2, false);
                    if (listreplace.Count > 0)
                    {
                        foreach (var a in listreplace)
                        {

                            SuccessResponse respos = new SuccessResponse();
                            SuccessResponse reqrespon = new SuccessResponse();

                            // respos = PushRatesheetToServer(a.ID, "Automatic", "Batch", "");
                            respos = ReplacePushRatesheetToServerNew(a.ID, "Automatic", "All", "", partitionid);
                            if (respos.status == "success")
                            {
                                //  reqrespon = UpdateRatesToserver(newRateSheetId, a.ID, Convert.ToInt32(laststatusis), "true", jobqueueID);
                            }
                            else
                            {
                                //  reqrespon = UpdateRatesToserver(newRateSheetId, a.ID, Convert.ToInt32(laststatusis), "false", jobqueueID);
                            }
                            laststatusis = "0";
                            // if (reqrespon.status == "true")
                            //   responsemessage.status = "true";
                            //  responsemessage.Message = responsemessage.Message + " " + reqrespon.Message;
                        }
                    }
                }

                string repsql = "update ngt_rates set Active='D' where  RateSheetId=" + newRateSheetId;
                MySqlCommand repcmd = new MySqlCommand(repsql, conn);
                int reprdr = repcmd.ExecuteNonQuery();

                if (reprdr != -1)
                    UpdateError("ReplaceRatesToDBandServer function deleted number of record =", reprdr.ToString(), "RatesheetLogs.txt", "", false);
                else
                    UpdateError("ReplaceRatesToDBandServer function deleted number of record fail ", reprdr.ToString(), "RatesheetLogs.txt", "", false);

                //update code

                string sql = "drop table IF EXISTS " + csv_import_update + ";CREATE TEMPORARY TABLE " + csv_import_update + "(ID int primary key auto_increment,code varchar(20),codename varchar(50),rate varchar(20),status varchar(20),date varchar(50),startpulse varchar(20),nextpulse varchar(20));";
                MySqlCommand cmd = new MySqlCommand(sql, conn);
                int rdr = cmd.ExecuteNonQuery();

                string query = "LOAD DATA INFILE '" + ConfigurationManager.AppSettings["tempUrl"].ToString() + NewFleName2 + "' INTO TABLE " + csv_import_update + " FIELDS TERMINATED BY ',' ENCLOSED BY '\"' LINES TERMINATED BY '\n' IGNORE 1 ROWS (code,codename,rate,status,date,startpulse,nextpulse);";
                MySqlCommand cmd22 = new MySqlCommand(query, conn);
                int rdr22 = cmd22.ExecuteNonQuery();
                if (rdr22 != -1)
                    UpdateError("ReplaceRatesToDBandServer function  filename", NewFleName2 + " LOAD DATA INFILE successfully", "RatesheetLogs.txt", "", false);
                else
                    UpdateError("ReplaceRatesToDBandServer function filename", NewFleName2 + "LOAD DATA INFILE fail", "RatesheetLogs.txt", "", false);

                cmd.Connection = conn;
                cmd.CommandText = "check_regionCodeUpdateNew";
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@csv_table1", csv_import_update);
                cmd.Parameters["@csv_table1"].Direction = ParameterDirection.Input;

                cmd.Parameters.AddWithValue("@partitionuserID", Convert.ToInt32(partitionid));
                cmd.Parameters["@partitionuserID"].Direction = ParameterDirection.Input;

                MySqlDataReader rdr2 = cmd.ExecuteReader();
                List<testNewservice> testrt = new List<testNewservice>();
                while (rdr2.Read())
                {
                    testrt.Add(new testNewservice() { code = rdr2[0].ToString(), codename = rdr2[1].ToString() });
                }
                rdr2.Close();
                UpdateError("ReplaceRatesToDBandServer function file name" + NewFleName2, "Number of new region code= " + testrt.Count, "RatesheetLogs.txt", "", false);
                if (testrt.Count > 0)
                {
                    for (int begin = 0; begin < testrt.Count; begin++)
                    {
                        string sql1 = "insert into ngt_region_code (Country_code, Area_code,description, ngt_region_code_groupId, ngt_PartitionId) values ('" + testrt[begin].code + "','','" + testrt[begin].codename + "','1'," + partitionid + ");"; //rdr2[0] + "','','" + rdr2[1] + "','1'," + partitionid + ");";
                        MySqlCommand cmd1 = new MySqlCommand(sql1, conn);
                        MySqlDataReader rdr1 = cmd1.ExecuteReader();
                        rdr1.Close();
                    }
                }
                //  cmd.Connection = conn;
                // cmd.CommandText = "insertRegionCode";
                // cmd.CommandType = CommandType.StoredProcedure;
                // cmd.Parameters.AddWithValue("@ngt_PartitionId", Convert.ToInt32(partitionid));
                //cmd.Parameters["@ngt_PartitionId"].Direction = ParameterDirection.Input;
                //  cmd.Parameters.Add("@result", SqlDbType.Int);
                //  cmd.Parameters["@result"].Direction = ParameterDirection.Output;

                try
                {

                    cmd.Connection = conn;
                    cmd.CommandText = "updatesRateNew";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@partitionId", Convert.ToInt32(partitionid));
                    cmd.Parameters["@partitionId"].Direction = ParameterDirection.Input;
                    cmd.Parameters.AddWithValue("@ratesheetId", Convert.ToInt32(newRateSheetId));
                    cmd.Parameters["@ratesheetId"].Direction = ParameterDirection.Input;
                    cmd.Parameters.AddWithValue("@csv_table", csv_import_update);
                    cmd.Parameters["@csv_table"].Direction = ParameterDirection.Input;
                    cmd.Parameters.AddWithValue("@ReqestType", "Replace");
                    cmd.Parameters["@ReqestType"].Direction = ParameterDirection.Input;
                    cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                    MySqlDataReader rdr3 = cmd.ExecuteReader();
                    //  while (rdr3.Read())
                    //  {
                    //      dataStr = rdr3[0].ToString();
                    //  }
                    dataStr = "1";
                    rdr3.Close();
                    //  conn.Close();
                }
                catch (Exception ex)
                {
                    // UpdateError("updateRateNew enter", ex.Message, "AddCompanyLogs.txt", "", false);
                    UpdateError("ReplaceRatesToDBandServer exception error " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "file name " + NewFleName2, false);
                    dataStr = "";
                }
                //}
                //finally
                //{
                //    conn.Close();
                //}
                //try
                //{
                //    FtpWebRequest request1 = (FtpWebRequest)WebRequest.Create(ConfigurationManager.AppSettings["ftpUrl"].ToString() + NewFleName2);
                //    request1.Method = WebRequestMethods.Ftp.DeleteFile;
                //    request1.Credentials = new NetworkCredential(ConfigurationManager.AppSettings["ftpUser"].ToString(), ConfigurationManager.AppSettings["ftpPassword"].ToString());
                //    FtpWebResponse response = (FtpWebResponse)request1.GetResponse();
                //    response.Close();
                //}
                //catch (Exception ex)
                //{

                //}

                SuccessResponse response11 = new SuccessResponse();
                if (dataStr != "")
                {
                    // response11 = UpdateRatesNew(newRateSheetId, updatedby, "true", "Update", jobqueueID);
                    response11 = UpdateRatesDB(newRateSheetId, "true", jobqueueID);

                    if (response11.status == "true")
                    {
                        laststatusis = response11.Value;



                        List<ratesheetservermap> list = new List<ratesheetservermap>();
                        list = ViewRatesheetServerMappingfunction(0, newRateSheetId);
                        if (list == null)
                            UpdateError("ReplaceRatesToDBandServer View Ratesheet Server Mapping= No Mapping ", "", "RatesheetLogs.txt", "file name " + NewFleName2, false);
                        if (list != null)
                        {
                            UpdateError("ReplaceRatesToDBandServer View Ratesheet Server Mapping= " + list.Count, "", "RatesheetLogs.txt", "file name " + NewFleName2, false);
                            if (list.Count > 0)
                            {
                                foreach (var a in list)
                                {

                                    SuccessResponse respos = new SuccessResponse();
                                    SuccessResponse reqrespon = new SuccessResponse();

                                    // respos = PushRatesheetToServer(a.ID, "Automatic", "Batch", "");
                                    respos = PushRatesheetToServerNew(a.ID, "Automatic", "Batch", "", partitionid);
                                    if (respos.status == "success")
                                    {
                                        reqrespon = UpdateRatesToserver(newRateSheetId, a.ID, Convert.ToInt32(laststatusis), "true", jobqueueID);
                                    }
                                    else
                                    {
                                        reqrespon = UpdateRatesToserver(newRateSheetId, a.ID, Convert.ToInt32(laststatusis), "false", jobqueueID);
                                    }
                                    laststatusis = "0";
                                    if (reqrespon.status == "true")
                                        responsemessage.status = "true";
                                    responsemessage.Message = responsemessage.Message + " " + reqrespon.Message;
                                }
                            }
                        }
                        else
                        {
                            response11 = UpdateRatesDB(newRateSheetId, "notmap", jobqueueID);
                            //  laststatusis = "0";
                            responsemessage.status = "false";
                            responsemessage.Message = responsemessage.Message + " " + response11.Message;
                        }



                    }

                }
                else
                {
                    response11 = UpdateRatesDB(newRateSheetId, "false", jobqueueID);
                    responsemessage.status = response11.status;
                    responsemessage.Message = response11.Message;
                }
                //response11 = UpdateRatesNew(newRateSheetId, updatedby, "fail", "Update", jobqueueID);
                try
                {
                    FtpWebRequest request1 = (FtpWebRequest)WebRequest.Create(ConfigurationManager.AppSettings["ftpUrl"].ToString() + NewFleName2);
                    request1.Method = WebRequestMethods.Ftp.DeleteFile;
                    request1.Credentials = new NetworkCredential(ConfigurationManager.AppSettings["ftpUser"].ToString(), ConfigurationManager.AppSettings["ftpPassword"].ToString());
                    FtpWebResponse response = (FtpWebResponse)request1.GetResponse();
                    response.Close();
                    flag = 1;
                }
                catch (Exception ex)
                {
                    flag = 0;
                    UpdateError("ReplaceRatesToDBandServer exception FTP ratesheet delete error " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "file name " + NewFleName2, false);
                }
            }
            catch (Exception ex)
            {
                UpdateError("ReplaceRatesToDBandServer exception error " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "", false);
                responsemessage.status = "false";
                responsemessage.Message = ex.Message;
                if (flag == 0)
                {
                    try
                    {
                        FtpWebRequest request1 = (FtpWebRequest)WebRequest.Create(ConfigurationManager.AppSettings["ftpUrl"].ToString() + NewFleName2);
                        request1.Method = WebRequestMethods.Ftp.DeleteFile;
                        request1.Credentials = new NetworkCredential(ConfigurationManager.AppSettings["ftpUser"].ToString(), ConfigurationManager.AppSettings["ftpPassword"].ToString());
                        FtpWebResponse response = (FtpWebResponse)request1.GetResponse();
                        response.Close();
                        flag = 1;
                    }
                    catch (Exception ex1)
                    {
                        flag = 0;
                        UpdateError("ReplaceRatesToDBandServer exception FTP ratesheet delete error in exception " + ex1.StackTrace, ex1.Message + "\n" + ex1.InnerException, "RatesheetLogs.txt", "file name " + NewFleName2, false);
                    }
                }

            }
            finally
            {
                conn.Close();
            }
            return responsemessage;
            //  }
            //   catch (Exception ex)
            //  {
            //     return null;
            // }
        }

        public Stream ShowsRatesReplace(int RatesheetID, string Type, string value, string regionCode, int partitionID)
        {
            try
            {
                List<ngt_rates> Ratelist = new List<ngt_rates>();
                List<ngt_rateslist> Ratelist1 = new List<ngt_rateslist>();
                using (rmsEntities rms = new rmsEntities())
                {
                    if (Type == "All")
                    {
                        if (value == "")
                        {

                            Ratelist = rms.ngt_rates.Where(e => e.RatesheetID == RatesheetID && e.Active != "N" && e.ngt_PartitionId == partitionID).ToList();

                        }

                        foreach (var rate in Ratelist)
                        {
                            Ratelist1.Add(new ngt_rateslist()
                            {
                                Id = rate.Id,
                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                Call_rate = rate.Call_rate,
                                Grace_period = rate.Grace_period,
                                Minimal_time = rate.Minimal_time,
                                Resolution = rate.Resolution,
                                ngt_region_codeId = rate.ngt_region_codeId,
                                //shripal ngt_regionName = rate.ngt_region_code.Country_code,
                                ngt_regionName = rate.ngt_region_code.Region_hash_code,
                                Description = rate.ngt_region_code.description,
                                Connection_charge = rate.Connection_charge,
                                Active = "D",//  rate.Active,
                                Priority = rate.Priority,
                                Trunck = rate.Trunck,
                                BatchID = rate.BatchID,
                                CreatedOn = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.CreatedOn),
                                StartPulse = rate.Start_Pulse.ToString(),
                                NextPulse = rate.Next_Pulse.ToString()
                            });
                        }


                        UpdateError("ShowsRatesReplace function call RatesheetID=" + RatesheetID + " Type=" + Type, "Total Record=" + Ratelist1.Count, "RatesheetLogs.txt", "", false);
                        return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, totalrecords = Ratelist1.Count, message = "Records Fetched" });
                    }
                    else
                    {
                        UpdateError("ShowsRatesReplace function call RatesheetID=" + RatesheetID + " Type=" + Type, "Total Record=" + Ratelist1.Count, "RatesheetLogs.txt", "", false);
                        return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "false", records = null, totalrecords = Ratelist1.Count, message = "Type should be effectiveon or Batch" });
                    }
                }
            }
            catch (Exception ex)
            {
                UpdateError("ShowsRatesReplace exception " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "ratesheet id" + RatesheetID, false);
                return RMSCDR.SerializeAndCreateMS(new Response() { status = "false", Message = ex.Message });
            }
            finally
            {
            }
        }

        public SuccessResponse ReplacePushRatesheetToServerNew(int MappingID, string Source, string type, string value, string partitionid)
        {
            SuccessResponse res = new SuccessResponse();
            int partitionID = 0;
            partitionID = Convert.ToInt32(partitionid);
            try
            {
                if (Source == "")
                {
                    Source = "Manual";
                }

                using (rmsEntities rms = new rmsEntities())
                {
                    var map = rms.server_ratesheet_map.SingleOrDefault(d => d.ID == MappingID);

                    if (map != null)
                    {
                        UpdateError("ReplacePushRatesheetToServerNew exception:- ", "ShowRatesRepllace Function calling Before Replace:ShowsRatesReplace", "RatesheetLogs.txt", "", false);
                        //shripal Stream stream = ShowRates(Convert.ToInt32(map.RatesheetID), type, value, "");
                        Stream stream = ShowsRatesReplace(Convert.ToInt32(map.RatesheetID), type, "", "", partitionID);

                        //Stream stream = ShowRatesNew(Convert.ToInt32(map.RatesheetID), type, value, "");


                        DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(ShowRatesheetRecords));
                        ShowRatesheetRecords ContactResponse = ser.ReadObject(stream) as ShowRatesheetRecords;


                        if (ContactResponse.status == "false")
                        {

                            RMSCDR.AddRmsLogs(string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now), map.Server_ID.ToString(), ContactResponse.status, ContactResponse.message, map.RatesheetID.ToString(), Source);


                            return new SuccessResponse() { status = "false", Message = "No Records To Push" };

                        }
                        else
                        {



                            var serverDetails = rms.server_details.SingleOrDefault(d => d.ServerID == map.Server_ID);
                            switch (serverDetails.ServerType)
                            {
                                case 1:
                                    //Old Nexge 

                                    res = OldNexege.OldNexgeUpload(serverDetails.ServerIp, serverDetails.Username, serverDetails.Password, "Update", "", map.ServerRatesheetName, map.PulseRule, map.Active, map.GracePeriod, ContactResponse.records);


                                    break;
                                case 2:
                                    //Jerasoft

                                    res = JeraApi1.PushRateSheetV2(ContactResponse.records, serverDetails.Username, serverDetails.Password, serverDetails.ServerIp, serverDetails.SummaryURL.Split(',')[0], map.ServerRatesheetName);
                                    UpdateError("PushRateSheetV2 function" + res.Message, res.status, "RatesheetLogs.txt", "", false);
                                    //res = NewNexgeUpload(serverDetails.Ipaddress, serverDetails.UserName, serverDetails.Password, actiontype, bpName, pulse, status, gracePeriod, useForTr, useForOr, planTypeCode, RatesheetName);
                                    break;
                                case 3:
                                    //New Nexege
                                    res = NewNexege.NewNexgeUpload(serverDetails.ServerIp, map.Description, serverDetails.Username, serverDetails.Password, "Update", map.ServerRatesheetName, map.ServerRatesheetID, map.PulseRule, map.Active, map.GracePeriod, map.CompanyType == 1 ? true : false, ContactResponse.records);

                                    break;
                                case 4:
                                    //VOS
                                    // res = NewNexgeUpload(serverDetails.Ipaddress, serverDetails.UserName, serverDetails.Password, actiontype, bpName, pulse, status, gracePeriod, useForTr, useForOr, planTypeCode, RatesheetName);
                                    break;
                                case 5:
                                    //New Nexege Test
                                    res = NewNexege.NewNexgeUpload(serverDetails.ServerIp, map.Description, serverDetails.Username, serverDetails.Password, "Update", map.ServerRatesheetName, map.ServerRatesheetID, map.PulseRule, map.Active, map.GracePeriod, map.CompanyType == 1 ? true : false, ContactResponse.records);


                                    break;
                                case 6:
                                    //Old Nexege Test

                                    res = OldNexege.OldNexgeUpload(serverDetails.ServerIp, serverDetails.Username, serverDetails.Password, "Update", "", map.ServerRatesheetName, map.PulseRule, map.Active, map.GracePeriod, ContactResponse.records);

                                    break;
                                case 7:
                                    //Jerasoft Test
                                    res = JeraApi1.PushRateSheetV2(ContactResponse.records, serverDetails.Username, serverDetails.Password, serverDetails.ServerIp, serverDetails.SummaryURL.Split(',')[0], map.ServerRatesheetName);

                                    UpdateError("PushRateSheetV2 function " + res.Message, res.status, "RatesheetLogs.txt", "", false);
                                    break;
                            }
                            RMSCDR.AddRmsLogs(string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now), map.Server_ID.ToString(), res.status, res.Message, map.RatesheetID.ToString(), Source);

                            return res;
                        }

                    }
                    else
                    {
                        return new SuccessResponse() { status = "false", Message = "Mapping Not Found" };
                    }
                }
            }
            catch (Exception ex)
            {
                UpdateError("ReplacePushRatesheetToServerNew exception " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", "", false);
                return new SuccessResponse() { status = "false", Message = ex.Message };
            }
            finally
            {

            }
        }

        public SuccessResponse LoadLiveExistsRatesService(int PartitionId)
        {
            SuccessResponse responsemessage = new SuccessResponse();

            //  try
            //{
            //   MySqlConnection conn = new MySqlConnection(ConfigurationManager.AppSettings["Connstring"]);
            MySqlConnection conn = new MySqlConnection(ConfigurationManager.ConnectionStrings["rmsconn"].ToString());
            try
            {
                conn.Open();
                MySqlCommand cmd = new MySqlCommand();

                cmd.Connection = conn;
                cmd.CommandText = "moveRates";
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@partitionId", Convert.ToInt32(PartitionId));
                cmd.Parameters["@partitionId"].Direction = ParameterDirection.Input;
                cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                MySqlDataReader rdr3 = cmd.ExecuteReader();
                rdr3.Close();
                // conn.Close();
                responsemessage.status = "true";
                responsemessage.Message = "Rates successfully transfer.";
                // }
                // finally
                //  {
                //      conn.Close();
                //  }
            }
            catch (Exception ex)
            {
                UpdateError("LoadLiveExistsRates function exception error " + ex.StackTrace, ex.Message + "\n" + ex.InnerException, "RatesheetLogs.txt", DateTime.Now.ToString(), false);
                responsemessage.status = "false";
                responsemessage.Message = ex.Message;
            }
            finally
            {
                conn.Close();
            }
            return responsemessage;
        }

        //shripal





        //added by chaitanya devteam

        /// <summary>
        /// 
        /// </summary>
        /// <param name="RatesheetID">Ratesheetid</param>
        /// <param name="Type">type of search</param>
        /// <param name="value">specified datetime</param>
        /// <param name="regionCode">regioncode</param>
        /// <returns></returns>
        ///  
        public Stream ShowRatesNgtcom(int RatesheetID, string Type, string value, string regionCode, string Searchtype)
        {
            MySqlConnection con = new MySqlConnection(ConfigurationManager.ConnectionStrings["rmsconn"].ToString());
            try
            {
                List<ngt_rates> Ratelist = new List<ngt_rates>();
                List<ngt_rateslist> Ratelist1 = new List<ngt_rateslist>();
                List<ratesresult> ratesresultList = new List<ratesresult>();

                MySqlCommand cmd = new MySqlCommand();
                // MySqlConnection con = new MySqlConnection(ConfigurationManager.AppSettings["Connstring"].ToString());

                con.Open();
                MySqlDataReader dr;


                using (rmsEntities rms = new rmsEntities())
                {

                    string cntrlQuery = "select * from ngt_rates_controller;";
                    cmd.CommandText = cntrlQuery;
                    cmd.Connection = con;
                    cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                    MySqlDataReader cntrlrdr = cmd.ExecuteReader();

                    int tableid = 1;
                    string tablename = "";
                    while (cntrlrdr.Read())
                    {
                        tableid = Convert.ToInt32(cntrlrdr["cntrl"]);
                    }
                    cntrlrdr.Close();
                    if (tableid == 1)
                    {
                        if (Type == "CurrentRate")
                            tablename = "ngt_rates";
                        else
                            tablename = "ngt_rates_1";

                    }
                    else
                    {
                        if (Type == "CurrentRate")
                            tablename = "ngt_rates";
                        else
                            tablename = "ngt_rates_2";
                    }

                    if (Type == "CurrentRate")
                    {
                        if (value == "")
                        {
                            string ab = "";
                            if (regionCode == "")
                            {
                                //// Old code Pasupathi commented
                                //ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from " + tablename + " ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' order by nrc.country_code asc";

                                //// New code Pasupathi created
                                //ab = "select ncr.Id,max(ncr.Effective_on) as Effective_on,max(ncr.Call_rate) as Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,max(ncr.ngt_region_codeId) as ngt_region_codeId,max(ncr.RatesheetID) as RatesheetID,ncr.Connection_charge,max(ncr.Active) as Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,max(ncr.BatchID) as BatchID,max(nrc.Country_code) as Country_code,max(nrc.description) as description,max(ncr.CreatedOn) as CreatedOn,max(ncr.Start_Pulse) as Start_Pulse,max(ncr.Next_Pulse) as Next_Pulse,max(nrc.Region_hash_code) as Region_hash_code from " + tablename + " ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' group by nrc.country_code order by nrc.country_code asc";

                                ab = "select ncr.Id,max(ncr.Effective_on) as Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID ,nrc.Country_code,nrc.description,max(ncr.CreatedOn) as CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from   " + tablename + "  ncr left join ngt_region_code nrc on ncr.ngt_region_codeid = nrc.id where ncr.RatesheetID = " + RatesheetID + "   and ncr.Active != 'N'   and ncr.BatchID in(select max(BatchID) from ngt_rates where  RatesheetID = " + RatesheetID + "  order by  BatchID desc  ) group by nrc.country_code,ncr.Call_rate order by nrc.country_code asc";



                                //  ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                            }
                            else
                            {
                                if (Searchtype == "Exact")

                                    //// Old code Pasupathi commented
                                    //ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from " + tablename + " ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and nrc.Region_hash_code ='" + regionCode + "' order by  nrc.country_code asc";

                                    //// New code Pasupathi
                                    //ab = "select ncr.Id,max(ncr.Effective_on) as Effective_on,max(ncr.Call_rate) as Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,max(ncr.ngt_region_codeId) as ngt_region_codeId,max(ncr.RatesheetID) as RatesheetID,ncr.Connection_charge,max(ncr.Active) as Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,max(ncr.BatchID) as BatchID,max(nrc.Country_code) as Country_code,max(nrc.description) as description,max(ncr.CreatedOn) as CreatedOn,max(ncr.Start_Pulse) as Start_Pulse,max(ncr.Next_Pulse) as Next_Pulse,max(nrc.Region_hash_code) as Region_hash_code from " + tablename + " ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and nrc.Region_hash_code ='" + regionCode + "' group by nrc.country_code order by  nrc.country_code asc";
                                    ab = "select ncr.Id,max(ncr.Effective_on) as Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID ,nrc.Country_code,nrc.description,max(ncr.CreatedOn) as CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from   " + tablename + "  ncr left join ngt_region_code nrc on ncr.ngt_region_codeid = nrc.id where ncr.RatesheetID = " + RatesheetID + "   and ncr.Active != 'N' and nrc.Region_hash_code ='" + regionCode + "'  and ncr.BatchID in(select max(BatchID) from ngt_rates where  RatesheetID = " + RatesheetID + "  order by  BatchID desc  ) group by nrc.country_code,ncr.Call_rate order by nrc.country_code asc";
                                else

                                    //// Old code Pasupathi commented
                                    //ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from " + tablename + " ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and nrc.Region_hash_code like'" + regionCode + "%' order by nrc.country_code asc";

                                    //// New code Pasupathi
                                    //ab = "select ncr.Id,max(ncr.Effective_on) as Effective_on,max(ncr.Call_rate) as Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,max(ncr.ngt_region_codeId) as ngt_region_codeId,max(ncr.RatesheetID) as RatesheetID,ncr.Connection_charge,max(ncr.Active) as Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,max(ncr.BatchID) as BatchID,max(nrc.Country_code) as Country_code,max(nrc.description) as description,max(ncr.CreatedOn) as CreatedOn,max(ncr.Start_Pulse) as Start_Pulse,max(ncr.Next_Pulse) as Next_Pulse,max(nrc.Region_hash_code) as Region_hash_code from " + tablename + " ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and nrc.Region_hash_code like'" + regionCode + "%' group by nrc.country_code order by nrc.country_code asc";



                                    ab = "select ncr.Id,max(ncr.Effective_on) as Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID ,nrc.Country_code,nrc.description,max(ncr.CreatedOn) as CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from   " + tablename + "  ncr left join ngt_region_code nrc on ncr.ngt_region_codeid = nrc.id where ncr.RatesheetID = " + RatesheetID + "   and ncr.Active != 'N' and nrc.Region_hash_code like'" + regionCode + "%'  and ncr.BatchID in(select max(BatchID) from ngt_rates where  RatesheetID = " + RatesheetID + "  order by  BatchID desc  ) group by nrc.country_code,ncr.Call_rate order by nrc.country_code asc";
                                // ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                            }

                            cmd.CommandText = ab;
                            cmd.Connection = con;
                            cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                            MySqlDataReader rdr = cmd.ExecuteReader();
                            //   List<testNewservice> testrt = new List<testNewservice>();
                            while (rdr.Read())
                            {
                                ratesresultList.Add(new ratesresult() { Id = Convert.ToInt32(rdr["Id"]), Effective_on = Convert.ToDateTime(rdr["Effective_on"].ToString()), Call_rate = Convert.ToDecimal(rdr["Call_rate"]), Grace_period = Convert.ToInt32(rdr["Grace_period"]), Minimal_time = Convert.ToInt32(rdr["Minimal_time"]), Resolution = Convert.ToInt32(rdr["Resolution"]), ngt_region_codeId = Convert.ToInt32(rdr["ngt_region_codeId"]), Country_code = Convert.ToString(rdr["Country_code"]), description = Convert.ToString(rdr["description"]), Connection_charge = Convert.ToDecimal(rdr["Connection_charge"]), Active = Convert.ToString(rdr["Active"]), Priority = Convert.ToInt32(rdr["Priority"]), Trunck = Convert.ToString(rdr["Trunck"]), BatchID = Convert.ToInt32(rdr["BatchID"]), CreatedOn = Convert.ToString(rdr["CreatedOn"]), Start_Pulse = Convert.ToString(rdr["Start_Pulse"]), Next_Pulse = Convert.ToString(rdr["Next_Pulse"]), Region_hash_code = Convert.ToString(rdr["Region_hash_code"]) });
                            }
                            rdr.Close();

                            foreach (var rate in ratesresultList)
                            {

                                Ratelist1.Add(new ngt_rateslist()
                                {
                                    Id = rate.Id,
                                    Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                    Call_rate = rate.Call_rate,
                                    Grace_period = rate.Grace_period,
                                    Minimal_time = rate.Minimal_time,
                                    Resolution = rate.Resolution,
                                    ngt_region_codeId = rate.ngt_region_codeId,
                                    ngt_regionName = rate.Region_hash_code,
                                    Description = rate.description,
                                    Connection_charge = rate.Connection_charge,
                                    Active = rate.Active,
                                    Priority = rate.Priority,
                                    Trunck = rate.Trunck,
                                    BatchID = rate.BatchID,
                                    CreatedOn = rate.CreatedOn,
                                    StartPulse = rate.Start_Pulse,
                                    NextPulse = rate.Next_Pulse
                                });

                            }
                        }



                        return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, totalrecords = Ratelist1.Count, message = "Records Fetched" });
                    }

                    else if (Type == "effectiveon")
                    {
                        if (value == "")
                        {
                            string ab = "";
                            if (regionCode == "")
                            {
                                ab = "select ncr.Id,max(ncr.Effective_on) as Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,max(ncr.BatchID) as BatchID,nrc.Country_code,nrc.description,max(ncr.CreatedOn) as CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' order by nrc.country_code asc";
                                //  ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                            }
                            else
                            {


                                if (Searchtype == "Exact")

                                    ab = "select ncr.Id,max(ncr.Effective_on) as Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,max(ncr.BatchID) as BatchID,nrc.Country_code,nrc.description,max(ncr.CreatedOn) as CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and nrc.Region_hash_code ='" + regionCode + "' order by nrc.country_code asc";

                                else
                                    ab = "select ncr.Id,max(ncr.Effective_on) as Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,max(ncr.BatchID) as BatchID,nrc.Country_code,nrc.description,max(ncr.CreatedOn) as CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and nrc.Region_hash_code like'" + regionCode + "%' order by nrc.country_code asc";

                                // ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                            }

                            cmd.CommandText = ab;
                            cmd.Connection = con;
                            cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                            MySqlDataReader rdr = cmd.ExecuteReader();
                            //   List<testNewservice> testrt = new List<testNewservice>();
                            while (rdr.Read())
                            {
                                ratesresultList.Add(new ratesresult() { Id = Convert.ToInt32(rdr["Id"]), Effective_on = Convert.ToDateTime(rdr["Effective_on"].ToString()), Call_rate = Convert.ToDecimal(rdr["Call_rate"]), Grace_period = Convert.ToInt32(rdr["Grace_period"]), Minimal_time = Convert.ToInt32(rdr["Minimal_time"]), Resolution = Convert.ToInt32(rdr["Resolution"]), ngt_region_codeId = Convert.ToInt32(rdr["ngt_region_codeId"]), Country_code = Convert.ToString(rdr["Country_code"]), description = Convert.ToString(rdr["description"]), Connection_charge = Convert.ToDecimal(rdr["Connection_charge"]), Active = Convert.ToString(rdr["Active"]), Priority = Convert.ToInt32(rdr["Priority"]), Trunck = Convert.ToString(rdr["Trunck"]), BatchID = Convert.ToInt32(rdr["BatchID"]), CreatedOn = Convert.ToString(rdr["CreatedOn"]), Start_Pulse = Convert.ToString(rdr["Start_Pulse"]), Next_Pulse = Convert.ToString(rdr["Next_Pulse"]), Region_hash_code = Convert.ToString(rdr["Region_hash_code"]) });
                            }
                            rdr.Close();

                            foreach (var rate in ratesresultList)
                            {

                                Ratelist1.Add(new ngt_rateslist()
                                {
                                    Id = rate.Id,
                                    Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                    Call_rate = rate.Call_rate,
                                    Grace_period = rate.Grace_period,
                                    Minimal_time = rate.Minimal_time,
                                    Resolution = rate.Resolution,
                                    ngt_region_codeId = rate.ngt_region_codeId,
                                    ngt_regionName = rate.Region_hash_code,
                                    Description = rate.description,
                                    Connection_charge = rate.Connection_charge,
                                    Active = rate.Active,
                                    Priority = rate.Priority,
                                    Trunck = rate.Trunck,
                                    BatchID = rate.BatchID,
                                    CreatedOn = rate.CreatedOn,
                                    StartPulse = rate.Start_Pulse,
                                    NextPulse = rate.Next_Pulse
                                });

                            }
                        }
                        else
                        {
                            DateTime effectiveon = Convert.ToDateTime(value);
                            if (regionCode == "")
                            {
                                string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";

                                cmd.CommandText = ab;
                                cmd.Connection = con;
                                cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                                MySqlDataReader rdr = cmd.ExecuteReader();
                                //   List<testNewservice> testrt = new List<testNewservice>();
                                while (rdr.Read())
                                {
                                    ratesresultList.Add(new ratesresult() { Id = Convert.ToInt32(rdr["Id"]), Effective_on = Convert.ToDateTime(rdr["Effective_on"].ToString()), Call_rate = Convert.ToDecimal(rdr["Call_rate"]), Grace_period = Convert.ToInt32(rdr["Grace_period"]), Minimal_time = Convert.ToInt32(rdr["Minimal_time"]), Resolution = Convert.ToInt32(rdr["Resolution"]), ngt_region_codeId = Convert.ToInt32(rdr["ngt_region_codeId"]), Country_code = Convert.ToString(rdr["Country_code"]), description = Convert.ToString(rdr["description"]), Connection_charge = Convert.ToDecimal(rdr["Connection_charge"]), Active = Convert.ToString(rdr["Active"]), Priority = Convert.ToInt32(rdr["Priority"]), Trunck = Convert.ToString(rdr["Trunck"]), BatchID = Convert.ToInt32(rdr["BatchID"]), CreatedOn = Convert.ToString(rdr["CreatedOn"]), Start_Pulse = Convert.ToString(rdr["Start_Pulse"]), Next_Pulse = Convert.ToString(rdr["Next_Pulse"]), Region_hash_code = Convert.ToString(rdr["Region_hash_code"]) });
                                }
                                rdr.Close();




                                // var a = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                                foreach (var rate in ratesresultList)
                                {
                                    if (rate.Active == "D")
                                    {
                                        if (rate.Effective_on.Date == effectiveon.Date)
                                        {
                                            Ratelist1.Add(new ngt_rateslist()
                                            {
                                                Id = rate.Id,
                                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                                Call_rate = rate.Call_rate,
                                                Grace_period = rate.Grace_period,
                                                Minimal_time = rate.Minimal_time,
                                                Resolution = rate.Resolution,
                                                ngt_region_codeId = rate.ngt_region_codeId,
                                                ngt_regionName = rate.Region_hash_code,
                                                Description = rate.description,
                                                Connection_charge = rate.Connection_charge,
                                                Active = rate.Active,
                                                Priority = rate.Priority,
                                                Trunck = rate.Trunck,
                                                BatchID = rate.BatchID,
                                                CreatedOn = rate.CreatedOn,
                                                StartPulse = rate.Start_Pulse,
                                                NextPulse = rate.Next_Pulse
                                            });
                                        }
                                    }
                                    else
                                    {
                                        Ratelist1.Add(new ngt_rateslist()
                                        {
                                            Id = rate.Id,
                                            Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                            Call_rate = rate.Call_rate,
                                            Grace_period = rate.Grace_period,
                                            Minimal_time = rate.Minimal_time,
                                            Resolution = rate.Resolution,
                                            ngt_region_codeId = rate.ngt_region_codeId,
                                            ngt_regionName = rate.Region_hash_code,
                                            Description = rate.description,
                                            Connection_charge = rate.Connection_charge,
                                            Active = rate.Active,
                                            Priority = rate.Priority,
                                            Trunck = rate.Trunck,
                                            BatchID = rate.BatchID,
                                            CreatedOn = rate.CreatedOn,
                                            StartPulse = rate.Start_Pulse,
                                            NextPulse = rate.Next_Pulse
                                        });
                                    }
                                }
                            }
                            else
                            {
                                string ab = null;
                                if (Searchtype == "Exact")
                                {

                                    ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid = nrc.id where ncr.RatesheetID = " + RatesheetID + " and ncr.Active != 'N' and nrc.Region_hash_code = '" + regionCode + "' and ncr.effective_on = (select max(effective_on) from ngt_rates where ngt_region_codeId = nrc.id and effective_on<= '" + value + "' and Active!= 'N' and RatesheetID = " + RatesheetID + ")order by nrc.country_code asc";
                                }




                                else
                                    ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid = nrc.id where ncr.RatesheetID = " + RatesheetID + " and ncr.Active != 'N' and nrc.Region_hash_code like '" + regionCode + "%' and ncr.effective_on = (select max(effective_on) from ngt_rates where ngt_region_codeId = nrc.id and effective_on<= '" + value + "' and Active!= 'N' and RatesheetID = " + RatesheetID + ")order by nrc.country_code asc";



                                // var a = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                                cmd.CommandText = ab;
                                cmd.Connection = con;
                                cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                                MySqlDataReader rdr = cmd.ExecuteReader();
                                //   List<testNewservice> testrt = new List<testNewservice>();
                                while (rdr.Read())
                                {
                                    ratesresultList.Add(new ratesresult() { Id = Convert.ToInt32(rdr["Id"]), Effective_on = Convert.ToDateTime(rdr["Effective_on"].ToString()), Call_rate = Convert.ToDecimal(rdr["Call_rate"]), Grace_period = Convert.ToInt32(rdr["Grace_period"]), Minimal_time = Convert.ToInt32(rdr["Minimal_time"]), Resolution = Convert.ToInt32(rdr["Resolution"]), ngt_region_codeId = Convert.ToInt32(rdr["ngt_region_codeId"]), Country_code = Convert.ToString(rdr["Country_code"]), description = Convert.ToString(rdr["description"]), Connection_charge = Convert.ToDecimal(rdr["Connection_charge"]), Active = Convert.ToString(rdr["Active"]), Priority = Convert.ToInt32(rdr["Priority"]), Trunck = Convert.ToString(rdr["Trunck"]), BatchID = Convert.ToInt32(rdr["BatchID"]), CreatedOn = Convert.ToString(rdr["CreatedOn"]), Start_Pulse = Convert.ToString(rdr["Start_Pulse"]), Next_Pulse = Convert.ToString(rdr["Next_Pulse"]), Region_hash_code = Convert.ToString(rdr["Region_hash_code"]) });
                                }
                                rdr.Close();

                                foreach (var rate in ratesresultList)
                                {
                                    if (rate.Active == "D")
                                    {
                                        if (rate.Effective_on.Date == effectiveon.Date)
                                        {
                                            Ratelist1.Add(new ngt_rateslist()
                                            {
                                                Id = rate.Id,
                                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                                Call_rate = rate.Call_rate,
                                                Grace_period = rate.Grace_period,
                                                Minimal_time = rate.Minimal_time,
                                                Resolution = rate.Resolution,
                                                ngt_region_codeId = rate.ngt_region_codeId,
                                                ngt_regionName = rate.Region_hash_code,
                                                Description = rate.description,
                                                Connection_charge = rate.Connection_charge,
                                                Active = rate.Active,
                                                Priority = rate.Priority,
                                                Trunck = rate.Trunck,
                                                BatchID = rate.BatchID,
                                                CreatedOn = rate.CreatedOn,
                                                StartPulse = rate.Start_Pulse,
                                                NextPulse = rate.Next_Pulse
                                            });
                                        }
                                    }
                                    else
                                    {
                                        Ratelist1.Add(new ngt_rateslist()
                                        {
                                            Id = rate.Id,
                                            Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                            Call_rate = rate.Call_rate,
                                            Grace_period = rate.Grace_period,
                                            Minimal_time = rate.Minimal_time,
                                            Resolution = rate.Resolution,
                                            ngt_region_codeId = rate.ngt_region_codeId,
                                            ngt_regionName = rate.Region_hash_code,
                                            Description = rate.description,
                                            Connection_charge = rate.Connection_charge,
                                            Active = rate.Active,
                                            Priority = rate.Priority,
                                            Trunck = rate.Trunck,
                                            BatchID = rate.BatchID,
                                            CreatedOn = rate.CreatedOn,
                                            StartPulse = rate.Start_Pulse,
                                            NextPulse = rate.Next_Pulse
                                        });
                                    }
                                }
                            }
                        }

                        return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, totalrecords = Ratelist1.Count, message = "Records Fetched" });
                    }
                    else if (Type == "Batch")
                    {
                        string ab = "";
                        if (value == "")
                        {

                            if (regionCode == "")
                            {
                                ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' order by nrc.country_code asc";
                                // ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                            }
                            else
                            {
                                if (Searchtype == "Exact")

                                    ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and nrc.Region_hash_code ='" + regionCode + "' order by nrc.country_code asc";
                                else
                                    ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and nrc.Region_hash_code like'" + regionCode + "%' order by nrc.country_code asc";
                                // ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                            }



                        }
                        else
                        {
                            int Batch = Convert.ToInt32(value);
                            if (regionCode == "")
                            {
                                ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.BatchID=" + Batch + " and ncr.Active!='N' order by nrc.country_code asc";
                                // ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                            }
                            else
                            {
                                if (Searchtype == "Exact")
                                    ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.BatchID=" + Batch + " and ncr.Active!='N' and nrc.Region_hash_code ='" + regionCode + " ' order by nrc.country_code asc";

                                else
                                    ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.BatchID=" + Batch + " and ncr.Active!='N' and nrc.Region_hash_code like'" + regionCode + "%' order by nrc.country_code asc";
                                // ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                            }

                        }
                        cmd.CommandText = ab;
                        cmd.Connection = con;
                        cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                        MySqlDataReader rdr = cmd.ExecuteReader();
                        //   List<testNewservice> testrt = new List<testNewservice>();
                        while (rdr.Read())
                        {
                            ratesresultList.Add(new ratesresult() { Id = Convert.ToInt32(rdr["Id"]), Effective_on = Convert.ToDateTime(rdr["Effective_on"].ToString()), Call_rate = Convert.ToDecimal(rdr["Call_rate"]), Grace_period = Convert.ToInt32(rdr["Grace_period"]), Minimal_time = Convert.ToInt32(rdr["Minimal_time"]), Resolution = Convert.ToInt32(rdr["Resolution"]), ngt_region_codeId = Convert.ToInt32(rdr["ngt_region_codeId"]), Country_code = Convert.ToString(rdr["Country_code"]), description = Convert.ToString(rdr["description"]), Connection_charge = Convert.ToDecimal(rdr["Connection_charge"]), Active = Convert.ToString(rdr["Active"]), Priority = Convert.ToInt32(rdr["Priority"]), Trunck = Convert.ToString(rdr["Trunck"]), BatchID = Convert.ToInt32(rdr["BatchID"]), CreatedOn = Convert.ToString(rdr["CreatedOn"]), Start_Pulse = Convert.ToString(rdr["Start_Pulse"]), Next_Pulse = Convert.ToString(rdr["Next_Pulse"]), Region_hash_code = Convert.ToString(rdr["Region_hash_code"]) });
                        }
                        rdr.Close();

                        foreach (var rate in ratesresultList)
                        {
                            Ratelist1.Add(new ngt_rateslist()
                            {
                                Id = rate.Id,
                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                Call_rate = rate.Call_rate,
                                Grace_period = rate.Grace_period,
                                Minimal_time = rate.Minimal_time,
                                Resolution = rate.Resolution,
                                ngt_region_codeId = rate.ngt_region_codeId,
                                ngt_regionName = rate.Region_hash_code,
                                Description = rate.description,
                                Connection_charge = rate.Connection_charge,
                                Active = rate.Active,
                                Priority = rate.Priority,
                                Trunck = rate.Trunck,
                                BatchID = rate.BatchID,
                                CreatedOn = rate.CreatedOn,
                                StartPulse = rate.Start_Pulse,
                                NextPulse = rate.Next_Pulse
                            });
                        }
                        return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, totalrecords = Ratelist1.Count, message = "Records Fetched" });
                    }
                    else
                    {
                        return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "false", records = null, totalrecords = Ratelist1.Count, message = "Type should be effectiveon or Batch" });
                    }
                }
                con.Close();
            }
            catch (Exception ex)
            {
                return RMSCDR.SerializeAndCreateMS(new Response() { status = "false", Message = ex.Message });
            }
            finally
            {
                con.Close();
            }
        }

        /// <summary>
        /// added by chaitanya 31-01-2017
        /// </summary>
        /// <param name="RatesheetID"></param>
        /// <param name="Type"></param>
        /// <param name="value"></param>
        /// <param name="regionCode"></param>
        /// <param name="Searchtype"></param>
        /// <returns></returns>

        public Stream ShowRatesNgtcom_v2(int RatesheetID, string Type, string value, string regionCode, string Searchtype)
        {
            MySqlConnection con = new MySqlConnection(ConfigurationManager.ConnectionStrings["rmsconn"].ToString());
            try
            {
                List<ngt_rates> Ratelist = new List<ngt_rates>();
                List<ngt_rateslist> Ratelist1 = new List<ngt_rateslist>();
                List<ratesresult> ratesresultList = new List<ratesresult>();
                MySqlCommand cmd = new MySqlCommand();
                con.Open();
                MySqlDataReader dr;
                using (rmsEntities rms = new rmsEntities())
                {

                    string cntrlQuery = "select * from ngt_rates_controller;";
                    cmd.CommandText = cntrlQuery;
                    cmd.Connection = con;
                    cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                    MySqlDataReader cntrlrdr = cmd.ExecuteReader();

                    int tableid = 1;
                    string tablename = "";
                    while (cntrlrdr.Read())
                    {
                        tableid = Convert.ToInt32(cntrlrdr["cntrl"]);
                    }
                    cntrlrdr.Close();
                    if (tableid == 1)
                    {
                        if (Type == "CurrentRate")
                            tablename = "ngt_rates";
                        else
                            tablename = "ngt_rates_1";

                    }
                    else
                    {
                        if (Type == "CurrentRate")
                            tablename = "ngt_rates";
                        else
                            tablename = "ngt_rates_2";
                    }

                    if (Type == "CurrentRate")
                    {
                        string regionlist = "";
                        if (value == "")
                        {
                            string ab = "";
                            using (rmsEntities rmser = new rmsEntities())
                            {
                                List<RegioncodeId> lstregioncodeid = rmser.Database.SqlQuery<RegioncodeId>("select max(BatchID) as Bid,max(nr.Id) as RegionDBId from " + tablename + " nr left join ngt_region_code nc on nr.ngt_region_codeid = nc.id  where nr.RatesheetID =  " + RatesheetID + "   and nr.Active != 'N' group by nc.Region_hash_code;").ToList();



                                //string newList = lstregioncodeid.Select(x => string.Format(x.RegionDBId.ToString(), x.RegionDBId)).ToString();

                                regionlist = string.Join(",", lstregioncodeid.Select(p => p.RegionDBId.ToString()));
                            }
                            if (regionCode == "")
                            {
                                ab = "select ncr.Id,ncr.Effective_on as Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID ,nrc.Country_code,nrc.description,ncr.CreatedOn as CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from   " + tablename + "  ncr left join ngt_region_code nrc on ncr.ngt_region_codeid = nrc.id  where ncr.Id in(" + regionlist + ") order by nrc.country_code asc";
                            }
                            else
                            {
                                if (Searchtype == "Exact")

                                    //// Old code Pasupathi commented
                                    //ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from " + tablename + " ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and nrc.Region_hash_code ='" + regionCode + "' order by  nrc.country_code asc";

                                    //// New code Pasupathi
                                    //ab = "select ncr.Id,max(ncr.Effective_on) as Effective_on,max(ncr.Call_rate) as Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,max(ncr.ngt_region_codeId) as ngt_region_codeId,max(ncr.RatesheetID) as RatesheetID,ncr.Connection_charge,max(ncr.Active) as Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,max(ncr.BatchID) as BatchID,max(nrc.Country_code) as Country_code,max(nrc.description) as description,max(ncr.CreatedOn) as CreatedOn,max(ncr.Start_Pulse) as Start_Pulse,max(ncr.Next_Pulse) as Next_Pulse,max(nrc.Region_hash_code) as Region_hash_code from " + tablename + " ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and nrc.Region_hash_code ='" + regionCode + "' group by nrc.country_code order by  nrc.country_code asc";
                                    ab = "select ncr.Id,ncr.Effective_on as Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID ,nrc.Country_code,nrc.description,ncr.CreatedOn as CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from   " + tablename + "  ncr left join ngt_region_code nrc on ncr.ngt_region_codeid = nrc.id where  nrc.Region_hash_code ='" + regionCode + "'  and  ncr.Id in(" + regionlist + ") order by nrc.country_code asc";
                                else

                                    //// Old code Pasupathi commented
                                    //ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from " + tablename + " ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and nrc.Region_hash_code like'" + regionCode + "%' order by nrc.country_code asc";

                                    //// New code Pasupathi
                                    //ab = "select ncr.Id,max(ncr.Effective_on) as Effective_on,max(ncr.Call_rate) as Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,max(ncr.ngt_region_codeId) as ngt_region_codeId,max(ncr.RatesheetID) as RatesheetID,ncr.Connection_charge,max(ncr.Active) as Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,max(ncr.BatchID) as BatchID,max(nrc.Country_code) as Country_code,max(nrc.description) as description,max(ncr.CreatedOn) as CreatedOn,max(ncr.Start_Pulse) as Start_Pulse,max(ncr.Next_Pulse) as Next_Pulse,max(nrc.Region_hash_code) as Region_hash_code from " + tablename + " ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and nrc.Region_hash_code like'" + regionCode + "%' group by nrc.country_code order by nrc.country_code asc";

                                    //select max(BatchID),nr.Id,nc.Region_hash_code from ngt_rates nr left join ngt_region_code nc on nr.ngt_region_codeid = nc.id  where nr.RatesheetID = 865  group by nc.Region_hash_code;


                                    ab = "select ncr.Id,ncr.Effective_on as Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID ,nrc.Country_code,nrc.description,ncr.CreatedOn as CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from   " + tablename + "  ncr left join ngt_region_code nrc on ncr.ngt_region_codeid = nrc.id where ncr.RatesheetID = " + RatesheetID + "   and ncr.Active != 'N' and nrc.Region_hash_code like'" + regionCode + "%'    and  ncr.Id in(" + regionlist + ") order by nrc.country_code asc";
                                // ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                            }

                            cmd.CommandText = ab;
                            cmd.Connection = con;
                            cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                            MySqlDataReader rdr = cmd.ExecuteReader();
                            //   List<testNewservice> testrt = new List<testNewservice>();
                            while (rdr.Read())
                            {
                                ratesresultList.Add(new ratesresult() { Id = Convert.ToInt32(rdr["Id"]), Effective_on = Convert.ToDateTime(rdr["Effective_on"].ToString()), Call_rate = Convert.ToDecimal(rdr["Call_rate"]), Grace_period = Convert.ToInt32(rdr["Grace_period"]), Minimal_time = Convert.ToInt32(rdr["Minimal_time"]), Resolution = Convert.ToInt32(rdr["Resolution"]), ngt_region_codeId = Convert.ToInt32(rdr["ngt_region_codeId"]), Country_code = Convert.ToString(rdr["Country_code"]), description = Convert.ToString(rdr["description"]), Connection_charge = Convert.ToDecimal(rdr["Connection_charge"]), Active = Convert.ToString(rdr["Active"]), Priority = Convert.ToInt32(rdr["Priority"]), Trunck = Convert.ToString(rdr["Trunck"]), BatchID = Convert.ToInt32(rdr["BatchID"]), CreatedOn = Convert.ToString(rdr["CreatedOn"]), Start_Pulse = Convert.ToString(rdr["Start_Pulse"]), Next_Pulse = Convert.ToString(rdr["Next_Pulse"]), Region_hash_code = Convert.ToString(rdr["Region_hash_code"]) });
                            }
                            rdr.Close();

                            foreach (var rate in ratesresultList)
                            {

                                Ratelist1.Add(new ngt_rateslist()
                                {
                                    Id = rate.Id,
                                    Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                    Call_rate = rate.Call_rate,
                                    Grace_period = rate.Grace_period,
                                    Minimal_time = rate.Minimal_time,
                                    Resolution = rate.Resolution,
                                    ngt_region_codeId = rate.ngt_region_codeId,
                                    ngt_regionName = rate.Region_hash_code,
                                    Description = rate.description,
                                    Connection_charge = rate.Connection_charge,
                                    Active = rate.Active,
                                    Priority = rate.Priority,
                                    Trunck = rate.Trunck,
                                    BatchID = rate.BatchID,
                                    CreatedOn = rate.CreatedOn,
                                    StartPulse = rate.Start_Pulse,
                                    NextPulse = rate.Next_Pulse
                                });

                            }
                        }



                        return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, totalrecords = Ratelist1.Count, message = "Records Fetched" });
                    }

                    else if (Type == "effectiveon")
                    {
                        if (value == "")
                        {
                            string ab = "";
                            if (regionCode == "")
                            {
                                ab = "select ncr.Id,max(ncr.Effective_on) as Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,max(ncr.BatchID) as BatchID,nrc.Country_code,nrc.description,max(ncr.CreatedOn) as CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' order by nrc.country_code asc";
                                //  ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                            }
                            else
                            {


                                if (Searchtype == "Exact")

                                    ab = "select ncr.Id,max(ncr.Effective_on) as Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,max(ncr.BatchID) as BatchID,nrc.Country_code,nrc.description,max(ncr.CreatedOn) as CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and nrc.Region_hash_code ='" + regionCode + "' order by nrc.country_code asc";

                                else
                                    ab = "select ncr.Id,max(ncr.Effective_on) as Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,max(ncr.BatchID) as BatchID,nrc.Country_code,nrc.description,max(ncr.CreatedOn) as CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and nrc.Region_hash_code like'" + regionCode + "%' order by nrc.country_code asc";

                                // ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                            }

                            cmd.CommandText = ab;
                            cmd.Connection = con;
                            cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                            MySqlDataReader rdr = cmd.ExecuteReader();
                            //   List<testNewservice> testrt = new List<testNewservice>();
                            while (rdr.Read())
                            {
                                ratesresultList.Add(new ratesresult() { Id = Convert.ToInt32(rdr["Id"]), Effective_on = Convert.ToDateTime(rdr["Effective_on"].ToString()), Call_rate = Convert.ToDecimal(rdr["Call_rate"]), Grace_period = Convert.ToInt32(rdr["Grace_period"]), Minimal_time = Convert.ToInt32(rdr["Minimal_time"]), Resolution = Convert.ToInt32(rdr["Resolution"]), ngt_region_codeId = Convert.ToInt32(rdr["ngt_region_codeId"]), Country_code = Convert.ToString(rdr["Country_code"]), description = Convert.ToString(rdr["description"]), Connection_charge = Convert.ToDecimal(rdr["Connection_charge"]), Active = Convert.ToString(rdr["Active"]), Priority = Convert.ToInt32(rdr["Priority"]), Trunck = Convert.ToString(rdr["Trunck"]), BatchID = Convert.ToInt32(rdr["BatchID"]), CreatedOn = Convert.ToString(rdr["CreatedOn"]), Start_Pulse = Convert.ToString(rdr["Start_Pulse"]), Next_Pulse = Convert.ToString(rdr["Next_Pulse"]), Region_hash_code = Convert.ToString(rdr["Region_hash_code"]) });
                            }
                            rdr.Close();

                            foreach (var rate in ratesresultList)
                            {

                                Ratelist1.Add(new ngt_rateslist()
                                {
                                    Id = rate.Id,
                                    Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                    Call_rate = rate.Call_rate,
                                    Grace_period = rate.Grace_period,
                                    Minimal_time = rate.Minimal_time,
                                    Resolution = rate.Resolution,
                                    ngt_region_codeId = rate.ngt_region_codeId,
                                    ngt_regionName = rate.Region_hash_code,
                                    Description = rate.description,
                                    Connection_charge = rate.Connection_charge,
                                    Active = rate.Active,
                                    Priority = rate.Priority,
                                    Trunck = rate.Trunck,
                                    BatchID = rate.BatchID,
                                    CreatedOn = rate.CreatedOn,
                                    StartPulse = rate.Start_Pulse,
                                    NextPulse = rate.Next_Pulse
                                });

                            }
                        }
                        else
                        {
                            DateTime effectiveon = Convert.ToDateTime(value);
                            if (regionCode == "")
                            {
                                string ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and ncr.effective_on= (select max(effective_on) from ngt_rates where ngt_region_codeId=nrc.id and effective_on<='" + value + "' and Active!='N' and RatesheetID=" + RatesheetID + ")order by nrc.country_code asc";

                                cmd.CommandText = ab;
                                cmd.Connection = con;
                                cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                                MySqlDataReader rdr = cmd.ExecuteReader();
                                //   List<testNewservice> testrt = new List<testNewservice>();
                                while (rdr.Read())
                                {
                                    ratesresultList.Add(new ratesresult() { Id = Convert.ToInt32(rdr["Id"]), Effective_on = Convert.ToDateTime(rdr["Effective_on"].ToString()), Call_rate = Convert.ToDecimal(rdr["Call_rate"]), Grace_period = Convert.ToInt32(rdr["Grace_period"]), Minimal_time = Convert.ToInt32(rdr["Minimal_time"]), Resolution = Convert.ToInt32(rdr["Resolution"]), ngt_region_codeId = Convert.ToInt32(rdr["ngt_region_codeId"]), Country_code = Convert.ToString(rdr["Country_code"]), description = Convert.ToString(rdr["description"]), Connection_charge = Convert.ToDecimal(rdr["Connection_charge"]), Active = Convert.ToString(rdr["Active"]), Priority = Convert.ToInt32(rdr["Priority"]), Trunck = Convert.ToString(rdr["Trunck"]), BatchID = Convert.ToInt32(rdr["BatchID"]), CreatedOn = Convert.ToString(rdr["CreatedOn"]), Start_Pulse = Convert.ToString(rdr["Start_Pulse"]), Next_Pulse = Convert.ToString(rdr["Next_Pulse"]), Region_hash_code = Convert.ToString(rdr["Region_hash_code"]) });
                                }
                                rdr.Close();




                                // var a = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                                foreach (var rate in ratesresultList)
                                {
                                    if (rate.Active == "D")
                                    {
                                        if (rate.Effective_on.Date == effectiveon.Date)
                                        {
                                            Ratelist1.Add(new ngt_rateslist()
                                            {
                                                Id = rate.Id,
                                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                                Call_rate = rate.Call_rate,
                                                Grace_period = rate.Grace_period,
                                                Minimal_time = rate.Minimal_time,
                                                Resolution = rate.Resolution,
                                                ngt_region_codeId = rate.ngt_region_codeId,
                                                ngt_regionName = rate.Region_hash_code,
                                                Description = rate.description,
                                                Connection_charge = rate.Connection_charge,
                                                Active = rate.Active,
                                                Priority = rate.Priority,
                                                Trunck = rate.Trunck,
                                                BatchID = rate.BatchID,
                                                CreatedOn = rate.CreatedOn,
                                                StartPulse = rate.Start_Pulse,
                                                NextPulse = rate.Next_Pulse
                                            });
                                        }
                                    }
                                    else
                                    {
                                        Ratelist1.Add(new ngt_rateslist()
                                        {
                                            Id = rate.Id,
                                            Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                            Call_rate = rate.Call_rate,
                                            Grace_period = rate.Grace_period,
                                            Minimal_time = rate.Minimal_time,
                                            Resolution = rate.Resolution,
                                            ngt_region_codeId = rate.ngt_region_codeId,
                                            ngt_regionName = rate.Region_hash_code,
                                            Description = rate.description,
                                            Connection_charge = rate.Connection_charge,
                                            Active = rate.Active,
                                            Priority = rate.Priority,
                                            Trunck = rate.Trunck,
                                            BatchID = rate.BatchID,
                                            CreatedOn = rate.CreatedOn,
                                            StartPulse = rate.Start_Pulse,
                                            NextPulse = rate.Next_Pulse
                                        });
                                    }
                                }
                            }
                            else
                            {
                                string ab = null;
                                if (Searchtype == "Exact")
                                {

                                    ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid = nrc.id where ncr.RatesheetID = " + RatesheetID + " and ncr.Active != 'N' and nrc.Region_hash_code = '" + regionCode + "' and ncr.effective_on = (select max(effective_on) from ngt_rates where ngt_region_codeId = nrc.id and effective_on<= '" + value + "' and Active!= 'N' and RatesheetID = " + RatesheetID + ")order by nrc.country_code asc";
                                }




                                else
                                    ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid = nrc.id where ncr.RatesheetID = " + RatesheetID + " and ncr.Active != 'N' and nrc.Region_hash_code like '" + regionCode + "%' and ncr.effective_on = (select max(effective_on) from ngt_rates where ngt_region_codeId = nrc.id and effective_on<= '" + value + "' and Active!= 'N' and RatesheetID = " + RatesheetID + ")order by nrc.country_code asc";



                                // var a = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                                cmd.CommandText = ab;
                                cmd.Connection = con;
                                cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                                MySqlDataReader rdr = cmd.ExecuteReader();
                                //   List<testNewservice> testrt = new List<testNewservice>();
                                while (rdr.Read())
                                {
                                    ratesresultList.Add(new ratesresult() { Id = Convert.ToInt32(rdr["Id"]), Effective_on = Convert.ToDateTime(rdr["Effective_on"].ToString()), Call_rate = Convert.ToDecimal(rdr["Call_rate"]), Grace_period = Convert.ToInt32(rdr["Grace_period"]), Minimal_time = Convert.ToInt32(rdr["Minimal_time"]), Resolution = Convert.ToInt32(rdr["Resolution"]), ngt_region_codeId = Convert.ToInt32(rdr["ngt_region_codeId"]), Country_code = Convert.ToString(rdr["Country_code"]), description = Convert.ToString(rdr["description"]), Connection_charge = Convert.ToDecimal(rdr["Connection_charge"]), Active = Convert.ToString(rdr["Active"]), Priority = Convert.ToInt32(rdr["Priority"]), Trunck = Convert.ToString(rdr["Trunck"]), BatchID = Convert.ToInt32(rdr["BatchID"]), CreatedOn = Convert.ToString(rdr["CreatedOn"]), Start_Pulse = Convert.ToString(rdr["Start_Pulse"]), Next_Pulse = Convert.ToString(rdr["Next_Pulse"]), Region_hash_code = Convert.ToString(rdr["Region_hash_code"]) });
                                }
                                rdr.Close();

                                foreach (var rate in ratesresultList)
                                {
                                    if (rate.Active == "D")
                                    {
                                        if (rate.Effective_on.Date == effectiveon.Date)
                                        {
                                            Ratelist1.Add(new ngt_rateslist()
                                            {
                                                Id = rate.Id,
                                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                                Call_rate = rate.Call_rate,
                                                Grace_period = rate.Grace_period,
                                                Minimal_time = rate.Minimal_time,
                                                Resolution = rate.Resolution,
                                                ngt_region_codeId = rate.ngt_region_codeId,
                                                ngt_regionName = rate.Region_hash_code,
                                                Description = rate.description,
                                                Connection_charge = rate.Connection_charge,
                                                Active = rate.Active,
                                                Priority = rate.Priority,
                                                Trunck = rate.Trunck,
                                                BatchID = rate.BatchID,
                                                CreatedOn = rate.CreatedOn,
                                                StartPulse = rate.Start_Pulse,
                                                NextPulse = rate.Next_Pulse
                                            });
                                        }
                                    }
                                    else
                                    {
                                        Ratelist1.Add(new ngt_rateslist()
                                        {
                                            Id = rate.Id,
                                            Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                            Call_rate = rate.Call_rate,
                                            Grace_period = rate.Grace_period,
                                            Minimal_time = rate.Minimal_time,
                                            Resolution = rate.Resolution,
                                            ngt_region_codeId = rate.ngt_region_codeId,
                                            ngt_regionName = rate.Region_hash_code,
                                            Description = rate.description,
                                            Connection_charge = rate.Connection_charge,
                                            Active = rate.Active,
                                            Priority = rate.Priority,
                                            Trunck = rate.Trunck,
                                            BatchID = rate.BatchID,
                                            CreatedOn = rate.CreatedOn,
                                            StartPulse = rate.Start_Pulse,
                                            NextPulse = rate.Next_Pulse
                                        });
                                    }
                                }
                            }
                        }

                        return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, totalrecords = Ratelist1.Count, message = "Records Fetched" });
                    }
                    else if (Type == "Batch")
                    {
                        string ab = "";
                        if (value == "")
                        {

                            if (regionCode == "")
                            {
                                ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' order by nrc.country_code asc";
                                // ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                            }
                            else
                            {
                                if (Searchtype == "Exact")

                                    ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and nrc.Region_hash_code ='" + regionCode + "' order by nrc.country_code asc";
                                else
                                    ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.RatesheetID=" + RatesheetID + " and ncr.Active!='N' and nrc.Region_hash_code like'" + regionCode + "%' order by nrc.country_code asc";
                                // ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                            }



                        }
                        else
                        {
                            int Batch = Convert.ToInt32(value);
                            if (regionCode == "")
                            {
                                ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.BatchID=" + Batch + " and ncr.Active!='N' order by nrc.country_code asc";
                                // ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                            }
                            else
                            {
                                if (Searchtype == "Exact")
                                    ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.BatchID=" + Batch + " and ncr.Active!='N' and nrc.Region_hash_code ='" + regionCode + " ' order by nrc.country_code asc";

                                else
                                    ab = "select ncr.Id,ncr.Effective_on,ncr.Call_rate,ncr.Grace_period,ncr.Minimal_time,ncr.Resolution,ncr.ngt_region_codeId,ncr.RatesheetID,ncr.Connection_charge,ncr.Active,ncr.ngt_PartitionId,ncr.Priority,ncr.Trunck,ncr.BatchID,nrc.Country_code,nrc.description,ncr.CreatedOn,ncr.Start_Pulse,ncr.Next_Pulse,nrc.Region_hash_code from ngt_rates ncr left join ngt_region_code nrc on ncr.ngt_region_codeid=nrc.id where ncr.BatchID=" + Batch + " and ncr.Active!='N' and nrc.Region_hash_code like'" + regionCode + "%' order by nrc.country_code asc";
                                // ratesresultList = rms.Database.SqlQuery<ratesresult>(ab).ToList();
                            }

                        }
                        cmd.CommandText = ab;
                        cmd.Connection = con;
                        cmd.CommandTimeout = Convert.ToInt32(ConfigurationManager.AppSettings["ConnTimeOut"]);
                        MySqlDataReader rdr = cmd.ExecuteReader();
                        //   List<testNewservice> testrt = new List<testNewservice>();
                        while (rdr.Read())
                        {
                            ratesresultList.Add(new ratesresult() { Id = Convert.ToInt32(rdr["Id"]), Effective_on = Convert.ToDateTime(rdr["Effective_on"].ToString()), Call_rate = Convert.ToDecimal(rdr["Call_rate"]), Grace_period = Convert.ToInt32(rdr["Grace_period"]), Minimal_time = Convert.ToInt32(rdr["Minimal_time"]), Resolution = Convert.ToInt32(rdr["Resolution"]), ngt_region_codeId = Convert.ToInt32(rdr["ngt_region_codeId"]), Country_code = Convert.ToString(rdr["Country_code"]), description = Convert.ToString(rdr["description"]), Connection_charge = Convert.ToDecimal(rdr["Connection_charge"]), Active = Convert.ToString(rdr["Active"]), Priority = Convert.ToInt32(rdr["Priority"]), Trunck = Convert.ToString(rdr["Trunck"]), BatchID = Convert.ToInt32(rdr["BatchID"]), CreatedOn = Convert.ToString(rdr["CreatedOn"]), Start_Pulse = Convert.ToString(rdr["Start_Pulse"]), Next_Pulse = Convert.ToString(rdr["Next_Pulse"]), Region_hash_code = Convert.ToString(rdr["Region_hash_code"]) });
                        }
                        rdr.Close();

                        foreach (var rate in ratesresultList)
                        {
                            Ratelist1.Add(new ngt_rateslist()
                            {
                                Id = rate.Id,
                                Effective_on = String.Format("{0:yyyy-MM-dd HH:mm:ss}", rate.Effective_on),
                                Call_rate = rate.Call_rate,
                                Grace_period = rate.Grace_period,
                                Minimal_time = rate.Minimal_time,
                                Resolution = rate.Resolution,
                                ngt_region_codeId = rate.ngt_region_codeId,
                                ngt_regionName = rate.Region_hash_code,
                                Description = rate.description,
                                Connection_charge = rate.Connection_charge,
                                Active = rate.Active,
                                Priority = rate.Priority,
                                Trunck = rate.Trunck,
                                BatchID = rate.BatchID,
                                CreatedOn = rate.CreatedOn,
                                StartPulse = rate.Start_Pulse,
                                NextPulse = rate.Next_Pulse
                            });
                        }
                        return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "true", records = Ratelist1, totalrecords = Ratelist1.Count, message = "Records Fetched" });
                    }
                    else
                    {
                        return RMSCDR.SerializeAndCreateMS(new ShowRecords() { status = "false", records = null, totalrecords = Ratelist1.Count, message = "Type should be effectiveon or Batch" });
                    }
                }
                con.Close();
            }
            catch (Exception ex)
            {
                return RMSCDR.SerializeAndCreateMS(new Response() { status = "false", Message = ex.Message });
            }
            finally
            {
                con.Close();
            }
        }



        protected string ConversiontoOldNexegeFuture(List<ngt_rateslist> RateSheet)
        {
            List<OldNexegeRatesheet> rateList = new List<OldNexegeRatesheet>();
            try
            {
                string OriginalName = DateTime.Now.ToString("yyyyMMddHHmmssffff") + ".csv";
                //CsvFileName = OriginalName;
                string files = "~/FuturOldeNexgeRatesheet/" + OriginalName;
                string filename = HostingEnvironment.MapPath(files);
                foreach (var rate in RateSheet)
                {
                    if (rate.Active != "D")
                    {
                        //using (rmsEntities rmsContxt = new rmsEntities())
                        //{
                        //    foreach (var k in rmsContxt.specialcharconfigs.ToList())
                        //    {
                        //        rate.Description.Replace(k.Char, k.Replace);
                        //        rate.ngt_regionName.Replace(k.Char, k.Replace);
                        //    }
                        //}
                        rateList.Add(new OldNexegeRatesheet() { Blocked = rate.Active == "A" ? "False" : "True", Country_Name = rate.Description, Country_Prefix = rate.ngt_regionName, Rate = rate.Call_rate });
                    }
                }

                RMSDTR.CreateCSVFromGenericList(rateList, filename);
                return filename;
            }
            catch (Exception ex)
            {
                return "Exception " + ex.Message;
            }

        }


        private class OldNexegeRatesheet
        {
            public string Country_Prefix { get; set; }
            public string Country_Name { get; set; }
            public decimal Rate { get; set; }
            public string Blocked { get; set; }
            public int Pulse_Rule_Id = 0;
        }


        public class RegioncodeId
        {
            public int Bid { get; set; }

            public int RegionDBId { get; set; }
        }
        public partial class ngt_ratesheetupdatelist
        {
            public int RatesheetID { get; set; }
            public string RatesheetName { get; set; }
            public string Tag { get; set; }
            public string Owner { get; set; }
            public Nullable<int> CurrencyID { get; set; }
            public string CurrencyName { get; set; }
            public Nullable<int> Status { get; set; }
            public string CreationDate { get; set; }
            public string CreatedBy { get; set; }
            public string LastUpdatedOn { get; set; }
            public string UpdatedBy { get; set; }
            public int PartitionID { get; set; }
            public string ServerRatesheetName { get; set; }
            public string ServerName { get; set; }
            //public string RatesheetName { get; set; }

        }

        public partial class ngt_ratesheetstatuslist
        {
            public int ID { get; set; }
            public string RequestID { get; set; }
            public string RequestType { get; set; }
            public string RatesheetID { get; set; }
            public string RatesheetName { get; set; }
            public string BatchID { get; set; }
            public string ServerID { get; set; }
            public string ServerName { get; set; }
            public string ServerRatesheetID { get; set; }
            public string ServerRatesheetName { get; set; }
            public string DBstatus { get; set; }
            public string ServerStstus { get; set; }
            public string CompleteStatus { get; set; }
            public string UpdatedDate { get; set; }
            // public string CreatedBy { get; set; }
            // public int PartitionID { get; set; }

            public string UpdatedBy { get; set; }
            public string Message { get; set; }
        }




        //shripal

        public class testNew
        {
            public int ID { get; set; }
            public string Code { get; set; }
        }
        public class testNewservice
        {
            public string code { get; set; }
            public string codename { get; set; }
        }
        public class TestNew2
        {
            public string code { get; set; }
            public string codeName { get; set; }
            public string rate { get; set; }
            public string status { get; set; }
            public string effectiveDate { get; set; }
            public string startPulse { get; set; }
            public string nextPulse { get; set; }
        }

    }
}

